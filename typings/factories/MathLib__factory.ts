/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MathLib, MathLibInterface } from "../MathLib";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "c__0x2480aea4",
        type: "bytes32",
      },
    ],
    name: "c_0x2480aea4",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x6073610024600b82828239805160001a607314601757fe5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c80632e58fa5f146038575b600080fd5b606160048036036020811015604c57600080fd5b81019080803590602001909291905050506063565b005b5056fea164736f6c634300060c000a";

export class MathLib__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MathLib> {
    return super.deploy(overrides || {}) as Promise<MathLib>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MathLib {
    return super.attach(address) as MathLib;
  }
  connect(signer: Signer): MathLib__factory {
    return super.connect(signer) as MathLib__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MathLibInterface {
    return new utils.Interface(_abi) as MathLibInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MathLib {
    return new Contract(address, _abi, signerOrProvider) as MathLib;
  }
}
