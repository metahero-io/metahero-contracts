{
  "address": "0x7EEFC3E2dcb85c5Bd3E1142CD1D670286E25ca42",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minVotingPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "snapshotWindow",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "snapshotBaseTimestamp",
          "type": "uint256"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "snapshotId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startsAt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endsAt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "votesMinPercentage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "votesMinWeight",
          "type": "uint256"
        }
      ],
      "name": "ProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "votesYesWeight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "votesNoWeight",
          "type": "uint256"
        }
      ],
      "name": "ProposalProcessed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "member",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "vote",
          "type": "uint8"
        }
      ],
      "name": "VoteSubmitted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "startsIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endsIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "votesMinPercentage",
          "type": "uint256"
        }
      ],
      "name": "createProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "excludeSenderFromFee",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "excludeRecipientFromFee",
          "type": "bool"
        }
      ],
      "name": "excludeTokenAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "getCurrentMemberWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentSnapshotId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentTotalWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "getMemberProposalVote",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "snapshotId",
          "type": "uint256"
        }
      ],
      "name": "getMemberWeightOnSnapshot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "getProposal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "snapshotId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "startsAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endsAt",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "processed",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "votesMinPercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "votesMinWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "votesYesWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "votesNoWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "votesCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "getSnapshotIdAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "snapshotId",
          "type": "uint256"
        }
      ],
      "name": "getTotalWeightOnSnapshot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minVotingPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "snapshotWindow",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "processProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "removeAllTokenFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "removeTokenLPFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "settings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "minVotingPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "snapshotWindow",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "vote",
          "type": "uint8"
        }
      ],
      "name": "submitVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "memberWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalWeight",
          "type": "uint256"
        }
      ],
      "name": "syncMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "memberA",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "memberAWeight",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "memberB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "memberBWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalWeight",
          "type": "uint256"
        }
      ],
      "name": "syncMembers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract MetaheroToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xcea3a38acf81b39b45ed1e24e34e3e626192450abaf1260d0c2c12cf27593528",
  "receipt": {
    "to": null,
    "from": "0x83005eF06F5D1483782F5aF1B4CD47079A680b05",
    "contractAddress": "0x7EEFC3E2dcb85c5Bd3E1142CD1D670286E25ca42",
    "transactionIndex": 1,
    "gasUsed": "3404826",
    "logsBloom": "0x
    "blockHash": "0xdcb44d2f4d30a72d9bfa1c545a3c9c217235f0a697cdcbc482c123818da643ac",
    "transactionHash": "0xcea3a38acf81b39b45ed1e24e34e3e626192450abaf1260d0c2c12cf27593528",
    "logs": [],
    "blockNumber": 23245330,
    "cumulativeGasUsed": "3476850",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6984f419588ef12359477ab4b13178e3",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minVotingPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"snapshotWindow\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"snapshotBaseTimestamp\",\"type\":\"uint256\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startsAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endsAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votesMinPercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votesMinWeight\",\"type\":\"uint256\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votesYesWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votesNoWeight\",\"type\":\"uint256\"}],\"name\":\"ProposalProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"vote\",\"type\":\"uint8\"}],\"name\":\"VoteSubmitted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"startsIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endsIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votesMinPercentage\",\"type\":\"uint256\"}],\"name\":\"createProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excludeSenderFromFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"excludeRecipientFromFee\",\"type\":\"bool\"}],\"name\":\"excludeTokenAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"getCurrentMemberWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentSnapshotId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTotalWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getMemberProposalVote\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"name\":\"getMemberWeightOnSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"startsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endsAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"processed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"votesMinPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votesMinWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votesYesWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votesNoWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votesCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getSnapshotIdAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"name\":\"getTotalWeightOnSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minVotingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"snapshotWindow\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"processProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeAllTokenFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeTokenLPFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minVotingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"snapshotWindow\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"vote\",\"type\":\"uint8\"}],\"name\":\"submitVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"memberWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWeight\",\"type\":\"uint256\"}],\"name\":\"syncMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"memberA\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"memberAWeight\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"memberB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"memberBWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWeight\",\"type\":\"uint256\"}],\"name\":\"syncMembers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract MetaheroToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Stanis\\u0142aw G\\u0142ogowski <stan@metahero.io>\",\"events\":{\"Initialized(address,address,uint256,uint256,uint256)\":{\"details\":\"Emitted the contract is initialized\",\"params\":{\"minVotingPeriod\":\"min voting period\",\"operator\":\"operator address\",\"snapshotBaseTimestamp\":\"snapshot base timestamp\",\"snapshotWindow\":\"snapshot window\",\"token\":\"token address\"}},\"ProposalCreated(uint256,uint256,bytes,uint256,uint256,uint256,uint256)\":{\"details\":\"Emitted the proposal is created\",\"params\":{\"callData\":\"token call data\",\"endsAt\":\"ends at\",\"proposalId\":\"proposal id\",\"snapshotId\":\"snapshot id\",\"startsAt\":\"starts at\",\"votesMinPercentage\":\"votes min percentage\",\"votesMinWeight\":\"votes min weight\"}},\"ProposalProcessed(uint256,uint256,uint256)\":{\"details\":\"Emitted the proposal is processed\",\"params\":{\"proposalId\":\"proposal id\",\"votesNoWeight\":\"votes no weight\",\"votesYesWeight\":\"votes yes weight\"}},\"VoteSubmitted(uint256,address,uint8)\":{\"details\":\"Emitted the vote is submitted\",\"params\":{\"member\":\"member address\",\"proposalId\":\"proposal id\",\"vote\":\"where `1` eq yes and `2` eq no\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Public constructor\"},\"createProposal(bytes,uint256,uint256,uint256)\":{\"details\":\"Creates proposal\",\"params\":{\"callData\":\"token call data\",\"endsIn\":\"ends in\",\"startsIn\":\"starts in\",\"votesMinPercentage\":\"votes min percentage\"}},\"excludeTokenAccount(address,bool,bool)\":{\"details\":\"Excludes token account\",\"params\":{\"account\":\"account address\",\"excludeRecipientFromFee\":\"exclude recipient from fee\",\"excludeSenderFromFee\":\"exclude sender from fee\"}},\"initialize(address,address,uint256,uint256)\":{\"details\":\"Initializes the contract\",\"params\":{\"minVotingPeriod\":\"min voting period\",\"operator_\":\"custom operator address\",\"snapshotWindow\":\"snapshot window\",\"token_\":\"token address\"}},\"initialized()\":{\"returns\":{\"_0\":\"true when contract is initialized\"}},\"processProposal(uint256)\":{\"details\":\"Processes proposal\",\"params\":{\"proposalId\":\"proposal id\"}},\"removeAllTokenFees()\":{\"details\":\"Removes all token fees\"},\"removeTokenLPFees()\":{\"details\":\"Removes token lp fees\"},\"submitVote(uint256,uint8)\":{\"details\":\"Submits vote\",\"params\":{\"proposalId\":\"proposal id\",\"vote\":\"where `1` eq yes and `2` eq no\"}},\"syncMember(address,uint256,uint256)\":{\"params\":{\"member\":\"member address\",\"memberWeight\":\"member weight\",\"totalWeight\":\"all members weight\"}},\"syncMembers(address,uint256,address,uint256,uint256)\":{\"params\":{\"memberA\":\"member A address\",\"memberAWeight\":\"member A weight\",\"memberB\":\"member B address\",\"memberBWeight\":\"member B weight\",\"totalWeight\":\"all members weight\"}}},\"stateVariables\":{\"operator\":{\"return\":\"operator address\"},\"settings\":{\"return\":\"settings object\"},\"token\":{\"return\":\"token address\"}},\"title\":\"Metahero DAO\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initialized()\":{\"notice\":\"Checks if contract is initialized\"},\"syncMember(address,uint256,uint256)\":{\"notice\":\"Called by a token to sync a dao member\"},\"syncMembers(address,uint256,address,uint256,uint256)\":{\"notice\":\"Called by a token to sync a dao members\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/MetaheroDAO.sol\":\"MetaheroDAO\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/IMetaheroDAO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Metahero DAO interface\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@metahero.io>\\n */\\ninterface IMetaheroDAO {\\n  // external functions\\n\\n  /**\\n   * @notice Called by a token to sync a dao member\\n   * @param member member address\\n   * @param memberWeight member weight\\n   * @param totalWeight all members weight\\n   */\\n  function syncMember(\\n    address member,\\n    uint256 memberWeight,\\n    uint256 totalWeight\\n  ) external;\\n\\n  /**\\n   * @notice Called by a token to sync a dao members\\n   * @param memberA member A address\\n   * @param memberAWeight member A weight\\n   * @param memberB member B address\\n   * @param memberBWeight member B weight\\n   * @param totalWeight all members weight\\n   */\\n  function syncMembers(\\n    address memberA,\\n    uint256 memberAWeight,\\n    address memberB,\\n    uint256 memberBWeight,\\n    uint256 totalWeight\\n  ) external;\\n}\\n\",\"keccak256\":\"0x10762ebf34d77bfca66f0deeb79b9645832c085c9a1d7c7d53df2dd23becbaa0\",\"license\":\"MIT\"},\"src/MetaheroDAO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./core/lifecycle/Initializable.sol\\\";\\nimport \\\"./core/math/MathLib.sol\\\";\\nimport \\\"./core/math/SafeMathLib.sol\\\";\\nimport \\\"./IMetaheroDAO.sol\\\";\\nimport \\\"./MetaheroToken.sol\\\";\\n\\n/**\\n * @title Metahero DAO\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@metahero.io>\\n */\\ncontract MetaheroDAO is Initializable, IMetaheroDAO {\\n  using MathLib for uint256;\\n  using SafeMathLib for uint256;\\n\\n  struct Settings {\\n    uint256 minVotingPeriod;\\n    uint256 snapshotWindow;\\n  }\\n\\n  struct Proposal {\\n    uint256 snapshotId;\\n    bytes callData;\\n    uint256 startsAt;\\n    uint256 endsAt;\\n    bool processed;\\n    uint256 votesMinPercentage;\\n    uint256 votesMinWeight;\\n    uint256 votesYesWeight;\\n    uint256 votesNoWeight;\\n    uint256 votesCount;\\n    mapping(address => uint8) votes; // 1 - yes, 2 - no\\n  }\\n\\n  struct WeightsHistory {\\n    uint256[] weights;\\n    uint256[] snapshotIds;\\n  }\\n\\n  // globals\\n\\n  uint256 private constant MAX_VOTES_MIN_PERCENTAGE = 75; // 75%\\n\\n  /**\\n   * @return operator address\\n   */\\n  address public operator;\\n\\n  /**\\n   * @return token address\\n   */\\n  MetaheroToken public token;\\n\\n  /**\\n   * @return settings object\\n   */\\n  Settings public settings;\\n\\n  mapping(uint256 => Proposal) private proposals;\\n  mapping(address => WeightsHistory) private membersWeightsHistory;\\n  WeightsHistory private totalWeightsHistory;\\n  uint256 private proposalCounter;\\n  uint256 private snapshotBaseTimestamp;\\n\\n  // events\\n\\n  /**\\n   * @dev Emitted the contract is initialized\\n   * @param token token address\\n   * @param operator operator address\\n   * @param minVotingPeriod min voting period\\n   * @param snapshotWindow snapshot window\\n   * @param snapshotBaseTimestamp snapshot base timestamp\\n   */\\n  event Initialized(\\n    address token,\\n    address operator,\\n    uint256 minVotingPeriod,\\n    uint256 snapshotWindow,\\n    uint256 snapshotBaseTimestamp\\n  );\\n\\n  /**\\n   * @dev Emitted the proposal is created\\n   * @param proposalId proposal id\\n   * @param callData token call data\\n   * @param snapshotId snapshot id\\n   * @param startsAt starts at\\n   * @param endsAt ends at\\n   * @param votesMinPercentage votes min percentage\\n   * @param votesMinWeight votes min weight\\n   */\\n  event ProposalCreated(\\n    uint256 proposalId,\\n    uint256 snapshotId,\\n    bytes callData,\\n    uint256 startsAt,\\n    uint256 endsAt,\\n    uint256 votesMinPercentage,\\n    uint256 votesMinWeight\\n  );\\n\\n  /**\\n   * @dev Emitted the proposal is processed\\n   * @param proposalId proposal id\\n   * @param votesYesWeight votes yes weight\\n   * @param votesNoWeight votes no weight\\n   */\\n  event ProposalProcessed(\\n    uint256 proposalId,\\n    uint256 votesYesWeight,\\n    uint256 votesNoWeight\\n  );\\n\\n  /**\\n   * @dev Emitted the vote is submitted\\n   * @param proposalId proposal id\\n   * @param member member address\\n   * @param vote where `1` eq yes and `2` eq no\\n   */\\n  event VoteSubmitted(uint256 proposalId, address member, uint8 vote);\\n\\n  // modifiers\\n\\n  /**\\n   * @dev Throws if msg.sender is not the operator\\n   */\\n  modifier onlyOperator() {\\n    require(\\n      msg.sender == operator,\\n      \\\"MetaheroDAO#1\\\" // msg.sender is not the operator\\n    );\\n\\n    _;\\n  }\\n\\n  /**\\n   * @dev Throws if msg.sender is not the token\\n   */\\n  modifier onlyToken() {\\n    require(\\n      msg.sender == address(token),\\n      \\\"MetaheroDAO#2\\\" // msg.sender is not the token\\n    );\\n\\n    _;\\n  }\\n\\n  /**\\n   * @dev Public constructor\\n   */\\n  constructor() public Initializable() {\\n    //\\n  }\\n\\n  // external functions\\n\\n  /**\\n   * @dev Initializes the contract\\n   * @param token_ token address\\n   * @param operator_ custom operator address\\n   * @param minVotingPeriod min voting period\\n   * @param snapshotWindow snapshot window\\n   */\\n  function initialize(\\n    address token_,\\n    address operator_,\\n    uint256 minVotingPeriod,\\n    uint256 snapshotWindow\\n  ) external onlyInitializer {\\n    require(\\n      token_ != address(0),\\n      \\\"MetaheroDAO#3\\\" // token is the zero address\\n    );\\n\\n    require(\\n      minVotingPeriod != 0,\\n      \\\"MetaheroDAO#4\\\" // min voting period is zero\\n    );\\n\\n    require(\\n      snapshotWindow != 0,\\n      \\\"MetaheroDAO#5\\\" // snapshot window is zero\\n    );\\n\\n    token = MetaheroToken(token_);\\n\\n    if (operator_ == address(0)) {\\n      operator_ = token.owner();\\n    }\\n\\n    operator = operator_;\\n\\n    settings.minVotingPeriod = minVotingPeriod;\\n    settings.snapshotWindow = snapshotWindow;\\n\\n    snapshotBaseTimestamp = block.timestamp; // solhint-disable-line not-rely-on-time\\n\\n    emit Initialized(\\n      token_,\\n      operator_,\\n      minVotingPeriod,\\n      snapshotWindow,\\n      snapshotBaseTimestamp\\n    );\\n  }\\n\\n  /**\\n   * @notice Called by a token to sync a dao member\\n   * @param member member address\\n   * @param memberWeight member weight\\n   * @param totalWeight all members weight\\n   */\\n  function syncMember(\\n    address member,\\n    uint256 memberWeight,\\n    uint256 totalWeight\\n  ) external override onlyToken {\\n    uint256 snapshotId = _getSnapshotIdAt(block.timestamp); // solhint-disable-line not-rely-on-time\\n\\n    _setMemberWeight(member, memberWeight, snapshotId);\\n\\n    _setTotalWeight(totalWeight, snapshotId);\\n  }\\n\\n  /**\\n   * @notice Called by a token to sync a dao members\\n   * @param memberA member A address\\n   * @param memberAWeight member A weight\\n   * @param memberB member B address\\n   * @param memberBWeight member B weight\\n   * @param totalWeight all members weight\\n   */\\n  function syncMembers(\\n    address memberA,\\n    uint256 memberAWeight,\\n    address memberB,\\n    uint256 memberBWeight,\\n    uint256 totalWeight\\n  ) external override onlyToken {\\n    uint256 snapshotId = _getSnapshotIdAt(block.timestamp); // solhint-disable-line not-rely-on-time\\n\\n    _setMemberWeight(memberA, memberAWeight, snapshotId);\\n\\n    _setMemberWeight(memberB, memberBWeight, snapshotId);\\n\\n    _setTotalWeight(totalWeight, snapshotId);\\n  }\\n\\n  /**\\n   * @dev Removes all token fees\\n   */\\n  function removeAllTokenFees() external onlyOperator {\\n    token.updateFees(\\n      MetaheroToken.Fees(0, 0),\\n      MetaheroToken.Fees(0, 0),\\n      MetaheroToken.Fees(0, 0)\\n    );\\n  }\\n\\n  /**\\n   * @dev Removes token lp fees\\n   */\\n  function removeTokenLPFees() external onlyOperator {\\n    (\\n      MetaheroToken.Fees memory burnFees,\\n      MetaheroToken.Fees memory lpFees,\\n      MetaheroToken.Fees memory rewardsFees,\\n\\n    ) = token.settings();\\n\\n    require(\\n      lpFees.sender != 0 || lpFees.recipient != 0,\\n      \\\"MetaheroDAO#6\\\" // already removed\\n    );\\n\\n    token.updateFees(\\n      MetaheroToken.Fees(\\n        burnFees.sender.add(lpFees.sender),\\n        burnFees.recipient.add(lpFees.recipient)\\n      ),\\n      MetaheroToken.Fees(0, 0), // remove lp fees\\n      rewardsFees\\n    );\\n  }\\n\\n  /**\\n   * @dev Excludes token account\\n   * @param account account address\\n   * @param excludeSenderFromFee exclude sender from fee\\n   * @param excludeRecipientFromFee exclude recipient from fee\\n   */\\n  function excludeTokenAccount(\\n    address account,\\n    bool excludeSenderFromFee,\\n    bool excludeRecipientFromFee\\n  ) external onlyOperator {\\n    token.excludeAccount(\\n      account,\\n      excludeSenderFromFee,\\n      excludeRecipientFromFee\\n    );\\n  }\\n\\n  /**\\n   * @dev Creates proposal\\n   * @param callData token call data\\n   * @param startsIn starts in\\n   * @param endsIn ends in\\n   * @param votesMinPercentage votes min percentage\\n   */\\n  function createProposal(\\n    bytes calldata callData,\\n    uint256 startsIn,\\n    uint256 endsIn,\\n    uint256 votesMinPercentage\\n  ) external onlyOperator {\\n    require(\\n      endsIn > startsIn,\\n      \\\"MetaheroDAO#7\\\" // `ends in` should be higher than `starts in`\\n    );\\n\\n    require(\\n      endsIn.sub(startsIn) >= settings.minVotingPeriod,\\n      \\\"MetaheroDAO#8\\\" // voting period is too short\\n    );\\n\\n    proposalCounter++;\\n\\n    uint256 proposalId = proposalCounter;\\n    uint256 snapshotId = _getSnapshotIdAt(block.timestamp); // solhint-disable-line not-rely-on-time\\n    uint256 startsAt = startsIn.add(block.timestamp); // solhint-disable-line not-rely-on-time\\n    uint256 endsAt = endsIn.add(block.timestamp); // solhint-disable-line not-rely-on-time\\n    uint256 votesMinWeight;\\n\\n    if (votesMinPercentage != 0) {\\n      require(\\n        votesMinPercentage <= MAX_VOTES_MIN_PERCENTAGE,\\n        \\\"MetaheroDAO#9\\\" // invalid votes min percentage\\n      );\\n\\n      votesMinWeight = _getTotalWeightOnSnapshot(snapshotId).percent(\\n        votesMinPercentage\\n      );\\n    }\\n\\n    proposals[proposalId].snapshotId = snapshotId;\\n    proposals[proposalId].callData = callData;\\n    proposals[proposalId].startsAt = startsAt;\\n    proposals[proposalId].endsAt = endsAt;\\n    proposals[proposalId].votesMinPercentage = votesMinPercentage;\\n    proposals[proposalId].votesMinWeight = votesMinWeight;\\n\\n    emit ProposalCreated(\\n      proposalId,\\n      snapshotId,\\n      callData,\\n      startsAt,\\n      endsAt,\\n      votesMinPercentage,\\n      votesMinWeight\\n    );\\n  }\\n\\n  /**\\n   * @dev Processes proposal\\n   * @param proposalId proposal id\\n   */\\n  function processProposal(uint256 proposalId) external {\\n    Proposal memory proposal = proposals[proposalId];\\n\\n    require(\\n      proposal.snapshotId != 0,\\n      \\\"MetaheroDAO#10\\\" // proposal not found\\n    );\\n\\n    require(\\n      proposal.endsAt <= block.timestamp, // solhint-disable-line not-rely-on-time\\n      \\\"MetaheroDAO#11\\\"\\n    );\\n\\n    require(\\n      !proposal.processed,\\n      \\\"MetaheroDAO#12\\\" // already processed\\n    );\\n\\n    if (\\n      proposal.callData.length > 0 &&\\n      proposal.votesYesWeight > proposal.votesNoWeight &&\\n      proposal.votesYesWeight >= proposal.votesMinWeight\\n    ) {\\n      (bool success, ) = address(token).call(proposal.callData); // solhint-disable-line avoid-low-level-calls\\n\\n      require(\\n        success,\\n        \\\"MetaheroDAO#13\\\" // call failed\\n      );\\n    }\\n\\n    proposals[proposalId].processed = true;\\n\\n    emit ProposalProcessed(\\n      proposalId,\\n      proposal.votesYesWeight,\\n      proposal.votesNoWeight\\n    );\\n  }\\n\\n  /**\\n   * @dev Submits vote\\n   * @param proposalId proposal id\\n   * @param vote where `1` eq yes and `2` eq no\\n   */\\n  function submitVote(uint256 proposalId, uint8 vote) external {\\n    Proposal memory proposal = proposals[proposalId];\\n\\n    require(\\n      proposal.snapshotId != 0,\\n      \\\"MetaheroDAO#14\\\" // proposal not found\\n    );\\n\\n    require(\\n      proposal.startsAt <= block.timestamp, // solhint-disable-line not-rely-on-time\\n      \\\"MetaheroDAO#15\\\"\\n    );\\n\\n    require(\\n      proposal.endsAt > block.timestamp, // solhint-disable-line not-rely-on-time\\n      \\\"MetaheroDAO#16\\\"\\n    );\\n\\n    require(vote == 1 || vote == 2, \\\"MetaheroDAO#17\\\");\\n\\n    require(proposals[proposalId].votes[msg.sender] == 0, \\\"MetaheroDAO#18\\\");\\n\\n    uint256 memberWeight = _getMemberWeightOnSnapshot(\\n      msg.sender,\\n      proposal.snapshotId\\n    );\\n\\n    require(memberWeight != 0, \\\"MetaheroDAO#19\\\");\\n\\n    if (vote == 1) {\\n      // yes vote\\n      proposals[proposalId].votesYesWeight = proposal.votesYesWeight.add(\\n        memberWeight\\n      );\\n    }\\n\\n    if (vote == 2) {\\n      // no vote\\n      proposals[proposalId].votesNoWeight = proposal.votesNoWeight.add(\\n        memberWeight\\n      );\\n    }\\n\\n    proposals[proposalId].votesCount = proposal.votesCount.add(1);\\n    proposals[proposalId].votes[msg.sender] = vote;\\n\\n    emit VoteSubmitted(proposalId, msg.sender, vote);\\n  }\\n\\n  // external functions (views)\\n\\n  function getProposal(uint256 proposalId)\\n    external\\n    view\\n    returns (\\n      uint256 snapshotId,\\n      bytes memory callData,\\n      uint256 startsAt,\\n      uint256 endsAt,\\n      bool processed,\\n      uint256 votesMinPercentage,\\n      uint256 votesMinWeight,\\n      uint256 votesYesWeight,\\n      uint256 votesNoWeight,\\n      uint256 votesCount\\n    )\\n  {\\n    {\\n      snapshotId = proposals[proposalId].snapshotId;\\n      callData = proposals[proposalId].callData;\\n      startsAt = proposals[proposalId].startsAt;\\n      endsAt = proposals[proposalId].endsAt;\\n      processed = proposals[proposalId].processed;\\n      votesMinPercentage = proposals[proposalId].votesMinPercentage;\\n      votesMinWeight = proposals[proposalId].votesMinWeight;\\n      votesYesWeight = proposals[proposalId].votesYesWeight;\\n      votesNoWeight = proposals[proposalId].votesNoWeight;\\n      votesCount = proposals[proposalId].votesCount;\\n    }\\n\\n    return (\\n      snapshotId,\\n      callData,\\n      startsAt,\\n      endsAt,\\n      processed,\\n      votesMinPercentage,\\n      votesMinWeight,\\n      votesYesWeight,\\n      votesNoWeight,\\n      votesCount\\n    );\\n  }\\n\\n  function getMemberProposalVote(address member, uint256 proposalId)\\n    external\\n    view\\n    returns (uint8)\\n  {\\n    return proposals[proposalId].votes[member];\\n  }\\n\\n  function getCurrentSnapshotId() external view returns (uint256) {\\n    return _getSnapshotIdAt(block.timestamp); // solhint-disable-line not-rely-on-time\\n  }\\n\\n  function getSnapshotIdAt(uint256 timestamp) external view returns (uint256) {\\n    return _getSnapshotIdAt(timestamp);\\n  }\\n\\n  function getCurrentMemberWeight(address member)\\n    external\\n    view\\n    returns (uint256)\\n  {\\n    return\\n      _getMemberWeightOnSnapshot(\\n        member,\\n        _getSnapshotIdAt(block.timestamp) // solhint-disable-line not-rely-on-time\\n      );\\n  }\\n\\n  function getMemberWeightOnSnapshot(address member, uint256 snapshotId)\\n    external\\n    view\\n    returns (uint256)\\n  {\\n    return _getMemberWeightOnSnapshot(member, snapshotId);\\n  }\\n\\n  function getCurrentTotalWeight() external view returns (uint256) {\\n    return\\n      _getTotalWeightOnSnapshot(\\n        _getSnapshotIdAt(block.timestamp) // solhint-disable-line not-rely-on-time\\n      );\\n  }\\n\\n  function getTotalWeightOnSnapshot(uint256 snapshotId)\\n    external\\n    view\\n    returns (uint256)\\n  {\\n    return _getTotalWeightOnSnapshot(snapshotId);\\n  }\\n\\n  // private functions\\n\\n  function _setMemberWeight(\\n    address member,\\n    uint256 memberWeight,\\n    uint256 snapshotId\\n  ) private {\\n    uint256 snapshotIdsLen = membersWeightsHistory[member].snapshotIds.length;\\n\\n    if (snapshotIdsLen == 0) {\\n      membersWeightsHistory[member].weights.push(memberWeight);\\n      membersWeightsHistory[member].snapshotIds.push(snapshotId);\\n    } else {\\n      uint256 snapshotIdsLastIndex = snapshotIdsLen - 1;\\n\\n      if (\\n        membersWeightsHistory[member].snapshotIds[snapshotIdsLastIndex] ==\\n        snapshotId\\n      ) {\\n        membersWeightsHistory[member].weights[\\n          snapshotIdsLastIndex\\n        ] = memberWeight;\\n      } else {\\n        membersWeightsHistory[member].weights.push(memberWeight);\\n        membersWeightsHistory[member].snapshotIds.push(snapshotId);\\n      }\\n    }\\n  }\\n\\n  function _setTotalWeight(uint256 totalWeight, uint256 snapshotId) private {\\n    uint256 snapshotIdsLen = totalWeightsHistory.snapshotIds.length;\\n\\n    if (snapshotIdsLen == 0) {\\n      totalWeightsHistory.weights.push(totalWeight);\\n      totalWeightsHistory.snapshotIds.push(snapshotId);\\n    } else {\\n      uint256 snapshotIdsLastIndex = snapshotIdsLen - 1;\\n\\n      if (totalWeightsHistory.snapshotIds[snapshotIdsLastIndex] == snapshotId) {\\n        totalWeightsHistory.weights[snapshotIdsLastIndex] = totalWeight;\\n      } else {\\n        totalWeightsHistory.weights.push(totalWeight);\\n        totalWeightsHistory.snapshotIds.push(snapshotId);\\n      }\\n    }\\n  }\\n\\n  // private functions (views)\\n\\n  function _getSnapshotIdAt(uint256 timestamp) private view returns (uint256) {\\n    return\\n      snapshotBaseTimestamp >= timestamp\\n        ? 0\\n        : timestamp.sub(snapshotBaseTimestamp).div(settings.snapshotWindow).add(\\n          1\\n        );\\n  }\\n\\n  function _getMemberWeightOnSnapshot(address member, uint256 snapshotId)\\n    private\\n    view\\n    returns (uint256 result)\\n  {\\n    WeightsHistory memory weightsHistory = membersWeightsHistory[member];\\n    uint256 len = weightsHistory.snapshotIds.length;\\n\\n    if (len != 0) {\\n      for (uint256 pos = 1; pos <= len; pos++) {\\n        uint256 index = len - pos;\\n\\n        if (weightsHistory.snapshotIds[index] <= snapshotId) {\\n          result = membersWeightsHistory[member].weights[index];\\n          break;\\n        }\\n      }\\n    } else {\\n      (, uint256 holdingBalance, uint256 totalRewards) = token\\n        .getBalanceSummary(member);\\n\\n      if (totalRewards != 0) {\\n        result = holdingBalance;\\n      }\\n    }\\n\\n    return result;\\n  }\\n\\n  function _getTotalWeightOnSnapshot(uint256 snapshotId)\\n    private\\n    view\\n    returns (uint256 result)\\n  {\\n    uint256 len = totalWeightsHistory.snapshotIds.length;\\n\\n    if (len != 0) {\\n      for (uint256 pos = 1; pos <= len; pos++) {\\n        uint256 index = len - pos;\\n\\n        if (totalWeightsHistory.snapshotIds[index] <= snapshotId) {\\n          result = totalWeightsHistory.weights[index];\\n          break;\\n        }\\n      }\\n    } else {\\n      (, uint256 totalHolding, , ) = token.summary();\\n\\n      result = totalHolding;\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0xc0f7155dec075a50449076a033e6bfe34e4baa735fa5ce100640a171a4d014b0\",\"license\":\"MIT\"},\"src/MetaheroLPM.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"./core/access/Lockable.sol\\\";\\nimport \\\"./core/access/Owned.sol\\\";\\nimport \\\"./core/lifecycle/Initializable.sol\\\";\\nimport \\\"./core/math/SafeMathLib.sol\\\";\\nimport \\\"./MetaheroToken.sol\\\";\\n\\n/**\\n * @title Metahero abstract liquidity pool manager\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@metahero.io>\\n */\\nabstract contract MetaheroLPM is Lockable, Owned, Initializable {\\n  using SafeMathLib for uint256;\\n\\n  /**\\n   * @return token address\\n   */\\n  MetaheroToken public token;\\n\\n  // modifiers\\n\\n  /**\\n   * @dev Throws if msg.sender is not the token\\n   */\\n  modifier onlyToken() {\\n    require(\\n      msg.sender == address(token),\\n      \\\"MetaheroLPM#1\\\" // msg.sender is not the token\\n    );\\n\\n    _;\\n  }\\n\\n  // events\\n\\n  /**\\n   * @dev Emitted when tokens from the liquidity pool are burned\\n   * @param amount burnt amount\\n   */\\n  event LPBurnt(uint256 amount);\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor() internal Lockable() Owned() Initializable() {\\n    //\\n  }\\n\\n  // external functions\\n\\n  /**\\n\\n   * @notice Syncs liquidity pool\\n   */\\n  function syncLP() external onlyToken lock {\\n    _syncLP();\\n  }\\n\\n  /**\\n   * @notice Burns tokens from the liquidity pool\\n   * @param amount tokens amount\\n   */\\n  function burnLP(uint256 amount) external onlyOwner lockOrThrowError {\\n    require(\\n      amount != 0,\\n      \\\"MetaheroLPM#2\\\" // amount is zero\\n    );\\n\\n    _burnLP(amount);\\n\\n    emit LPBurnt(amount);\\n  }\\n\\n  // external functions (views)\\n\\n  function canSyncLP(address sender, address recipient)\\n    external\\n    view\\n    virtual\\n    returns (bool shouldSyncLPBefore, bool shouldSyncLPAfter);\\n\\n  // internal functions\\n\\n  function _initialize(address token_) internal {\\n    require(\\n      token_ != address(0),\\n      \\\"MetaheroLPM#3\\\" // token is the zero address\\n    );\\n\\n    token = MetaheroToken(token_);\\n  }\\n\\n  function _syncLP() internal virtual;\\n\\n  function _burnLP(uint256 amount) internal virtual;\\n}\\n\",\"keccak256\":\"0x39d7f12b5cb0e7de308934a4af33e956e2aafa0a4a2a778f333e92d59f6d6bd3\",\"license\":\"MIT\"},\"src/MetaheroToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./core/access/Controlled.sol\\\";\\nimport \\\"./core/access/Owned.sol\\\";\\nimport \\\"./core/erc20/ERC20.sol\\\";\\nimport \\\"./core/lifecycle/Initializable.sol\\\";\\nimport \\\"./core/math/MathLib.sol\\\";\\nimport \\\"./core/math/SafeMathLib.sol\\\";\\nimport \\\"./IMetaheroDAO.sol\\\";\\nimport \\\"./MetaheroLPM.sol\\\";\\n\\n/**\\n * @title Metahero token\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@metahero.io>\\n */\\ncontract MetaheroToken is Controlled, Owned, ERC20, Initializable {\\n  using MathLib for uint256;\\n  using SafeMathLib for uint256;\\n\\n  struct Fees {\\n    uint256 sender; // percent from sender\\n    uint256 recipient; // percent from recipient\\n  }\\n\\n  struct Settings {\\n    Fees burnFees; // fee taken and burned\\n    Fees lpFees; // fee taken and added to the liquidity pool manager\\n    Fees rewardsFees; // fee taken and added to rewards\\n    uint256 minTotalSupply; // min amount of tokens total supply\\n  }\\n\\n  struct Summary {\\n    uint256 totalExcluded; // total held by excluded accounts\\n    uint256 totalHolding; // total held by holder accounts\\n    uint256 totalRewards; // total rewards\\n    uint256 totalSupply; // total supply\\n  }\\n\\n  struct ExcludedAccount {\\n    bool exists; // true if exists\\n    bool excludeSenderFromFee; // removes the fee from all sender accounts on incoming transfers\\n    bool excludeRecipientFromFee; // removes the fee from all recipient accounts on outgoing transfers\\n  }\\n\\n  // globals\\n\\n  uint256 private constant MAX_FEE = 30; // max sum of all fees - 30%\\n\\n  // metadata\\n\\n  string private constant TOKEN_NAME = \\\"Metahero\\\";\\n  string private constant TOKEN_SYMBOL = \\\"HERO\\\";\\n  uint8 private constant TOKEN_DECIMALS = 18; // 0.000000000000000000\\n\\n  /**\\n   * @return dao address\\n   */\\n  IMetaheroDAO public dao;\\n\\n  /**\\n   * @return liquidity pool manager address\\n   */\\n  MetaheroLPM public lpm;\\n\\n  /**\\n   * @return settings object\\n   */\\n  Settings public settings;\\n\\n  /**\\n   * @return summary object\\n   */\\n  Summary public summary;\\n\\n  /**\\n   * @return return true when presale is finished\\n   */\\n  bool public presaleFinished;\\n\\n  mapping(address => uint256) private accountBalances;\\n  mapping(address => mapping(address => uint256)) private accountAllowances;\\n  mapping(address => ExcludedAccount) private excludedAccounts;\\n\\n  // events\\n\\n  /**\\n   * @dev Emitted when the contract is initialized\\n   * @param burnFees burn fees\\n   * @param lpFees liquidity pool fees\\n   * @param rewardsFees rewards fees\\n   * @param minTotalSupply min total supply\\n   * @param lpm liquidity pool manager address\\n   * @param controller controller address\\n   */\\n  event Initialized(\\n    Fees burnFees,\\n    Fees lpFees,\\n    Fees rewardsFees,\\n    uint256 minTotalSupply,\\n    address lpm,\\n    address controller\\n  );\\n\\n  /**\\n   * @dev Emitted when the dao is updated\\n   * @param dao dao address\\n   */\\n  event DAOUpdated(address dao);\\n\\n  /**\\n   * @dev Emitted when fees are updated\\n   * @param burnFees burn fees\\n   * @param lpFees liquidity pool fees\\n   * @param rewardsFees rewards fees\\n   */\\n  event FeesUpdated(Fees burnFees, Fees lpFees, Fees rewardsFees);\\n\\n  /**\\n   * @dev Emitted when the presale is finished\\n   */\\n  event PresaleFinished();\\n\\n  /**\\n   * @dev Emitted when account is excluded\\n   * @param account account address\\n   * @param excludeSenderFromFee exclude sender from fee\\n   * @param excludeRecipientFromFee exclude recipient from fee\\n   */\\n  event AccountExcluded(\\n    address indexed account,\\n    bool excludeSenderFromFee,\\n    bool excludeRecipientFromFee\\n  );\\n\\n  /**\\n   * @dev Emitted when total rewards amount is updated\\n   * @param totalRewards total rewards amount\\n   */\\n  event TotalRewardsUpdated(uint256 totalRewards);\\n\\n  // modifiers\\n\\n  /**\\n   * @dev Throws if msg.sender is not the dao\\n   */\\n  modifier onlyDAO() {\\n    require(\\n      msg.sender == address(dao),\\n      \\\"MetaheroToken#1\\\" // msg.sender is not the dao\\n    );\\n\\n    _;\\n  }\\n\\n  /**\\n   * @dev Throws if msg.sender is not the excluded account\\n   */\\n  modifier onlyExcludedAccount() {\\n    require(\\n      excludedAccounts[msg.sender].exists,\\n      \\\"MetaheroToken#2\\\" // msg.sender is not the excluded account\\n    );\\n\\n    _;\\n  }\\n\\n  /**\\n   * @dev Public constructor\\n   */\\n  constructor()\\n    public\\n    Controlled()\\n    Owned()\\n    ERC20(TOKEN_NAME, TOKEN_SYMBOL, TOKEN_DECIMALS) // sets metadata\\n    Initializable()\\n  {\\n    //\\n  }\\n\\n  // external functions\\n\\n  /**\\n   * @dev Initializes the contract\\n   * @param burnFees burn fees\\n   * @param lpFees liquidity pool fees\\n   * @param rewardsFees rewards fees\\n   * @param minTotalSupply min total supply\\n   * @param lpm_ liquidity pool manager address\\n   * @param controller_ controller address\\n   * @param totalSupply_ total supply\\n   */\\n  function initialize(\\n    Fees memory burnFees,\\n    Fees memory lpFees,\\n    Fees memory rewardsFees,\\n    uint256 minTotalSupply,\\n    address payable lpm_,\\n    address controller_,\\n    uint256 totalSupply_,\\n    address[] calldata excludedAccounts_\\n  ) external onlyInitializer {\\n    _verifyFees(burnFees, lpFees, rewardsFees);\\n\\n    settings.burnFees = burnFees;\\n    settings.lpFees = lpFees;\\n    settings.rewardsFees = rewardsFees;\\n    settings.minTotalSupply = minTotalSupply;\\n\\n    if (lpFees.sender != 0 || lpFees.recipient != 0) {\\n      require(\\n        lpm_ != address(0),\\n        \\\"MetaheroToken#3\\\" // lpm is the zero address\\n      );\\n\\n      lpm = MetaheroLPM(lpm_);\\n    }\\n\\n    _initializeController(controller_);\\n\\n    emit Initialized(\\n      burnFees,\\n      lpFees,\\n      rewardsFees,\\n      minTotalSupply,\\n      lpm_,\\n      controller_\\n    );\\n\\n    // excludes owner account\\n    _excludeAccount(msg.sender, true, true);\\n\\n    if (totalSupply_ != 0) {\\n      _mint(msg.sender, totalSupply_);\\n    }\\n\\n    // adds predefined excluded accounts\\n    uint256 excludedAccountsLen = excludedAccounts_.length;\\n\\n    for (uint256 index; index < excludedAccountsLen; index++) {\\n      _excludeAccount(excludedAccounts_[index], false, false);\\n    }\\n  }\\n\\n  /**\\n   * @dev Sets the dao\\n   * @param dao_ dao address\\n   */\\n  function setDAO(address dao_) external onlyOwner {\\n    require(\\n      dao_ != address(0),\\n      \\\"MetaheroToken#4\\\" // dao is the zero address\\n    );\\n\\n    dao = IMetaheroDAO(dao_);\\n\\n    emit DAOUpdated(dao_);\\n\\n    // makes a dao an owner\\n    _setOwner(dao_);\\n  }\\n\\n  /**\\n   * @dev Updates fees\\n   * @param burnFees burn fees\\n   * @param lpFees liquidity pool fees\\n   * @param rewardsFees rewards fees\\n   */\\n  function updateFees(\\n    Fees memory burnFees,\\n    Fees memory lpFees,\\n    Fees memory rewardsFees\\n  )\\n    external\\n    onlyDAO // only for dao\\n  {\\n    _verifyFees(burnFees, lpFees, rewardsFees);\\n\\n    settings.burnFees = burnFees;\\n    settings.lpFees = lpFees;\\n    settings.rewardsFees = rewardsFees;\\n\\n    emit FeesUpdated(burnFees, lpFees, rewardsFees);\\n  }\\n\\n  /**\\n   * @dev Set the presale as finished\\n   */\\n  function setPresaleAsFinished() external onlyOwner {\\n    require(\\n      !presaleFinished,\\n      \\\"MetaheroToken#5\\\" // the presale is already finished\\n    );\\n\\n    presaleFinished = true;\\n\\n    emit PresaleFinished();\\n  }\\n\\n  /**\\n   * @dev Excludes account\\n   * @param account account address\\n   * @param excludeSenderFromFee exclude sender from fee\\n   * @param excludeRecipientFromFee exclude recipient from fee\\n   */\\n  function excludeAccount(\\n    address account,\\n    bool excludeSenderFromFee,\\n    bool excludeRecipientFromFee\\n  ) external onlyOwner {\\n    _excludeAccount(account, excludeSenderFromFee, excludeRecipientFromFee);\\n  }\\n\\n  /**\\n   * @dev Approve spending limit\\n   * @param spender spender address\\n   * @param amount spending limit\\n   */\\n  function approve(address spender, uint256 amount)\\n    external\\n    override\\n    returns (bool)\\n  {\\n    _approve(msg.sender, spender, amount);\\n\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Mints tokens to recipient\\n   * @param recipient recipient address\\n   * @param amount tokens amount\\n   */\\n  function mintTo(address recipient, uint256 amount) external onlyController {\\n    _mint(recipient, amount);\\n  }\\n\\n  /**\\n   * @dev Burns tokens from msg.sender\\n   * @param amount tokens amount\\n   */\\n  function burn(uint256 amount) external onlyExcludedAccount {\\n    _burn(msg.sender, amount);\\n  }\\n\\n  /**\\n   * @dev Burns tokens from sender\\n   * @param sender sender address\\n   * @param amount tokens amount\\n   */\\n  function burnFrom(address sender, uint256 amount) external onlyController {\\n    _burn(sender, amount);\\n  }\\n\\n  /**\\n   * @dev Transfers tokens to recipient\\n   * @param recipient recipient address\\n   * @param amount tokens amount\\n   */\\n  function transfer(address recipient, uint256 amount)\\n    external\\n    override\\n    returns (bool)\\n  {\\n    _transfer(msg.sender, recipient, amount);\\n\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Transfers tokens from sender to recipient\\n   * @param sender sender address\\n   * @param recipient recipient address\\n   * @param amount tokens amount\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external override returns (bool) {\\n    _transfer(sender, recipient, amount);\\n\\n    uint256 allowance = accountAllowances[sender][msg.sender];\\n\\n    require(\\n      allowance >= amount,\\n      \\\"MetaheroToken#6\\\" // amount exceeds allowance\\n    );\\n\\n    _approve(sender, msg.sender, allowance.sub(amount)); // update allowance\\n\\n    return true;\\n  }\\n\\n  // external functions (views)\\n\\n  /**\\n   * @dev Gets excluded account\\n   * @param account account address\\n   */\\n  function getExcludedAccount(address account)\\n    external\\n    view\\n    returns (\\n      bool exists,\\n      bool excludeSenderFromFee,\\n      bool excludeRecipientFromFee\\n    )\\n  {\\n    return (\\n      excludedAccounts[account].exists,\\n      excludedAccounts[account].excludeSenderFromFee,\\n      excludedAccounts[account].excludeRecipientFromFee\\n    );\\n  }\\n\\n  /**\\n   * @dev Gets total supply\\n   * @return total supply\\n   */\\n  function totalSupply() external view override returns (uint256) {\\n    return summary.totalSupply;\\n  }\\n\\n  /**\\n   * @dev Gets allowance\\n   * @param owner owner address\\n   * @param spender spender address\\n   * @return allowance\\n   */\\n  function allowance(address owner, address spender)\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return accountAllowances[owner][spender];\\n  }\\n\\n  /**\\n   * @dev Gets balance of\\n   * @param account account address\\n   * @return result account balance\\n   */\\n  function balanceOf(address account)\\n    external\\n    view\\n    override\\n    returns (uint256 result)\\n  {\\n    result = accountBalances[account].add(_calcRewards(account));\\n\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Gets balance summary\\n   * @param account account address\\n   */\\n  function getBalanceSummary(address account)\\n    external\\n    view\\n    returns (\\n      uint256 totalBalance,\\n      uint256 holdingBalance,\\n      uint256 totalRewards\\n    )\\n  {\\n    holdingBalance = accountBalances[account];\\n    totalRewards = _calcRewards(account);\\n    totalBalance = holdingBalance.add(totalRewards);\\n\\n    return (totalBalance, holdingBalance, totalRewards);\\n  }\\n\\n  // private functions\\n\\n  function _excludeAccount(\\n    address account,\\n    bool excludeSenderFromFee,\\n    bool excludeRecipientFromFee\\n  ) private {\\n    require(\\n      account != address(0),\\n      \\\"MetaheroToken#7\\\" // account is the zero address\\n    );\\n\\n    // if already excluded\\n    if (excludedAccounts[account].exists) {\\n      require(\\n        excludedAccounts[account].excludeSenderFromFee !=\\n          excludeSenderFromFee ||\\n          excludedAccounts[account].excludeRecipientFromFee !=\\n          excludeRecipientFromFee,\\n        \\\"MetaheroToken#8\\\" // does not update exclude account\\n      );\\n\\n      excludedAccounts[account].excludeSenderFromFee = excludeSenderFromFee;\\n      excludedAccounts[account]\\n        .excludeRecipientFromFee = excludeRecipientFromFee;\\n    } else {\\n      require(\\n        accountBalances[account] == 0,\\n        \\\"MetaheroToken#9\\\" // can not exclude holder account\\n      );\\n\\n      excludedAccounts[account].exists = true;\\n      excludedAccounts[account].excludeSenderFromFee = excludeSenderFromFee;\\n      excludedAccounts[account]\\n        .excludeRecipientFromFee = excludeRecipientFromFee;\\n    }\\n\\n    emit AccountExcluded(\\n      account,\\n      excludeSenderFromFee,\\n      excludeRecipientFromFee\\n    );\\n  }\\n\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  ) private {\\n    require(\\n      spender != address(0),\\n      \\\"MetaheroToken#11\\\" // spender is the zero address\\n    );\\n\\n    accountAllowances[owner][spender] = amount;\\n\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  function _mint(address recipient, uint256 amount) private {\\n    require(\\n      recipient != address(0),\\n      \\\"MetaheroToken#12\\\" // recipient is the zero address\\n    );\\n\\n    require(\\n      amount != 0,\\n      \\\"MetaheroToken#13\\\" // amount is zero\\n    );\\n\\n    summary.totalSupply = summary.totalSupply.add(amount);\\n\\n    // if exclude account\\n    if (excludedAccounts[recipient].exists) {\\n      summary.totalExcluded = summary.totalExcluded.add(amount);\\n\\n      accountBalances[recipient] = accountBalances[recipient].add(amount);\\n    } else {\\n      _updateHoldingBalance(\\n        recipient,\\n        accountBalances[recipient].add(amount),\\n        summary.totalHolding.add(amount)\\n      );\\n    }\\n\\n    _emitTransfer(address(0), recipient, amount);\\n  }\\n\\n  function _burn(address sender, uint256 amount) private {\\n    require(\\n      sender != address(0),\\n      \\\"MetaheroToken#14\\\" // sender is the zero address\\n    );\\n\\n    require(\\n      amount != 0,\\n      \\\"MetaheroToken#15\\\" // amount is zero\\n    );\\n\\n    require(\\n      accountBalances[sender] >= amount,\\n      \\\"MetaheroToken#16\\\" // amount exceeds sender balance\\n    );\\n\\n    uint256 totalSupply_ = summary.totalSupply.sub(amount);\\n\\n    if (settings.minTotalSupply != 0) {\\n      require(\\n        totalSupply_ >= settings.minTotalSupply,\\n        \\\"MetaheroToken#17\\\" // new total supply exceeds min total supply\\n      );\\n    }\\n\\n    summary.totalSupply = totalSupply_;\\n\\n    // if exclude account\\n    if (excludedAccounts[sender].exists) {\\n      summary.totalExcluded = summary.totalExcluded.sub(amount);\\n\\n      accountBalances[sender] = accountBalances[sender].sub(amount);\\n    } else {\\n      _updateHoldingBalance(\\n        sender,\\n        accountBalances[sender].sub(amount),\\n        summary.totalHolding.sub(amount)\\n      );\\n    }\\n\\n    _emitTransfer(sender, address(0), amount);\\n  }\\n\\n  function _transfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) private {\\n    require(\\n      sender != address(0),\\n      \\\"MetaheroToken#18\\\" // sender is the zero address\\n    );\\n\\n    require(\\n      recipient != address(0),\\n      \\\"MetaheroToken#19\\\" // recipient is the zero address\\n    );\\n\\n    if (sender == recipient) {\\n      // special transfer type\\n      _syncLP(); // sync only LP\\n\\n      _emitTransfer(sender, recipient, 0);\\n    } else {\\n      require(\\n        excludedAccounts[sender].exists || presaleFinished,\\n        \\\"MetaheroToken#20\\\" // presale not finished yet\\n      );\\n\\n      require(\\n        amount != 0,\\n        \\\"MetaheroToken#21\\\" // amount is zero\\n      );\\n\\n      if (\\n        !excludedAccounts[sender].exists && !excludedAccounts[recipient].exists\\n      ) {\\n        _transferBetweenHolderAccounts(sender, recipient, amount);\\n      } else if (\\n        excludedAccounts[sender].exists && !excludedAccounts[recipient].exists\\n      ) {\\n        _transferFromExcludedAccount(sender, recipient, amount);\\n      } else if (\\n        !excludedAccounts[sender].exists && excludedAccounts[recipient].exists\\n      ) {\\n        _transferToExcludedAccount(sender, recipient, amount);\\n      } else {\\n        _transferBetweenExcludedAccounts(sender, recipient, amount);\\n      }\\n    }\\n  }\\n\\n  function _transferBetweenHolderAccounts(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) private {\\n    uint256 senderAmount;\\n    uint256 senderBurnFee;\\n    uint256 senderLpFee;\\n\\n    uint256 recipientAmount;\\n    uint256 recipientBurnFee;\\n    uint256 recipientLpFee;\\n\\n    uint256 totalFee;\\n\\n    {\\n      uint256 totalSupply_ = summary.totalSupply;\\n\\n      // calc fees for sender and recipient\\n      {\\n        uint256 senderTotalFee;\\n        uint256 recipientTotalFee;\\n\\n        (senderTotalFee, senderBurnFee, senderLpFee) = _calcTransferSenderFees(\\n          amount\\n        );\\n\\n        (\\n          totalSupply_,\\n          senderTotalFee,\\n          senderBurnFee\\n        ) = _matchTotalSupplyWithFees(\\n          totalSupply_,\\n          senderTotalFee,\\n          senderBurnFee\\n        );\\n\\n        (\\n          recipientTotalFee,\\n          recipientBurnFee,\\n          recipientLpFee\\n        ) = _calcTransferRecipientFees(amount);\\n\\n        (\\n          totalSupply_,\\n          recipientTotalFee,\\n          recipientBurnFee\\n        ) = _matchTotalSupplyWithFees(\\n          totalSupply_,\\n          recipientTotalFee,\\n          recipientBurnFee\\n        );\\n\\n        totalFee = senderTotalFee.add(recipientTotalFee);\\n        senderAmount = amount.add(senderTotalFee);\\n        recipientAmount = amount.sub(recipientTotalFee);\\n      }\\n\\n      // appends total rewards\\n      if (summary.totalRewards != 0) {\\n        uint256 totalHoldingWithRewards = summary.totalHolding.add(\\n          summary.totalRewards\\n        );\\n\\n        senderAmount = senderAmount.mul(summary.totalHolding).div(\\n          totalHoldingWithRewards\\n        );\\n        recipientAmount = recipientAmount.mul(summary.totalHolding).div(\\n          totalHoldingWithRewards\\n        );\\n        totalFee = totalFee.mul(summary.totalHolding).div(\\n          totalHoldingWithRewards\\n        );\\n      }\\n\\n      require(\\n        accountBalances[sender] >= senderAmount,\\n        \\\"MetaheroToken#22\\\" // amount exceeds sender balance\\n      );\\n\\n      summary.totalSupply = totalSupply_;\\n\\n      // reduce local vars\\n      senderAmount = accountBalances[sender].sub(senderAmount);\\n      recipientAmount = accountBalances[recipient].add(recipientAmount);\\n\\n      _updateHoldingBalances(\\n        sender,\\n        senderAmount,\\n        recipient,\\n        recipientAmount,\\n        summary.totalHolding.sub(totalFee)\\n      );\\n\\n      _increaseTotalLP(senderLpFee.add(recipientLpFee));\\n    }\\n\\n    // emits events\\n\\n    {\\n      _emitTransfer(sender, recipient, amount);\\n\\n      _emitTransfer(sender, address(0), senderBurnFee);\\n\\n      _emitTransfer(sender, address(lpm), senderLpFee);\\n\\n      _emitTransfer(recipient, address(0), recipientBurnFee);\\n\\n      _emitTransfer(recipient, address(lpm), recipientLpFee);\\n\\n      _updateTotalRewards();\\n\\n      _syncLP();\\n    }\\n  }\\n\\n  function _transferFromExcludedAccount(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) private {\\n    require(\\n      accountBalances[sender] >= amount,\\n      \\\"MetaheroToken#23\\\" // amount exceeds sender balance\\n    );\\n\\n    (bool shouldSyncLPBefore, bool shouldSyncLPAfter) = _canSyncLP(\\n      sender,\\n      address(0)\\n    );\\n\\n    if (shouldSyncLPBefore) {\\n      lpm.syncLP();\\n    }\\n\\n    uint256 recipientTotalFee;\\n    uint256 recipientBurnFee;\\n    uint256 recipientLPFee;\\n\\n    uint256 totalSupply_ = summary.totalSupply;\\n\\n    // when sender does not remove the fee from the recipient\\n    if (!excludedAccounts[sender].excludeRecipientFromFee) {\\n      (\\n        recipientTotalFee,\\n        recipientBurnFee,\\n        recipientLPFee\\n      ) = _calcTransferRecipientFees(amount);\\n\\n      (\\n        totalSupply_,\\n        recipientTotalFee,\\n        recipientBurnFee\\n      ) = _matchTotalSupplyWithFees(\\n        totalSupply_,\\n        recipientTotalFee,\\n        recipientBurnFee\\n      );\\n    }\\n\\n    uint256 recipientAmount = amount.sub(recipientTotalFee);\\n\\n    summary.totalSupply = totalSupply_;\\n    summary.totalExcluded = summary.totalExcluded.sub(amount);\\n\\n    accountBalances[sender] = accountBalances[sender].sub(amount);\\n\\n    _updateHoldingBalance(\\n      recipient,\\n      accountBalances[recipient].add(recipientAmount),\\n      summary.totalHolding.add(recipientAmount)\\n    );\\n\\n    _increaseTotalLP(recipientLPFee);\\n\\n    // emits events\\n\\n    _emitTransfer(sender, recipient, amount);\\n\\n    _emitTransfer(recipient, address(0), recipientBurnFee);\\n\\n    _emitTransfer(recipient, address(lpm), recipientLPFee);\\n\\n    _updateTotalRewards();\\n\\n    if (shouldSyncLPAfter) {\\n      lpm.syncLP();\\n    }\\n  }\\n\\n  function _transferToExcludedAccount(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) private {\\n    (bool shouldSyncLPBefore, bool shouldSyncLPAfter) = _canSyncLP(\\n      address(0),\\n      recipient\\n    );\\n\\n    if (shouldSyncLPBefore) {\\n      lpm.syncLP();\\n    }\\n\\n    uint256 senderTotalFee;\\n    uint256 senderBurnFee;\\n    uint256 senderLpFee;\\n\\n    uint256 totalSupply_ = summary.totalSupply;\\n\\n    // when recipient does not remove the fee from the sender\\n    if (!excludedAccounts[recipient].excludeSenderFromFee) {\\n      (senderTotalFee, senderBurnFee, senderLpFee) = _calcTransferSenderFees(\\n        amount\\n      );\\n\\n      (totalSupply_, senderTotalFee, senderBurnFee) = _matchTotalSupplyWithFees(\\n        totalSupply_,\\n        senderTotalFee,\\n        senderBurnFee\\n      );\\n    }\\n\\n    uint256 senderAmount = amount.add(senderTotalFee);\\n\\n    // append total rewards\\n    if (summary.totalRewards != 0) {\\n      uint256 totalHoldingWithRewards = summary.totalHolding.add(\\n        summary.totalRewards\\n      );\\n\\n      senderAmount = senderAmount.mul(summary.totalHolding).div(\\n        totalHoldingWithRewards\\n      );\\n    }\\n\\n    require(\\n      accountBalances[sender] >= senderAmount,\\n      \\\"MetaheroToken#24\\\" // amount exceeds sender balance\\n    );\\n\\n    summary.totalSupply = totalSupply_;\\n    summary.totalExcluded = summary.totalExcluded.add(amount);\\n\\n    accountBalances[recipient] = accountBalances[recipient].add(amount);\\n\\n    _updateHoldingBalance(\\n      sender,\\n      accountBalances[sender].sub(senderAmount),\\n      summary.totalHolding.sub(senderAmount)\\n    );\\n\\n    _increaseTotalLP(senderLpFee);\\n\\n    // emits events\\n\\n    _emitTransfer(sender, recipient, amount);\\n\\n    _emitTransfer(sender, address(0), senderBurnFee);\\n\\n    _emitTransfer(sender, address(lpm), senderLpFee);\\n\\n    _updateTotalRewards();\\n\\n    if (shouldSyncLPAfter) {\\n      lpm.syncLP();\\n    }\\n  }\\n\\n  function _transferBetweenExcludedAccounts(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) private {\\n    require(\\n      accountBalances[sender] >= amount,\\n      \\\"MetaheroToken#25\\\" // amount exceeds sender balance\\n    );\\n\\n    (bool shouldSyncLPBefore, bool shouldSyncLPAfter) = _canSyncLP(\\n      address(0),\\n      recipient\\n    );\\n\\n    if (shouldSyncLPBefore) {\\n      lpm.syncLP();\\n    }\\n\\n    accountBalances[sender] = accountBalances[sender].sub(amount);\\n    accountBalances[recipient] = accountBalances[recipient].add(amount);\\n\\n    _emitTransfer(sender, recipient, amount);\\n\\n    if (shouldSyncLPAfter) {\\n      lpm.syncLP();\\n    }\\n  }\\n\\n  function _updateHoldingBalance(\\n    address holder,\\n    uint256 holderBalance,\\n    uint256 totalHolding\\n  ) private {\\n    accountBalances[holder] = holderBalance;\\n    summary.totalHolding = totalHolding;\\n\\n    if (address(dao) != address(0)) {\\n      // if dao is not the zero address\\n      dao.syncMember(holder, holderBalance, totalHolding);\\n    }\\n  }\\n\\n  function _updateHoldingBalances(\\n    address holderA,\\n    uint256 holderABalance,\\n    address holderB,\\n    uint256 holderBBalance,\\n    uint256 totalHolding\\n  ) private {\\n    accountBalances[holderA] = holderABalance;\\n    accountBalances[holderB] = holderBBalance;\\n    summary.totalHolding = totalHolding;\\n\\n    if (address(dao) != address(0)) {\\n      // if dao is not the zero address\\n      dao.syncMembers(\\n        holderA,\\n        holderABalance,\\n        holderB,\\n        holderBBalance,\\n        totalHolding\\n      );\\n    }\\n  }\\n\\n  function _emitTransfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) private {\\n    if (amount != 0) {\\n      // when amount is not zero\\n      emit Transfer(sender, recipient, amount);\\n    }\\n  }\\n\\n  function _increaseTotalLP(uint256 amount) private {\\n    if (amount != 0) {\\n      // when amount is not zero\\n      accountBalances[address(lpm)] = accountBalances[address(lpm)].add(amount);\\n\\n      summary.totalExcluded = summary.totalExcluded.add(amount);\\n    }\\n  }\\n\\n  function _syncLP() private {\\n    if (address(lpm) != address(0)) {\\n      // if lpm is not the zero address\\n      lpm.syncLP();\\n    }\\n  }\\n\\n  function _updateTotalRewards() private {\\n    // totalRewards = totalSupply - totalExcluded - totalHolding\\n    uint256 totalRewards = summary.totalSupply.sub(summary.totalExcluded).sub(\\n      summary.totalHolding\\n    );\\n\\n    if (totalRewards != summary.totalRewards) {\\n      summary.totalRewards = totalRewards;\\n\\n      emit TotalRewardsUpdated(totalRewards);\\n    }\\n  }\\n\\n  // private functions (views)\\n\\n  function _matchTotalSupplyWithFees(\\n    uint256 totalSupply_,\\n    uint256 totalFee,\\n    uint256 burnFee\\n  )\\n    private\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    if (burnFee != 0) {\\n      uint256 newTotalSupply = totalSupply_.sub(burnFee);\\n\\n      if (newTotalSupply >= settings.minTotalSupply) {\\n        totalSupply_ = newTotalSupply;\\n      } else {\\n        // turn of burn fee\\n        totalFee = totalFee.sub(burnFee);\\n        burnFee = 0;\\n      }\\n    }\\n\\n    return (totalSupply_, totalFee, burnFee);\\n  }\\n\\n  function _canSyncLP(address sender, address recipient)\\n    private\\n    view\\n    returns (bool shouldSyncLPBefore, bool shouldSyncLPAfter)\\n  {\\n    if (address(lpm) != address(0)) {\\n      // if lpm is not the zero address\\n      (shouldSyncLPBefore, shouldSyncLPAfter) = lpm.canSyncLP(\\n        sender,\\n        recipient\\n      );\\n    }\\n\\n    return (shouldSyncLPBefore, shouldSyncLPAfter);\\n  }\\n\\n  function _calcRewards(address account) private view returns (uint256 result) {\\n    if (\\n      !excludedAccounts[account].exists && summary.totalRewards != 0 // only for holders\\n    ) {\\n      result = summary.totalRewards.mul(accountBalances[account]).div(\\n        summary.totalHolding\\n      );\\n    }\\n\\n    return result;\\n  }\\n\\n  function _calcTransferSenderFees(uint256 amount)\\n    private\\n    view\\n    returns (\\n      uint256 totalFee,\\n      uint256 burnFee,\\n      uint256 lpFee\\n    )\\n  {\\n    uint256 rewardsFee = amount.percent(settings.rewardsFees.sender);\\n\\n    lpFee = amount.percent(settings.lpFees.sender);\\n    burnFee = amount.percent(settings.burnFees.sender);\\n\\n    totalFee = lpFee.add(rewardsFee).add(burnFee);\\n\\n    return (totalFee, burnFee, lpFee);\\n  }\\n\\n  function _calcTransferRecipientFees(uint256 amount)\\n    private\\n    view\\n    returns (\\n      uint256 totalFee,\\n      uint256 burnFee,\\n      uint256 lpFee\\n    )\\n  {\\n    uint256 rewardsFee = amount.percent(settings.rewardsFees.recipient);\\n\\n    lpFee = amount.percent(settings.lpFees.recipient);\\n    burnFee = amount.percent(settings.burnFees.recipient);\\n\\n    totalFee = lpFee.add(rewardsFee).add(burnFee);\\n\\n    return (totalFee, burnFee, lpFee);\\n  }\\n\\n  // private functions (pure)\\n\\n  function _verifyFees(\\n    Fees memory burnFees,\\n    Fees memory lpFees,\\n    Fees memory rewardsFees\\n  ) private pure {\\n    uint256 totalFee = burnFees\\n      .sender\\n      .add(burnFees.recipient)\\n      .add(lpFees.sender.add(lpFees.recipient))\\n      .add(rewardsFees.sender.add(rewardsFees.recipient));\\n\\n    require(\\n      totalFee <= MAX_FEE,\\n      \\\"MetaheroToken#26\\\" // the total fee is too high\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x0699107c5a5fc52482b8a74f5cf243bacabf4cc15d790bc6cfd9ee2d637858f7\",\"license\":\"MIT\"},\"src/core/access/Controlled.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Controlled\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@metahero.io>\\n */\\ncontract Controlled {\\n  /**\\n   * @return controller address\\n   */\\n  address public controller;\\n\\n  // modifiers\\n\\n  /**\\n   * @dev Throws if msg.sender is not the controller\\n   */\\n  modifier onlyController() {\\n    require(\\n      msg.sender == controller,\\n      \\\"Controlled#1\\\" // msg.sender is not the controller\\n    );\\n\\n    _;\\n  }\\n\\n  // events\\n\\n  /**\\n   * @dev Emitted when the controller is updated\\n   * @param controller new controller address\\n   */\\n  event ControllerUpdated(address controller);\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor() internal {\\n    //\\n  }\\n\\n  // internal functions\\n\\n  function _initializeController(address controller_) internal {\\n    controller = controller_;\\n  }\\n\\n  function _setController(address controller_) internal {\\n    require(\\n      controller_ != address(0),\\n      \\\"Controlled#2\\\" // controller is the zero address\\n    );\\n\\n    require(\\n      controller_ != controller,\\n      \\\"Controlled#3\\\" // does not update the controller\\n    );\\n\\n    controller = controller_;\\n\\n    emit ControllerUpdated(controller_);\\n  }\\n\\n  function _removeController() internal {\\n    require(\\n      controller != address(0),\\n      \\\"Controlled#4\\\" // controller is the zero address\\n    );\\n\\n    controller = address(0);\\n\\n    emit ControllerUpdated(address(0));\\n  }\\n}\\n\",\"keccak256\":\"0xc5183732675c6aa816bb8f45487cbedb0460a45df6d2fea2cfc49560ecf63349\",\"license\":\"MIT\"},\"src/core/access/Lockable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Lockable\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@metahero.io>\\n */\\ncontract Lockable {\\n  /**\\n   * @return true when contract is locked\\n   */\\n  bool public locked;\\n\\n  // modifiers\\n\\n  /**\\n   * @dev Calls only when contract is unlocked\\n   */\\n  modifier lock() {\\n    if (!locked) {\\n      locked = true;\\n\\n      _;\\n\\n      locked = false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Throws if contract is locked\\n   */\\n  modifier lockOrThrowError() {\\n    require(\\n      !locked,\\n      \\\"Lockable#1\\\" // contract is locked\\n    );\\n\\n    locked = true;\\n\\n    _;\\n\\n    locked = false;\\n  }\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor() internal {\\n    //\\n  }\\n}\\n\",\"keccak256\":\"0x76996d239b52ad430b38d50d803744549f1a575e4caf71c7c643698e7828fa72\",\"license\":\"MIT\"},\"src/core/access/Owned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Owned\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@metahero.io>\\n */\\ncontract Owned {\\n  /**\\n   * @return owner address\\n   */\\n  address public owner;\\n\\n  // modifiers\\n\\n  /**\\n   * @dev Throws if msg.sender is not the owner\\n   */\\n  modifier onlyOwner() {\\n    require(\\n      msg.sender == owner,\\n      \\\"Owned#1\\\" // msg.sender is not the owner\\n    );\\n\\n    _;\\n  }\\n\\n  // events\\n\\n  /**\\n   * @dev Emitted when the owner is updated\\n   * @param owner new owner address\\n   */\\n  event OwnerUpdated(address owner);\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor() internal {\\n    owner = msg.sender;\\n  }\\n\\n  // external functions\\n\\n  /**\\n   * @notice Sets a new owner\\n   * @param owner_ owner address\\n   */\\n  function setOwner(address owner_) external onlyOwner {\\n    _setOwner(owner_);\\n  }\\n\\n  // internal functions\\n\\n  function _setOwner(address owner_) internal {\\n    require(\\n      owner_ != address(0),\\n      \\\"Owned#2\\\" // owner is the zero address\\n    );\\n\\n    require(\\n      owner_ != owner,\\n      \\\"Owned#3\\\" // does not update the owner\\n    );\\n\\n    owner = owner_;\\n\\n    emit OwnerUpdated(owner_);\\n  }\\n}\\n\",\"keccak256\":\"0x592c2e0b1ec5a7db86cd4e2a6911587c52a00f62dd002e664000f2f143992de3\",\"license\":\"MIT\"},\"src/core/erc20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @title ERC20 abstract token\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@metahero.io>\\n */\\nabstract contract ERC20 is IERC20 {\\n  string public override name;\\n  string public override symbol;\\n  uint8 public override decimals;\\n\\n  /**\\n   * @dev Internal constructor\\n   * @param name_ name\\n   * @param symbol_ symbol\\n   * @param decimals_ decimals amount\\n   */\\n  constructor(\\n    string memory name_,\\n    string memory symbol_,\\n    uint8 decimals_\\n  ) internal {\\n    name = name_;\\n    symbol = symbol_;\\n    decimals = decimals_;\\n  }\\n}\\n\",\"keccak256\":\"0xd6cf6cc6af7aac80aba338b2a7909399049671e33d681776f294fa0702bfd75e\",\"license\":\"MIT\"},\"src/core/erc20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title ERC20 token interface\\n *\\n * @notice See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\\n */\\ninterface IERC20 {\\n  // events\\n\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  // external functions\\n\\n  function approve(address spender, uint256 value) external returns (bool);\\n\\n  function transfer(address to, uint256 value) external returns (bool);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool);\\n\\n  // external functions (views)\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function balanceOf(address owner) external view returns (uint256);\\n\\n  function allowance(address owner, address spender)\\n    external\\n    view\\n    returns (uint256);\\n\\n  // external functions (pure)\\n\\n  function name() external pure returns (string memory);\\n\\n  function symbol() external pure returns (string memory);\\n\\n  function decimals() external pure returns (uint8);\\n}\\n\",\"keccak256\":\"0xaf7f629fe587ba189c20e5a9611047a4514366841c499665df6fe8dd7e0eadb0\",\"license\":\"MIT\"},\"src/core/lifecycle/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Initializable\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@metahero.io>\\n */\\ncontract Initializable {\\n  address private initializer;\\n\\n  // modifiers\\n\\n  /**\\n   * @dev Throws if msg.sender is not the initializer\\n   */\\n  modifier onlyInitializer() {\\n    require(\\n      initializer != address(0),\\n      \\\"Initializable#1\\\" // already initialized\\n    );\\n\\n    require(\\n      msg.sender == initializer,\\n      \\\"Initializable#2\\\" // msg.sender is not the initializer\\n    );\\n\\n    /// @dev removes initializer\\n    initializer = address(0);\\n\\n    _;\\n  }\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor() internal {\\n    initializer = msg.sender;\\n  }\\n\\n  // external functions (views)\\n\\n  /**\\n   * @notice Checks if contract is initialized\\n   * @return true when contract is initialized\\n   */\\n  function initialized() external view returns (bool) {\\n    return initializer == address(0);\\n  }\\n}\\n\",\"keccak256\":\"0x0a27c7431a77eb28b77c7a45bb1aa2cbcf53b992faada96cbb0c4bb205490f78\",\"license\":\"MIT\"},\"src/core/math/MathLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"./SafeMathLib.sol\\\";\\n\\n/**\\n * @title Math library\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@metahero.io>\\n */\\nlibrary MathLib {\\n  using SafeMathLib for uint256;\\n\\n  // internal functions (pure)\\n\\n  /**\\n   * @notice Calcs a x p / 100\\n   */\\n  function percent(uint256 a, uint256 p)\\n    internal\\n    pure\\n    returns (uint256 result)\\n  {\\n    if (a != 0 && p != 0) {\\n      result = a.mul(p).div(100);\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x1751a1a312b5440bf1d1d0a50b858727e4cc986a2a68a702e6a44ee8be0ce4b8\",\"license\":\"MIT\"},\"src/core/math/SafeMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Safe math library\\n *\\n * @notice Based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/5fe8f4e93bd1d4f5cc9a6899d7f24f5ffe4c14aa/contracts/math/SafeMath.sol\\n */\\nlibrary SafeMathLib {\\n  // internal functions (pure)\\n\\n  /**\\n   * @notice Calcs a + b\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n\\n    require(c >= a, \\\"SafeMathLib#1\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @notice Calcs a - b\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b <= a, \\\"SafeMathLib#2\\\");\\n\\n    return a - b;\\n  }\\n\\n  /**\\n   * @notice Calcs a x b\\n   */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 result) {\\n    if (a != 0 && b != 0) {\\n      result = a * b;\\n\\n      require(result / a == b, \\\"SafeMathLib#3\\\");\\n    }\\n\\n    return result;\\n  }\\n\\n  /**\\n   * @notice Calcs a / b\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, \\\"SafeMathLib#4\\\");\\n\\n    return a / b;\\n  }\\n}\\n\",\"keccak256\":\"0xe108a693517d9a4191117264a13816e5a137c57a7692aceb3756ed0929752b39\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101375760003560e01c8063832a1070116100b8578063c7f758a81161007c578063c7f758a814610328578063d6df5f3f14610361578063e06174e41461037d578063e63bc62d1461039c578063eb990c59146103b8578063fc0c546a146103d457610137565b8063832a1070146102605780638fea394f1461029057806399653fbe146102c05780639bf719cc146102dc578063a333ce581461030c57610137565b80635439ad86116100ff5780635439ad86146101ce578063570ca735146101ec5780636b7c4fba1461020a578063715885d81461023a57806382f3b45e1461025657610137565b8063044a0ca81461013c5780630b947b8d1461016c5780630dc25ea114610176578063158ef93e146101945780631ecba154146101b2575b600080fd5b61015660048036038101906101519190612a21565b6103f2565b6040516101639190613aa2565b60405180910390f35b61017461045d565b005b61017e6106f8565b60405161018b91906138d5565b60405180910390f35b61019c610710565b6040516101a99190613548565b60405180910390f35b6101cc60048036038101906101c79190612b23565b610766565b005b6101d6610a4f565b6040516101e391906138d5565b60405180910390f35b6101f4610a5f565b60405161020191906134a3565b60405180910390f35b610224600480360381019061021f9190612c06565b610a85565b60405161023191906138d5565b60405180910390f35b610254600480360381019061024f9190612ad4565b610a97565b005b61025e610b4f565b005b61027a6004803603810190610275919061291d565b610cb4565b60405161028791906138d5565b60405180910390f35b6102aa60048036038101906102a59190612c06565b610ccf565b6040516102b791906138d5565b60405180910390f35b6102da60048036038101906102d59190612ce1565b610ce1565b005b6102f660048036038101906102f19190612a21565b611199565b60405161030391906138d5565b60405180910390f35b610326600480360381019061032191906129d2565b6111ad565b005b610342600480360381019061033d9190612c06565b6112d3565b6040516103589a99989796959493929190613927565b60405180910390f35b61037b60048036038101906103769190612a5d565b61148f565b005b610385611554565b6040516103939291906139ca565b60405180910390f35b6103b660048036038101906103b19190612c06565b611566565b005b6103d260048036038101906103cd919061296f565b6118f2565b005b6103dc611d05565b6040516103e99190613563565b60405180910390f35b600060056000838152602001908152602001600020600a0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e4906135be565b60405180910390fd5b6104f56126e3565b6104fd6126e3565b6105056126e3565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e06174e46040518163ffffffff1660e01b815260040160e06040518083038186803b15801561056d57600080fd5b505afa158015610581573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a59190612ba3565b50925092509250600082600001511415806105c557506000826020015114155b610604576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105fb9061369e565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663341c5631604051806040016040528061066886600001518860000151611d2b90919063ffffffff16565b815260200161068886602001518860200151611d2b90919063ffffffff16565b8152506040518060400160405280600081526020016000815250846040518463ffffffff1660e01b81526004016106c19392919061389e565b600060405180830381600087803b1580156106db57600080fd5b505af11580156106ef573d6000803e3d6000fd5b50505050505050565b600061070b61070642611d80565b611dda565b905090565b60008073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ed906135be565b60405180910390fd5b828211610838576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082f9061363e565b60405180910390fd5b6003600001546108518484611f0f90919063ffffffff16565b1015610892576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108899061385e565b60405180910390fd5b6009600081548092919060010191905055506000600954905060006108b642611d80565b905060006108cd4287611d2b90919063ffffffff16565b905060006108e44287611d2b90919063ffffffff16565b9050600080861461095157604b861115610933576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092a906135de565b60405180910390fd5b61094e8661094086611dda565b611f5f90919063ffffffff16565b90505b83600560008781526020019081526020016000206000018190555089896005600088815260200190815260200160002060010191906109919291906126fd565b508260056000878152602001908152602001600020600201819055508160056000878152602001908152602001600020600301819055508560056000878152602001908152602001600020600501819055508060056000878152602001908152602001600020600601819055507f59afb3c1ebefcfdba6f5c42d4b4d39c54e042f3a845a583a0117adde2e305a8c85858c8c87878c88604051610a3b9897969594939291906139f3565b60405180910390a150505050505050505050565b6000610a5a42611d80565b905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610a9082611d80565b9050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1e906137fe565b60405180910390fd5b6000610b3242611d80565b9050610b3f848483611fa6565b610b498282612273565b50505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610bdf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd6906135be565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663341c56316040518060400160405280600081526020016000815250604051806040016040528060008152602001600081525060405180604001604052806000815260200160008152506040518463ffffffff1660e01b8152600401610c809392919061389e565b600060405180830381600087803b158015610c9a57600080fd5b505af1158015610cae573d6000803e3d6000fd5b50505050565b6000610cc882610cc342611d80565b612394565b9050919050565b6000610cda82611dda565b9050919050565b610ce961277d565b600560008481526020019081526020016000206040518061014001604052908160008201548152602001600182018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610dab5780601f10610d8057610100808354040283529160200191610dab565b820191906000526020600020905b815481529060010190602001808311610d8e57829003601f168201915b5050505050815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff16151515158152602001600582015481526020016006820154815260200160078201548152602001600882015481526020016009820154815250509050600081600001511415610e5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e56906137de565b60405180910390fd5b4281604001511115610ea6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9d9061379e565b60405180910390fd5b42816060015111610eec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee39061383e565b60405180910390fd5b60018260ff161480610f01575060028260ff16145b610f40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f37906136be565b60405180910390fd5b600060056000858152602001908152602001600020600a0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff1614610fe6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fdd9061371e565b60405180910390fd5b6000610ff6338360000151612394565b9050600081141561103c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110339061359e565b60405180910390fd5b60018360ff16141561107a5761105f818360e00151611d2b90919063ffffffff16565b60056000868152602001908152602001600020600701819055505b60028360ff1614156110b95761109e81836101000151611d2b90919063ffffffff16565b60056000868152602001908152602001600020600801819055505b6110d26001836101200151611d2b90919063ffffffff16565b60056000868152602001908152602001600020600901819055508260056000868152602001908152602001600020600a0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff1602179055507f4dad34f5c0bfc89aa43660836c7a6aa46a7a6a5d437c6b9db430ac5d82c69b0784338560405161118b939291906138f0565b60405180910390a150505050565b60006111a58383612394565b905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461123d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611234906135be565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632197fb258484846040518463ffffffff1660e01b815260040161129c93929190613511565b600060405180830381600087803b1580156112b657600080fd5b505af11580156112ca573d6000803e3d6000fd5b50505050505050565b60006060600080600080600080600080600560008c8152602001908152602001600020600001549950600560008c81526020019081526020016000206001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113a65780601f1061137b576101008083540402835291602001916113a6565b820191906000526020600020905b81548152906001019060200180831161138957829003601f168201915b50505050509850600560008c8152602001908152602001600020600201549750600560008c8152602001908152602001600020600301549650600560008c815260200190815260200160002060040160009054906101000a900460ff169550600560008c8152602001908152602001600020600501549450600560008c8152602001908152602001600020600601549350600560008c8152602001908152602001600020600701549250600560008c8152602001908152602001600020600801549150600560008c81526020019081526020016000206009015490509193959799509193959799565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461151f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611516906137fe565b60405180910390fd5b600061152a42611d80565b9050611537868683611fa6565b611542848483611fa6565b61154c8282612273565b505050505050565b60038060000154908060010154905082565b61156e61277d565b600560008381526020019081526020016000206040518061014001604052908160008201548152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116305780601f1061160557610100808354040283529160200191611630565b820191906000526020600020905b81548152906001019060200180831161161357829003601f168201915b5050505050815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff161515151581526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152505090506000816000015114156116e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116db906137be565b60405180910390fd5b428160600151111561172b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117229061367e565b60405180910390fd5b806080015115611770576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117679061357e565b60405180910390fd5b600081602001515111801561178d57508061010001518160e00151115b80156117a157508060c001518160e0015110155b1561187b576000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1682602001516040516117f3919061348c565b6000604051808303816000865af19150503d8060008114611830576040519150601f19603f3d011682016040523d82523d6000602084013e611835565b606091505b5050905080611879576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118709061381e565b60405180910390fd5b505b60016005600084815260200190815260200160002060040160006101000a81548160ff0219169083151502179055507fc16153d6180aeea6251b59a9e049605326a0a56d69691eb4da19535e6faef04e828260e001518361010001516040516118e693929190613a6b565b60405180910390a15050565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611982576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119799061377e565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611a10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a079061375e565b60405180910390fd5b60008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611ac1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ab89061373e565b60405180910390fd5b6000821415611b05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611afc906136de565b60405180910390fd5b6000811415611b49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b409061365e565b60405180910390fd5b83600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611c6257600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c2757600080fd5b505afa158015611c3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5f9190612946565b92505b82600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816003600001819055508060036001018190555042600a819055507f4a9c62e9f5b1bd7dfbc4dbff9e13a7178fe7a004d15c4e66c942416714f28edb84848484600a54604051611cf79594939291906134be565b60405180910390a150505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080828401905083811015611d76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d6d9061361e565b60405180910390fd5b8091505092915050565b600081600a541015611dd057611dcb6001611dbd600360010154611daf600a5487611f0f90919063ffffffff16565b61261d90919063ffffffff16565b611d2b90919063ffffffff16565b611dd3565b60005b9050919050565b600080600760010180549050905060008114611e5d576000600190505b818111611e5757600081830390508460076001018281548110611e1657fe5b906000526020600020015411611e495760076000018181548110611e3657fe5b9060005260206000200154935050611e57565b508080600101915050611df7565b50611f09565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b16a867c6040518163ffffffff1660e01b815260040160806040518083038186803b158015611ec757600080fd5b505afa158015611edb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eff9190612c7e565b5050915050809250505b50919050565b600082821115611f54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f4b906136fe565b60405180910390fd5b818303905092915050565b6000808314158015611f72575060008214155b15611fa057611f9d6064611f8f848661267490919063ffffffff16565b61261d90919063ffffffff16565b90505b92915050565b6000600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010180549050905060008114156120d057600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001839080600181540180825580915050600190039060005260206000200160009091909190915055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010182908060018154018082558091505060019003906000526020600020016000909190919091505561226d565b600060018203905082600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101828154811061212657fe5b906000526020600020015414156121985783600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001828154811061218557fe5b906000526020600020018190555061226b565b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001849080600181540180825580915050600190039060005260206000200160009091909190915055600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018390806001815401808255809150506001900390600052602060002001600090919091909150555b505b50505050565b6000600760010180549050905060008114156122e6576007600001839080600181540180825580915050600190039060005260206000200160009091909190915055600760010182908060018154018082558091505060019003906000526020600020016000909190919091505561238f565b600060018203905082600760010182815481106122ff57fe5b9060005260206000200154141561233457836007600001828154811061232157fe5b906000526020600020018190555061238d565b600760000184908060018154018082558091505060019003906000526020600020016000909190919091505560076001018390806001815401808255809150506001900390600052602060002001600090919091909150555b505b505050565b600061239e6127d2565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060400160405290816000820180548060200260200160405190810160405280929190818152602001828054801561243757602002820191906000526020600020905b815481526020019060010190808311612423575b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561248f57602002820191906000526020600020905b81548152602001906001019080831161247b575b50505050508152505090506000816020015151905060008114612553576000600190505b81811161254d576000818303905085846020015182815181106124d257fe5b60200260200101511161253f57600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001818154811061252c57fe5b906000526020600020015494505061254d565b5080806001019150506124b3565b50612615565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632d380315886040518263ffffffff1660e01b81526004016125b191906134a3565b60606040518083038186803b1580156125c957600080fd5b505afa1580156125dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126019190612c2f565b925092505060008114612612578194505b50505b505092915050565b600080821415612662576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612659906135fe565b60405180910390fd5b81838161266b57fe5b04905092915050565b6000808314158015612687575060008214155b156126dd5781830290508183828161269b57fe5b04146126dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126d39061387e565b60405180910390fd5b5b92915050565b604051806040016040528060008152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061273e57803560ff191683800117855561276c565b8280016001018555821561276c579182015b8281111561276b578235825591602001919060010190612750565b5b50905061277991906127ec565b5090565b6040518061014001604052806000815260200160608152602001600081526020016000815260200160001515815260200160008152602001600081526020016000815260200160008152602001600081525090565b604051806040016040528060608152602001606081525090565b5b808211156128055760008160009055506001016127ed565b5090565b60008135905061281881613c24565b92915050565b60008151905061282d81613c24565b92915050565b60008135905061284281613c3b565b92915050565b60008083601f84011261285a57600080fd5b8235905067ffffffffffffffff81111561287357600080fd5b60208301915083600182028301111561288b57600080fd5b9250929050565b6000604082840312156128a457600080fd5b6128ae6040613abd565b905060006128be848285016128f3565b60008301525060206128d2848285016128f3565b60208301525092915050565b6000813590506128ed81613c52565b92915050565b60008151905061290281613c52565b92915050565b60008135905061291781613c69565b92915050565b60006020828403121561292f57600080fd5b600061293d84828501612809565b91505092915050565b60006020828403121561295857600080fd5b60006129668482850161281e565b91505092915050565b6000806000806080858703121561298557600080fd5b600061299387828801612809565b94505060206129a487828801612809565b93505060406129b5878288016128de565b92505060606129c6878288016128de565b91505092959194509250565b6000806000606084860312156129e757600080fd5b60006129f586828701612809565b9350506020612a0686828701612833565b9250506040612a1786828701612833565b9150509250925092565b60008060408385031215612a3457600080fd5b6000612a4285828601612809565b9250506020612a53858286016128de565b9150509250929050565b600080600080600060a08688031215612a7557600080fd5b6000612a8388828901612809565b9550506020612a94888289016128de565b9450506040612aa588828901612809565b9350506060612ab6888289016128de565b9250506080612ac7888289016128de565b9150509295509295909350565b600080600060608486031215612ae957600080fd5b6000612af786828701612809565b9350506020612b08868287016128de565b9250506040612b19868287016128de565b9150509250925092565b600080600080600060808688031215612b3b57600080fd5b600086013567ffffffffffffffff811115612b5557600080fd5b612b6188828901612848565b95509550506020612b74888289016128de565b9350506040612b85888289016128de565b9250506060612b96888289016128de565b9150509295509295909350565b60008060008060e08587031215612bb957600080fd5b6000612bc787828801612892565b9450506040612bd887828801612892565b9350506080612be987828801612892565b92505060c0612bfa878288016128f3565b91505092959194509250565b600060208284031215612c1857600080fd5b6000612c26848285016128de565b91505092915050565b600080600060608486031215612c4457600080fd5b6000612c52868287016128f3565b9350506020612c63868287016128f3565b9250506040612c74868287016128f3565b9150509250925092565b60008060008060808587031215612c9457600080fd5b6000612ca2878288016128f3565b9450506020612cb3878288016128f3565b9350506040612cc4878288016128f3565b9250506060612cd5878288016128f3565b91505092959194509250565b60008060408385031215612cf457600080fd5b6000612d02858286016128de565b9250506020612d1385828601612908565b9150509250929050565b612d2681613b77565b82525050565b612d3581613b22565b82525050565b612d4481613b34565b82525050565b6000612d568385613af5565b9350612d63838584613bd1565b612d6c83613c13565b840190509392505050565b6000612d8282613aea565b612d8c8185613af5565b9350612d9c818560208601613be0565b612da581613c13565b840191505092915050565b6000612dbb82613aea565b612dc58185613b06565b9350612dd5818560208601613be0565b80840191505092915050565b612dea81613b89565b82525050565b6000612dfd600e83613b11565b91507f4d6574616865726f44414f2331320000000000000000000000000000000000006000830152602082019050919050565b6000612e3d600e83613b11565b91507f4d6574616865726f44414f2331390000000000000000000000000000000000006000830152602082019050919050565b6000612e7d600d83613b11565b91507f4d6574616865726f44414f2331000000000000000000000000000000000000006000830152602082019050919050565b6000612ebd600d83613b11565b91507f4d6574616865726f44414f2339000000000000000000000000000000000000006000830152602082019050919050565b6000612efd600d83613b11565b91507f536166654d6174684c69622334000000000000000000000000000000000000006000830152602082019050919050565b6000612f3d600d83613b11565b91507f536166654d6174684c69622331000000000000000000000000000000000000006000830152602082019050919050565b6000612f7d600d83613b11565b91507f4d6574616865726f44414f2337000000000000000000000000000000000000006000830152602082019050919050565b6000612fbd600d83613b11565b91507f4d6574616865726f44414f2335000000000000000000000000000000000000006000830152602082019050919050565b6000612ffd600e83613b11565b91507f4d6574616865726f44414f2331310000000000000000000000000000000000006000830152602082019050919050565b600061303d600d83613b11565b91507f4d6574616865726f44414f2336000000000000000000000000000000000000006000830152602082019050919050565b600061307d600e83613b11565b91507f4d6574616865726f44414f2331370000000000000000000000000000000000006000830152602082019050919050565b60006130bd600d83613b11565b91507f4d6574616865726f44414f2334000000000000000000000000000000000000006000830152602082019050919050565b60006130fd600d83613b11565b91507f536166654d6174684c69622332000000000000000000000000000000000000006000830152602082019050919050565b600061313d600e83613b11565b91507f4d6574616865726f44414f2331380000000000000000000000000000000000006000830152602082019050919050565b600061317d600d83613b11565b91507f4d6574616865726f44414f2333000000000000000000000000000000000000006000830152602082019050919050565b60006131bd600f83613b11565b91507f496e697469616c697a61626c65233200000000000000000000000000000000006000830152602082019050919050565b60006131fd600f83613b11565b91507f496e697469616c697a61626c65233100000000000000000000000000000000006000830152602082019050919050565b600061323d600e83613b11565b91507f4d6574616865726f44414f2331350000000000000000000000000000000000006000830152602082019050919050565b600061327d600e83613b11565b91507f4d6574616865726f44414f2331300000000000000000000000000000000000006000830152602082019050919050565b60006132bd600e83613b11565b91507f4d6574616865726f44414f2331340000000000000000000000000000000000006000830152602082019050919050565b60006132fd600d83613b11565b91507f4d6574616865726f44414f2332000000000000000000000000000000000000006000830152602082019050919050565b600061333d600e83613b11565b91507f4d6574616865726f44414f2331330000000000000000000000000000000000006000830152602082019050919050565b600061337d600e83613b11565b91507f4d6574616865726f44414f2331360000000000000000000000000000000000006000830152602082019050919050565b60006133bd600d83613b11565b91507f4d6574616865726f44414f2338000000000000000000000000000000000000006000830152602082019050919050565b60006133fd600d83613b11565b91507f536166654d6174684c69622333000000000000000000000000000000000000006000830152602082019050919050565b604082016000820151613446600085018261345f565b506020820151613459602085018261345f565b50505050565b61346881613b60565b82525050565b61347781613b60565b82525050565b61348681613b6a565b82525050565b60006134988284612db0565b915081905092915050565b60006020820190506134b86000830184612d2c565b92915050565b600060a0820190506134d36000830188612d2c565b6134e06020830187612d2c565b6134ed604083018661346e565b6134fa606083018561346e565b613507608083018461346e565b9695505050505050565b60006060820190506135266000830186612d2c565b6135336020830185612d3b565b6135406040830184612d3b565b949350505050565b600060208201905061355d6000830184612d3b565b92915050565b60006020820190506135786000830184612de1565b92915050565b6000602082019050818103600083015261359781612df0565b9050919050565b600060208201905081810360008301526135b781612e30565b9050919050565b600060208201905081810360008301526135d781612e70565b9050919050565b600060208201905081810360008301526135f781612eb0565b9050919050565b6000602082019050818103600083015261361781612ef0565b9050919050565b6000602082019050818103600083015261363781612f30565b9050919050565b6000602082019050818103600083015261365781612f70565b9050919050565b6000602082019050818103600083015261367781612fb0565b9050919050565b6000602082019050818103600083015261369781612ff0565b9050919050565b600060208201905081810360008301526136b781613030565b9050919050565b600060208201905081810360008301526136d781613070565b9050919050565b600060208201905081810360008301526136f7816130b0565b9050919050565b60006020820190508181036000830152613717816130f0565b9050919050565b6000602082019050818103600083015261373781613130565b9050919050565b6000602082019050818103600083015261375781613170565b9050919050565b60006020820190508181036000830152613777816131b0565b9050919050565b60006020820190508181036000830152613797816131f0565b9050919050565b600060208201905081810360008301526137b781613230565b9050919050565b600060208201905081810360008301526137d781613270565b9050919050565b600060208201905081810360008301526137f7816132b0565b9050919050565b60006020820190508181036000830152613817816132f0565b9050919050565b6000602082019050818103600083015261383781613330565b9050919050565b6000602082019050818103600083015261385781613370565b9050919050565b60006020820190508181036000830152613877816133b0565b9050919050565b60006020820190508181036000830152613897816133f0565b9050919050565b600060c0820190506138b36000830186613430565b6138c06040830185613430565b6138cd6080830184613430565b949350505050565b60006020820190506138ea600083018461346e565b92915050565b6000606082019050613905600083018661346e565b6139126020830185612d1d565b61391f604083018461347d565b949350505050565b60006101408201905061393d600083018d61346e565b818103602083015261394f818c612d77565b905061395e604083018b61346e565b61396b606083018a61346e565b6139786080830189612d3b565b61398560a083018861346e565b61399260c083018761346e565b61399f60e083018661346e565b6139ad61010083018561346e565b6139bb61012083018461346e565b9b9a5050505050505050505050565b60006040820190506139df600083018561346e565b6139ec602083018461346e565b9392505050565b600060e082019050613a08600083018b61346e565b613a15602083018a61346e565b8181036040830152613a2881888a612d4a565b9050613a37606083018761346e565b613a44608083018661346e565b613a5160a083018561346e565b613a5e60c083018461346e565b9998505050505050505050565b6000606082019050613a80600083018661346e565b613a8d602083018561346e565b613a9a604083018461346e565b949350505050565b6000602082019050613ab7600083018461347d565b92915050565b6000604051905081810181811067ffffffffffffffff82111715613ae057600080fd5b8060405250919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000613b2d82613b40565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000613b8282613bad565b9050919050565b6000613b9482613b9b565b9050919050565b6000613ba682613b40565b9050919050565b6000613bb882613bbf565b9050919050565b6000613bca82613b40565b9050919050565b82818337600083830152505050565b60005b83811015613bfe578082015181840152602081019050613be3565b83811115613c0d576000848401525b50505050565b6000601f19601f8301169050919050565b613c2d81613b22565b8114613c3857600080fd5b50565b613c4481613b34565b8114613c4f57600080fd5b50565b613c5b81613b60565b8114613c6657600080fd5b50565b613c7281613b6a565b8114613c7d57600080fd5b5056fea164736f6c634300060c000a",
  "devdoc": {
    "author": "Stanisław Głogowski <stan@metahero.io>",
    "events": {
      "Initialized(address,address,uint256,uint256,uint256)": {
        "details": "Emitted the contract is initialized",
        "params": {
          "minVotingPeriod": "min voting period",
          "operator": "operator address",
          "snapshotBaseTimestamp": "snapshot base timestamp",
          "snapshotWindow": "snapshot window",
          "token": "token address"
        }
      },
      "ProposalCreated(uint256,uint256,bytes,uint256,uint256,uint256,uint256)": {
        "details": "Emitted the proposal is created",
        "params": {
          "callData": "token call data",
          "endsAt": "ends at",
          "proposalId": "proposal id",
          "snapshotId": "snapshot id",
          "startsAt": "starts at",
          "votesMinPercentage": "votes min percentage",
          "votesMinWeight": "votes min weight"
        }
      },
      "ProposalProcessed(uint256,uint256,uint256)": {
        "details": "Emitted the proposal is processed",
        "params": {
          "proposalId": "proposal id",
          "votesNoWeight": "votes no weight",
          "votesYesWeight": "votes yes weight"
        }
      },
      "VoteSubmitted(uint256,address,uint8)": {
        "details": "Emitted the vote is submitted",
        "params": {
          "member": "member address",
          "proposalId": "proposal id",
          "vote": "where `1` eq yes and `2` eq no"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Public constructor"
      },
      "createProposal(bytes,uint256,uint256,uint256)": {
        "details": "Creates proposal",
        "params": {
          "callData": "token call data",
          "endsIn": "ends in",
          "startsIn": "starts in",
          "votesMinPercentage": "votes min percentage"
        }
      },
      "excludeTokenAccount(address,bool,bool)": {
        "details": "Excludes token account",
        "params": {
          "account": "account address",
          "excludeRecipientFromFee": "exclude recipient from fee",
          "excludeSenderFromFee": "exclude sender from fee"
        }
      },
      "initialize(address,address,uint256,uint256)": {
        "details": "Initializes the contract",
        "params": {
          "minVotingPeriod": "min voting period",
          "operator_": "custom operator address",
          "snapshotWindow": "snapshot window",
          "token_": "token address"
        }
      },
      "initialized()": {
        "returns": {
          "_0": "true when contract is initialized"
        }
      },
      "processProposal(uint256)": {
        "details": "Processes proposal",
        "params": {
          "proposalId": "proposal id"
        }
      },
      "removeAllTokenFees()": {
        "details": "Removes all token fees"
      },
      "removeTokenLPFees()": {
        "details": "Removes token lp fees"
      },
      "submitVote(uint256,uint8)": {
        "details": "Submits vote",
        "params": {
          "proposalId": "proposal id",
          "vote": "where `1` eq yes and `2` eq no"
        }
      },
      "syncMember(address,uint256,uint256)": {
        "params": {
          "member": "member address",
          "memberWeight": "member weight",
          "totalWeight": "all members weight"
        }
      },
      "syncMembers(address,uint256,address,uint256,uint256)": {
        "params": {
          "memberA": "member A address",
          "memberAWeight": "member A weight",
          "memberB": "member B address",
          "memberBWeight": "member B weight",
          "totalWeight": "all members weight"
        }
      }
    },
    "stateVariables": {
      "operator": {
        "return": "operator address"
      },
      "settings": {
        "return": "settings object"
      },
      "token": {
        "return": "token address"
      }
    },
    "title": "Metahero DAO",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initialized()": {
        "notice": "Checks if contract is initialized"
      },
      "syncMember(address,uint256,uint256)": {
        "notice": "Called by a token to sync a dao member"
      },
      "syncMembers(address,uint256,address,uint256,uint256)": {
        "notice": "Called by a token to sync a dao members"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5613,
        "contract": "src/MetaheroDAO.sol:MetaheroDAO",
        "label": "initializer",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 89,
        "contract": "src/MetaheroDAO.sol:MetaheroDAO",
        "label": "operator",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 92,
        "contract": "src/MetaheroDAO.sol:MetaheroDAO",
        "label": "token",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(MetaheroToken)4658"
      },
      {
        "astId": 95,
        "contract": "src/MetaheroDAO.sol:MetaheroDAO",
        "label": "settings",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(Settings)51_storage"
      },
      {
        "astId": 99,
        "contract": "src/MetaheroDAO.sol:MetaheroDAO",
        "label": "proposals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(Proposal)76_storage)"
      },
      {
        "astId": 103,
        "contract": "src/MetaheroDAO.sol:MetaheroDAO",
        "label": "membersWeightsHistory",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(WeightsHistory)83_storage)"
      },
      {
        "astId": 105,
        "contract": "src/MetaheroDAO.sol:MetaheroDAO",
        "label": "totalWeightsHistory",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(WeightsHistory)83_storage"
      },
      {
        "astId": 107,
        "contract": "src/MetaheroDAO.sol:MetaheroDAO",
        "label": "proposalCounter",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 109,
        "contract": "src/MetaheroDAO.sol:MetaheroDAO",
        "label": "snapshotBaseTimestamp",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(MetaheroToken)4658": {
        "encoding": "inplace",
        "label": "contract MetaheroToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(WeightsHistory)83_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MetaheroDAO.WeightsHistory)",
        "numberOfBytes": "32",
        "value": "t_struct(WeightsHistory)83_storage"
      },
      "t_mapping(t_address,t_uint8)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_mapping(t_uint256,t_struct(Proposal)76_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MetaheroDAO.Proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposal)76_storage"
      },
      "t_struct(Proposal)76_storage": {
        "encoding": "inplace",
        "label": "struct MetaheroDAO.Proposal",
        "members": [
          {
            "astId": 53,
            "contract": "src/MetaheroDAO.sol:MetaheroDAO",
            "label": "snapshotId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 55,
            "contract": "src/MetaheroDAO.sol:MetaheroDAO",
            "label": "callData",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes_storage"
          },
          {
            "astId": 57,
            "contract": "src/MetaheroDAO.sol:MetaheroDAO",
            "label": "startsAt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 59,
            "contract": "src/MetaheroDAO.sol:MetaheroDAO",
            "label": "endsAt",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 61,
            "contract": "src/MetaheroDAO.sol:MetaheroDAO",
            "label": "processed",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 63,
            "contract": "src/MetaheroDAO.sol:MetaheroDAO",
            "label": "votesMinPercentage",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 65,
            "contract": "src/MetaheroDAO.sol:MetaheroDAO",
            "label": "votesMinWeight",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 67,
            "contract": "src/MetaheroDAO.sol:MetaheroDAO",
            "label": "votesYesWeight",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 69,
            "contract": "src/MetaheroDAO.sol:MetaheroDAO",
            "label": "votesNoWeight",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 71,
            "contract": "src/MetaheroDAO.sol:MetaheroDAO",
            "label": "votesCount",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 75,
            "contract": "src/MetaheroDAO.sol:MetaheroDAO",
            "label": "votes",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_uint8)"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(Settings)51_storage": {
        "encoding": "inplace",
        "label": "struct MetaheroDAO.Settings",
        "members": [
          {
            "astId": 48,
            "contract": "src/MetaheroDAO.sol:MetaheroDAO",
            "label": "minVotingPeriod",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 50,
            "contract": "src/MetaheroDAO.sol:MetaheroDAO",
            "label": "snapshotWindow",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(WeightsHistory)83_storage": {
        "encoding": "inplace",
        "label": "struct MetaheroDAO.WeightsHistory",
        "members": [
          {
            "astId": 79,
            "contract": "src/MetaheroDAO.sol:MetaheroDAO",
            "label": "weights",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 82,
            "contract": "src/MetaheroDAO.sol:MetaheroDAO",
            "label": "snapshotIds",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}