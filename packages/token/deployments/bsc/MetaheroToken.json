{
  "address": "0xD40bEDb44C081D2935eebA6eF5a3c8A31A1bBE13",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "excludeSenderFromFee",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "excludeRecipientFromFee",
          "type": "bool"
        }
      ],
      "name": "AccountExcluded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "ControllerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "dao",
          "type": "address"
        }
      ],
      "name": "DAOUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sender",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "recipient",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct MetaheroToken.Fees",
          "name": "burnFees",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sender",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "recipient",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct MetaheroToken.Fees",
          "name": "lpFees",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sender",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "recipient",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct MetaheroToken.Fees",
          "name": "rewardsFees",
          "type": "tuple"
        }
      ],
      "name": "FeesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sender",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "recipient",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct MetaheroToken.Fees",
          "name": "burnFees",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sender",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "recipient",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct MetaheroToken.Fees",
          "name": "lpFees",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sender",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "recipient",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct MetaheroToken.Fees",
          "name": "rewardsFees",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minTotalSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lpm",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "PresaleFinished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalRewards",
          "type": "uint256"
        }
      ],
      "name": "TotalRewardsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dao",
      "outputs": [
        {
          "internalType": "contract IMetaheroDAO",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "excludeSenderFromFee",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "excludeRecipientFromFee",
          "type": "bool"
        }
      ],
      "name": "excludeAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getBalanceSummary",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "holdingBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getExcludedAccount",
      "outputs": [
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "excludeSenderFromFee",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "excludeRecipientFromFee",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sender",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "recipient",
              "type": "uint256"
            }
          ],
          "internalType": "struct MetaheroToken.Fees",
          "name": "burnFees",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sender",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "recipient",
              "type": "uint256"
            }
          ],
          "internalType": "struct MetaheroToken.Fees",
          "name": "lpFees",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sender",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "recipient",
              "type": "uint256"
            }
          ],
          "internalType": "struct MetaheroToken.Fees",
          "name": "rewardsFees",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "minTotalSupply",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "lpm_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "controller_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalSupply_",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "excludedAccounts_",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpm",
      "outputs": [
        {
          "internalType": "contract MetaheroLPM",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mintTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "presaleFinished",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dao_",
          "type": "address"
        }
      ],
      "name": "setDAO",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setPresaleAsFinished",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "settings",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sender",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "recipient",
              "type": "uint256"
            }
          ],
          "internalType": "struct MetaheroToken.Fees",
          "name": "burnFees",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sender",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "recipient",
              "type": "uint256"
            }
          ],
          "internalType": "struct MetaheroToken.Fees",
          "name": "lpFees",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sender",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "recipient",
              "type": "uint256"
            }
          ],
          "internalType": "struct MetaheroToken.Fees",
          "name": "rewardsFees",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "minTotalSupply",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "summary",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalExcluded",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalHolding",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sender",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "recipient",
              "type": "uint256"
            }
          ],
          "internalType": "struct MetaheroToken.Fees",
          "name": "burnFees",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sender",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "recipient",
              "type": "uint256"
            }
          ],
          "internalType": "struct MetaheroToken.Fees",
          "name": "lpFees",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sender",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "recipient",
              "type": "uint256"
            }
          ],
          "internalType": "struct MetaheroToken.Fees",
          "name": "rewardsFees",
          "type": "tuple"
        }
      ],
      "name": "updateFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x46c3df970cbbac7b7bc03063799b6cfff6e559ea4644916689cf69c03114c02f",
  "receipt": {
    "to": null,
    "from": "0x3531dB095F19B21b7CDF0300c25CeC817335A6A4",
    "contractAddress": "0xD40bEDb44C081D2935eebA6eF5a3c8A31A1bBE13",
    "transactionIndex": 3,
    "gasUsed": "5017060",
    "logsBloom": "0x
    "blockHash": "0xcd3ca712edd8b8fbe846707990eed370a150e4e1ec32da8ff59a1cd13f208574",
    "transactionHash": "0x46c3df970cbbac7b7bc03063799b6cfff6e559ea4644916689cf69c03114c02f",
    "logs": [],
    "blockNumber": 8894738,
    "cumulativeGasUsed": "5121354",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "944f27d8c9be259369626edd253df334",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"excludeSenderFromFee\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"excludeRecipientFromFee\",\"type\":\"bool\"}],\"name\":\"AccountExcluded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"ControllerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dao\",\"type\":\"address\"}],\"name\":\"DAOUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sender\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recipient\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct MetaheroToken.Fees\",\"name\":\"burnFees\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sender\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recipient\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct MetaheroToken.Fees\",\"name\":\"lpFees\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sender\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recipient\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct MetaheroToken.Fees\",\"name\":\"rewardsFees\",\"type\":\"tuple\"}],\"name\":\"FeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sender\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recipient\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct MetaheroToken.Fees\",\"name\":\"burnFees\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sender\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recipient\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct MetaheroToken.Fees\",\"name\":\"lpFees\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sender\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recipient\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct MetaheroToken.Fees\",\"name\":\"rewardsFees\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTotalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpm\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PresaleFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"}],\"name\":\"TotalRewardsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dao\",\"outputs\":[{\"internalType\":\"contract IMetaheroDAO\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excludeSenderFromFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"excludeRecipientFromFee\",\"type\":\"bool\"}],\"name\":\"excludeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBalanceSummary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holdingBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getExcludedAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"excludeSenderFromFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"excludeRecipientFromFee\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sender\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recipient\",\"type\":\"uint256\"}],\"internalType\":\"struct MetaheroToken.Fees\",\"name\":\"burnFees\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sender\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recipient\",\"type\":\"uint256\"}],\"internalType\":\"struct MetaheroToken.Fees\",\"name\":\"lpFees\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sender\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recipient\",\"type\":\"uint256\"}],\"internalType\":\"struct MetaheroToken.Fees\",\"name\":\"rewardsFees\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"minTotalSupply\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"lpm_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"controller_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"excludedAccounts_\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpm\",\"outputs\":[{\"internalType\":\"contract MetaheroLPM\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dao_\",\"type\":\"address\"}],\"name\":\"setDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPresaleAsFinished\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settings\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sender\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recipient\",\"type\":\"uint256\"}],\"internalType\":\"struct MetaheroToken.Fees\",\"name\":\"burnFees\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sender\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recipient\",\"type\":\"uint256\"}],\"internalType\":\"struct MetaheroToken.Fees\",\"name\":\"lpFees\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sender\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recipient\",\"type\":\"uint256\"}],\"internalType\":\"struct MetaheroToken.Fees\",\"name\":\"rewardsFees\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"minTotalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"summary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalExcluded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalHolding\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sender\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recipient\",\"type\":\"uint256\"}],\"internalType\":\"struct MetaheroToken.Fees\",\"name\":\"burnFees\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sender\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recipient\",\"type\":\"uint256\"}],\"internalType\":\"struct MetaheroToken.Fees\",\"name\":\"lpFees\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sender\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recipient\",\"type\":\"uint256\"}],\"internalType\":\"struct MetaheroToken.Fees\",\"name\":\"rewardsFees\",\"type\":\"tuple\"}],\"name\":\"updateFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Stanis\\u0142aw G\\u0142ogowski <stan@metahero.io>\",\"events\":{\"AccountExcluded(address,bool,bool)\":{\"details\":\"Emitted when account is excluded\",\"params\":{\"account\":\"account address\",\"excludeRecipientFromFee\":\"exclude recipient from fee\",\"excludeSenderFromFee\":\"exclude sender from fee\"}},\"DAOUpdated(address)\":{\"details\":\"Emitted when the dao is updated\",\"params\":{\"dao\":\"dao address\"}},\"FeesUpdated((uint256,uint256),(uint256,uint256),(uint256,uint256))\":{\"details\":\"Emitted when fees are updated\",\"params\":{\"burnFees\":\"burn fees\",\"lpFees\":\"liquidity pool fees\",\"rewardsFees\":\"rewards fees\"}},\"Initialized((uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,address,address)\":{\"details\":\"Emitted when the contract is initialized\",\"params\":{\"burnFees\":\"burn fees\",\"controller\":\"controller address\",\"lpFees\":\"liquidity pool fees\",\"lpm\":\"liquidity pool manager address\",\"minTotalSupply\":\"min total supply\",\"rewardsFees\":\"rewards fees\"}},\"PresaleFinished()\":{\"details\":\"Emitted when the presale is finished\"},\"TotalRewardsUpdated(uint256)\":{\"details\":\"Emitted when total rewards amount is updated\",\"params\":{\"totalRewards\":\"total rewards amount\"}}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Gets allowance\",\"params\":{\"owner\":\"owner address\",\"spender\":\"spender address\"},\"returns\":{\"_0\":\"allowance\"}},\"approve(address,uint256)\":{\"details\":\"Approve spending limit\",\"params\":{\"amount\":\"spending limit\",\"spender\":\"spender address\"}},\"balanceOf(address)\":{\"details\":\"Gets balance of\",\"params\":{\"account\":\"account address\"},\"returns\":{\"result\":\"account balance\"}},\"burn(uint256)\":{\"details\":\"Burns tokens from msg.sender\",\"params\":{\"amount\":\"tokens amount\"}},\"burnFrom(address,uint256)\":{\"details\":\"Burns tokens from sender\",\"params\":{\"amount\":\"tokens amount\",\"sender\":\"sender address\"}},\"constructor\":{\"details\":\"Public constructor\"},\"excludeAccount(address,bool,bool)\":{\"details\":\"Excludes account\",\"params\":{\"account\":\"account address\",\"excludeRecipientFromFee\":\"exclude recipient from fee\",\"excludeSenderFromFee\":\"exclude sender from fee\"}},\"getBalanceSummary(address)\":{\"details\":\"Gets balance summary\",\"params\":{\"account\":\"account address\"}},\"getExcludedAccount(address)\":{\"details\":\"Gets excluded account\",\"params\":{\"account\":\"account address\"}},\"initialize((uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,address,address,uint256,address[])\":{\"details\":\"Initializes the contract\",\"params\":{\"burnFees\":\"burn fees\",\"controller_\":\"controller address\",\"lpFees\":\"liquidity pool fees\",\"lpm_\":\"liquidity pool manager address\",\"minTotalSupply\":\"min total supply\",\"rewardsFees\":\"rewards fees\",\"totalSupply_\":\"total supply\"}},\"initialized()\":{\"returns\":{\"_0\":\"true when contract is initialized\"}},\"mintTo(address,uint256)\":{\"details\":\"Mints tokens to recipient\",\"params\":{\"amount\":\"tokens amount\",\"recipient\":\"recipient address\"}},\"setDAO(address)\":{\"details\":\"Sets the dao\",\"params\":{\"dao_\":\"dao address\"}},\"setOwner(address)\":{\"params\":{\"owner_\":\"owner address\"}},\"setPresaleAsFinished()\":{\"details\":\"Set the presale as finished\"},\"totalSupply()\":{\"details\":\"Gets total supply\",\"returns\":{\"_0\":\"total supply\"}},\"transfer(address,uint256)\":{\"details\":\"Transfers tokens to recipient\",\"params\":{\"amount\":\"tokens amount\",\"recipient\":\"recipient address\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers tokens from sender to recipient\",\"params\":{\"amount\":\"tokens amount\",\"recipient\":\"recipient address\",\"sender\":\"sender address\"}},\"updateFees((uint256,uint256),(uint256,uint256),(uint256,uint256))\":{\"details\":\"Updates fees\",\"params\":{\"burnFees\":\"burn fees\",\"lpFees\":\"liquidity pool fees\",\"rewardsFees\":\"rewards fees\"}}},\"stateVariables\":{\"dao\":{\"return\":\"dao address\"},\"lpm\":{\"return\":\"liquidity pool manager address\"},\"presaleFinished\":{\"return\":\"return true when presale is finished\"},\"settings\":{\"return\":\"settings object\"},\"summary\":{\"return\":\"summary object\"}},\"title\":\"Metahero token\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initialized()\":{\"notice\":\"Checks if contract is initialized\"},\"setOwner(address)\":{\"notice\":\"Sets a new owner\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/MetaheroToken.sol\":\"MetaheroToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/IMetaheroDAO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Metahero DAO interface\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@metahero.io>\\n */\\ninterface IMetaheroDAO {\\n  // external functions\\n\\n  /**\\n   * @notice Called by a token to sync a dao member\\n   * @param member member address\\n   * @param memberWeight member weight\\n   * @param totalWeight all members weight\\n   */\\n  function syncMember(\\n    address member,\\n    uint256 memberWeight,\\n    uint256 totalWeight\\n  )\\n    external;\\n\\n  /**\\n   * @notice Called by a token to sync a dao members\\n   * @param memberA member A address\\n   * @param memberAWeight member A weight\\n   * @param memberB member B address\\n   * @param memberBWeight member B weight\\n   * @param totalWeight all members weight\\n   */\\n  function syncMembers(\\n    address memberA,\\n    uint256 memberAWeight,\\n    address memberB,\\n    uint256 memberBWeight,\\n    uint256 totalWeight\\n  )\\n    external;\\n}\\n\",\"keccak256\":\"0xaa68c9443d03578bfe95ea1c70344c80fb414c9878b72b66541d63cb7cea26a2\",\"license\":\"MIT\"},\"src/MetaheroLPM.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"./core/access/Lockable.sol\\\";\\nimport \\\"./core/access/Owned.sol\\\";\\nimport \\\"./core/lifecycle/Initializable.sol\\\";\\nimport \\\"./core/math/SafeMathLib.sol\\\";\\nimport \\\"./MetaheroToken.sol\\\";\\n\\n\\n/**\\n * @title Metahero abstract liquidity pool manager\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@metahero.io>\\n */\\nabstract contract MetaheroLPM is Lockable, Owned, Initializable {\\n  using SafeMathLib for uint256;\\n\\n  /**\\n   * @return token address\\n   */\\n  MetaheroToken public token;\\n\\n  // modifiers\\n\\n  /**\\n   * @dev Throws if msg.sender is not the token\\n   */\\n  modifier onlyToken() {\\n    require(\\n      msg.sender == address(token),\\n      \\\"MetaheroLPM#1\\\" // msg.sender is not the token\\n    );\\n\\n    _;\\n  }\\n\\n  // events\\n\\n  /**\\n   * @dev Emitted when tokens from the liquidity pool are burned\\n   * @param amount burnt amount\\n   */\\n  event LPBurnt(\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor ()\\n    internal\\n    Lockable()\\n    Owned()\\n    Initializable()\\n  {\\n    //\\n  }\\n\\n  // external functions\\n\\n  /**\\n   * @notice Syncs liquidity pool\\n   */\\n  function syncLP()\\n    external\\n    onlyToken\\n    lock\\n  {\\n    _syncLP();\\n  }\\n\\n  /**\\n   * @notice Burns tokens from the liquidity pool\\n   * @param amount tokens amount\\n   */\\n  function burnLP(\\n    uint256 amount\\n  )\\n    external\\n    onlyOwner\\n    lockOrThrowError\\n  {\\n    require(\\n      amount != 0,\\n      \\\"MetaheroLPM#2\\\" // amount is zero\\n    );\\n\\n    _burnLP(amount);\\n\\n    emit LPBurnt(\\n      amount\\n    );\\n  }\\n\\n  // external functions (views)\\n\\n  function canSyncLP(\\n    address sender,\\n    address recipient\\n  )\\n    external\\n    view\\n    virtual\\n    returns (\\n      bool shouldSyncLPBefore,\\n      bool shouldSyncLPAfter\\n    );\\n\\n  // internal functions\\n\\n  function _initialize(\\n    address token_\\n  )\\n    internal\\n  {\\n    require(\\n      token_ != address(0),\\n      \\\"MetaheroLPM#3\\\" // token is the zero address\\n    );\\n\\n    token = MetaheroToken(token_);\\n  }\\n\\n  function _syncLP()\\n    internal\\n    virtual;\\n\\n  function _burnLP(\\n    uint256 amount\\n  )\\n    internal\\n    virtual;\\n}\\n\",\"keccak256\":\"0x471162c079f9176e3ab754e90964ac14bac1764edc9af77b3fa740b8b9744c40\",\"license\":\"MIT\"},\"src/MetaheroToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./core/access/Controlled.sol\\\";\\nimport \\\"./core/access/Owned.sol\\\";\\nimport \\\"./core/erc20/ERC20.sol\\\";\\nimport \\\"./core/lifecycle/Initializable.sol\\\";\\nimport \\\"./core/math/MathLib.sol\\\";\\nimport \\\"./core/math/SafeMathLib.sol\\\";\\nimport \\\"./IMetaheroDAO.sol\\\";\\nimport \\\"./MetaheroLPM.sol\\\";\\n\\n\\n/**\\n * @title Metahero token\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@metahero.io>\\n */\\ncontract MetaheroToken is Controlled, Owned, ERC20, Initializable {\\n  using MathLib for uint256;\\n  using SafeMathLib for uint256;\\n\\n  struct Fees {\\n    uint256 sender; // percent from sender\\n    uint256 recipient; // percent from recipient\\n  }\\n\\n  struct Settings {\\n    Fees burnFees; // fee taken and burned\\n    Fees lpFees; // fee taken and added to the liquidity pool manager\\n    Fees rewardsFees; // fee taken and added to rewards\\n    uint256 minTotalSupply; // min amount of tokens total supply\\n  }\\n\\n  struct Summary {\\n    uint256 totalExcluded; // total held by excluded accounts\\n    uint256 totalHolding; // total held by holder accounts\\n    uint256 totalRewards; // total rewards\\n    uint256 totalSupply; // total supply\\n  }\\n\\n  struct ExcludedAccount {\\n    bool exists; // true if exists\\n    bool excludeSenderFromFee; // removes the fee from all sender accounts on incoming transfers\\n    bool excludeRecipientFromFee; // removes the fee from all recipient accounts on outgoing transfers\\n  }\\n\\n  // globals\\n\\n  uint256 private constant MAX_FEE = 30; // max sum of all fees - 30%\\n\\n  // metadata\\n\\n  string private constant TOKEN_NAME = \\\"Metahero\\\";\\n  string private constant TOKEN_SYMBOL = \\\"HERO\\\";\\n  uint8 private constant TOKEN_DECIMALS = 18; // 0.000000000000000000\\n\\n  /**\\n   * @return dao address\\n   */\\n  IMetaheroDAO public dao;\\n\\n  /**\\n   * @return liquidity pool manager address\\n   */\\n  MetaheroLPM public lpm;\\n\\n  /**\\n   * @return settings object\\n   */\\n  Settings public settings;\\n\\n  /**\\n   * @return summary object\\n   */\\n  Summary public summary;\\n\\n  /**\\n   * @return return true when presale is finished\\n   */\\n  bool public presaleFinished;\\n\\n  mapping (address => uint256) private accountBalances;\\n  mapping (address => mapping (address => uint256)) private accountAllowances;\\n  mapping (address => ExcludedAccount) private excludedAccounts;\\n\\n  // events\\n\\n  /**\\n   * @dev Emitted when the contract is initialized\\n   * @param burnFees burn fees\\n   * @param lpFees liquidity pool fees\\n   * @param rewardsFees rewards fees\\n   * @param minTotalSupply min total supply\\n   * @param lpm liquidity pool manager address\\n   * @param controller controller address\\n   */\\n  event Initialized(\\n    Fees burnFees,\\n    Fees lpFees,\\n    Fees rewardsFees,\\n    uint256 minTotalSupply,\\n    address lpm,\\n    address controller\\n  );\\n\\n  /**\\n   * @dev Emitted when the dao is updated\\n   * @param dao dao address\\n   */\\n  event DAOUpdated(\\n    address dao\\n  );\\n\\n  /**\\n   * @dev Emitted when fees are updated\\n   * @param burnFees burn fees\\n   * @param lpFees liquidity pool fees\\n   * @param rewardsFees rewards fees\\n   */\\n  event FeesUpdated(\\n    Fees burnFees,\\n    Fees lpFees,\\n    Fees rewardsFees\\n  );\\n\\n  /**\\n   * @dev Emitted when the presale is finished\\n   */\\n  event PresaleFinished();\\n\\n  /**\\n   * @dev Emitted when account is excluded\\n   * @param account account address\\n   * @param excludeSenderFromFee exclude sender from fee\\n   * @param excludeRecipientFromFee exclude recipient from fee\\n   */\\n  event AccountExcluded(\\n    address indexed account,\\n    bool excludeSenderFromFee,\\n    bool excludeRecipientFromFee\\n  );\\n\\n  /**\\n   * @dev Emitted when total rewards amount is updated\\n   * @param totalRewards total rewards amount\\n   */\\n  event TotalRewardsUpdated(\\n    uint256 totalRewards\\n  );\\n\\n  // modifiers\\n\\n  /**\\n   * @dev Throws if msg.sender is not the dao\\n   */\\n  modifier onlyDAO() {\\n    require(\\n      msg.sender == address(dao),\\n      \\\"MetaheroToken#1\\\" // msg.sender is not the dao\\n    );\\n\\n    _;\\n  }\\n\\n  /**\\n   * @dev Throws if msg.sender is not the excluded account\\n   */\\n  modifier onlyExcludedAccount() {\\n    require(\\n      excludedAccounts[msg.sender].exists,\\n      \\\"MetaheroToken#2\\\" // msg.sender is not the excluded account\\n    );\\n\\n    _;\\n  }\\n\\n  /**\\n   * @dev Public constructor\\n   */\\n  constructor ()\\n    public\\n    Controlled()\\n    Owned()\\n    ERC20(TOKEN_NAME, TOKEN_SYMBOL, TOKEN_DECIMALS) // sets metadata\\n    Initializable()\\n  {\\n    //\\n  }\\n\\n  // external functions\\n\\n  /**\\n   * @dev Initializes the contract\\n   * @param burnFees burn fees\\n   * @param lpFees liquidity pool fees\\n   * @param rewardsFees rewards fees\\n   * @param minTotalSupply min total supply\\n   * @param lpm_ liquidity pool manager address\\n   * @param controller_ controller address\\n   * @param totalSupply_ total supply\\n   */\\n  function initialize(\\n    Fees memory burnFees,\\n    Fees memory lpFees,\\n    Fees memory rewardsFees,\\n    uint256 minTotalSupply,\\n    address payable lpm_,\\n    address controller_,\\n    uint256 totalSupply_,\\n    address[] calldata excludedAccounts_\\n  )\\n    external\\n    onlyInitializer\\n  {\\n    _verifyFees(burnFees, lpFees, rewardsFees);\\n\\n    settings.burnFees = burnFees;\\n    settings.lpFees = lpFees;\\n    settings.rewardsFees = rewardsFees;\\n    settings.minTotalSupply = minTotalSupply;\\n\\n    if (\\n      lpFees.sender != 0 ||\\n      lpFees.recipient != 0\\n    ) {\\n      require(\\n        lpm_ != address(0),\\n        \\\"MetaheroToken#3\\\" // lpm is the zero address\\n      );\\n\\n      lpm = MetaheroLPM(lpm_);\\n    }\\n\\n    _initializeController(controller_);\\n\\n    emit Initialized(\\n      burnFees,\\n      lpFees,\\n      rewardsFees,\\n      minTotalSupply,\\n      lpm_,\\n      controller_\\n    );\\n\\n    // excludes owner account\\n    _excludeAccount(msg.sender, true, true);\\n\\n    if (totalSupply_ != 0) {\\n      _mint(\\n        msg.sender,\\n        totalSupply_\\n      );\\n    }\\n\\n    // adds predefined excluded accounts\\n    uint256 excludedAccountsLen = excludedAccounts_.length;\\n\\n    for (uint256 index; index < excludedAccountsLen; index++) {\\n      _excludeAccount(excludedAccounts_[index], false, false);\\n    }\\n  }\\n\\n  /**\\n   * @dev Sets the dao\\n   * @param dao_ dao address\\n   */\\n  function setDAO(\\n    address dao_\\n  )\\n    external\\n    onlyOwner\\n  {\\n    require(\\n      dao_ != address(0),\\n      \\\"MetaheroToken#4\\\" // lpm is the zero address\\n    );\\n\\n    dao = IMetaheroDAO(dao_);\\n\\n    emit DAOUpdated(\\n      dao_\\n    );\\n\\n    // makes a dao an owner\\n    _setOwner(dao_);\\n  }\\n\\n  /**\\n   * @dev Updates fees\\n   * @param burnFees burn fees\\n   * @param lpFees liquidity pool fees\\n   * @param rewardsFees rewards fees\\n   */\\n  function updateFees(\\n    Fees memory burnFees,\\n    Fees memory lpFees,\\n    Fees memory rewardsFees\\n  )\\n    external\\n    onlyDAO // only for dao\\n  {\\n    _verifyFees(burnFees, lpFees, rewardsFees);\\n\\n    settings.burnFees = burnFees;\\n    settings.lpFees = lpFees;\\n    settings.rewardsFees = rewardsFees;\\n\\n    emit FeesUpdated(\\n      burnFees,\\n      lpFees,\\n      rewardsFees\\n    );\\n  }\\n\\n  /**\\n   * @dev Set the presale as finished\\n   */\\n  function setPresaleAsFinished()\\n    external\\n    onlyOwner\\n  {\\n    require(\\n      !presaleFinished,\\n      \\\"MetaheroToken#5\\\" // the presale is already finished\\n    );\\n\\n    presaleFinished = true;\\n\\n    emit PresaleFinished();\\n  }\\n\\n  /**\\n   * @dev Excludes account\\n   * @param account account address\\n   * @param excludeSenderFromFee exclude sender from fee\\n   * @param excludeRecipientFromFee exclude recipient from fee\\n   */\\n  function excludeAccount(\\n    address account,\\n    bool excludeSenderFromFee,\\n    bool excludeRecipientFromFee\\n  )\\n    external\\n    onlyOwner\\n  {\\n    _excludeAccount(\\n      account,\\n      excludeSenderFromFee,\\n      excludeRecipientFromFee\\n    );\\n  }\\n\\n  /**\\n   * @dev Approve spending limit\\n   * @param spender spender address\\n   * @param amount spending limit\\n   */\\n  function approve(\\n    address spender,\\n    uint256 amount\\n  )\\n    external\\n    override\\n    returns (bool)\\n  {\\n    _approve(\\n      msg.sender,\\n      spender,\\n      amount\\n    );\\n\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Mints tokens to recipient\\n   * @param recipient recipient address\\n   * @param amount tokens amount\\n   */\\n  function mintTo(\\n    address recipient,\\n    uint256 amount\\n  )\\n    external\\n    onlyController\\n  {\\n    _mint(\\n      recipient,\\n      amount\\n    );\\n  }\\n\\n  /**\\n   * @dev Burns tokens from msg.sender\\n   * @param amount tokens amount\\n   */\\n  function burn(\\n    uint256 amount\\n  )\\n    external\\n    onlyExcludedAccount\\n  {\\n    _burn(\\n      msg.sender,\\n      amount\\n    );\\n  }\\n\\n  /**\\n   * @dev Burns tokens from sender\\n   * @param sender sender address\\n   * @param amount tokens amount\\n   */\\n  function burnFrom(\\n    address sender,\\n    uint256 amount\\n  )\\n    external\\n    onlyController\\n  {\\n    _burn(\\n      sender,\\n      amount\\n    );\\n  }\\n\\n  /**\\n   * @dev Transfers tokens to recipient\\n   * @param recipient recipient address\\n   * @param amount tokens amount\\n   */\\n  function transfer(\\n    address recipient,\\n    uint256 amount\\n  )\\n    external\\n    override\\n    returns (bool)\\n  {\\n    _transfer(\\n      msg.sender,\\n      recipient,\\n      amount\\n    );\\n\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Transfers tokens from sender to recipient\\n   * @param sender sender address\\n   * @param recipient recipient address\\n   * @param amount tokens amount\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    external\\n    override\\n    returns (bool)\\n  {\\n    _transfer(\\n      sender,\\n      recipient,\\n      amount\\n    );\\n\\n    uint256 allowance = accountAllowances[sender][msg.sender];\\n\\n    require(\\n      allowance >= amount,\\n      \\\"MetaheroToken#6\\\"  // amount exceeds allowance\\n    );\\n\\n    _approve( // update allowance\\n      sender,\\n      msg.sender,\\n      allowance.sub(amount)\\n    );\\n\\n    return true;\\n  }\\n\\n  // external functions (views)\\n\\n  /**\\n   * @dev Gets excluded account\\n   * @param account account address\\n   */\\n  function getExcludedAccount(\\n    address account\\n  )\\n    external\\n    view\\n    returns (\\n      bool exists,\\n      bool excludeSenderFromFee,\\n      bool excludeRecipientFromFee\\n    )\\n  {\\n    return (\\n      excludedAccounts[account].exists,\\n      excludedAccounts[account].excludeSenderFromFee,\\n      excludedAccounts[account].excludeRecipientFromFee\\n    );\\n  }\\n\\n  /**\\n   * @dev Gets total supply\\n   * @return total supply\\n   */\\n  function totalSupply()\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return summary.totalSupply;\\n  }\\n\\n  /**\\n   * @dev Gets allowance\\n   * @param owner owner address\\n   * @param spender spender address\\n   * @return allowance\\n   */\\n  function allowance(\\n    address owner,\\n    address spender\\n  )\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return accountAllowances[owner][spender];\\n  }\\n\\n  /**\\n   * @dev Gets balance of\\n   * @param account account address\\n   * @return result account balance\\n   */\\n  function balanceOf(\\n    address account\\n  )\\n    external\\n    view\\n    override\\n    returns (uint256 result)\\n  {\\n    result = accountBalances[account].add(\\n      _calcRewards(account)\\n    );\\n\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Gets balance summary\\n   * @param account account address\\n   */\\n  function getBalanceSummary(\\n    address account\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 totalBalance,\\n      uint256 holdingBalance,\\n      uint256 totalRewards\\n    )\\n  {\\n    holdingBalance = accountBalances[account];\\n    totalRewards = _calcRewards(account);\\n    totalBalance = holdingBalance.add(totalRewards);\\n\\n    return (totalBalance, holdingBalance, totalRewards);\\n  }\\n\\n  // private functions\\n\\n  function _excludeAccount(\\n    address account,\\n    bool excludeSenderFromFee,\\n    bool excludeRecipientFromFee\\n  )\\n    private\\n  {\\n    require(\\n      account != address(0),\\n      \\\"MetaheroToken#7\\\" // account is the zero address\\n    );\\n\\n    // if already excluded\\n    if (excludedAccounts[account].exists) {\\n      require(\\n        excludedAccounts[account].excludeSenderFromFee != excludeSenderFromFee ||\\n        excludedAccounts[account].excludeRecipientFromFee != excludeRecipientFromFee,\\n        \\\"MetaheroToken#8\\\" // does not update exclude account\\n      );\\n\\n      excludedAccounts[account].excludeSenderFromFee = excludeSenderFromFee;\\n      excludedAccounts[account].excludeRecipientFromFee = excludeRecipientFromFee;\\n    } else {\\n      require(\\n        accountBalances[account] == 0,\\n        \\\"MetaheroToken#9\\\" // can not exclude holder account\\n      );\\n\\n      excludedAccounts[account].exists = true;\\n      excludedAccounts[account].excludeSenderFromFee = excludeSenderFromFee;\\n      excludedAccounts[account].excludeRecipientFromFee = excludeRecipientFromFee;\\n    }\\n\\n    emit AccountExcluded(\\n      account,\\n      excludeSenderFromFee,\\n      excludeRecipientFromFee\\n    );\\n  }\\n\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    require(\\n      spender != address(0),\\n      \\\"MetaheroToken#11\\\" // spender is the zero address\\n    );\\n\\n    accountAllowances[owner][spender] = amount;\\n\\n    emit Approval(\\n      owner,\\n      spender,\\n      amount\\n    );\\n  }\\n\\n  function _mint(\\n    address recipient,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    require(\\n      recipient != address(0),\\n      \\\"MetaheroToken#12\\\" // recipient is the zero address\\n    );\\n\\n    require(\\n      amount != 0,\\n      \\\"MetaheroToken#13\\\" // amount is zero\\n    );\\n\\n    summary.totalSupply = summary.totalSupply.add(amount);\\n\\n    // if exclude account\\n    if (excludedAccounts[recipient].exists) {\\n      summary.totalExcluded = summary.totalExcluded.add(amount);\\n\\n      accountBalances[recipient] = accountBalances[recipient].add(amount);\\n    } else {\\n      _updateHoldingBalance(\\n        recipient,\\n        accountBalances[recipient].add(amount),\\n        summary.totalHolding.add(amount)\\n      );\\n    }\\n\\n    _emitTransfer(\\n      address(0),\\n      recipient,\\n      amount\\n    );\\n  }\\n\\n  function _burn(\\n    address sender,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    require(\\n      sender != address(0),\\n      \\\"MetaheroToken#14\\\" // sender is the zero address\\n    );\\n\\n    require(\\n      amount != 0,\\n      \\\"MetaheroToken#15\\\" // amount is zero\\n    );\\n\\n    require(\\n      accountBalances[sender] >= amount,\\n      \\\"MetaheroToken#16\\\" // amount exceeds sender balance\\n    );\\n\\n    uint256 totalSupply_ = summary.totalSupply.sub(amount);\\n\\n    if (settings.minTotalSupply != 0) {\\n      require(\\n        totalSupply_ >= settings.minTotalSupply,\\n        \\\"MetaheroToken#17\\\" // new total supply exceeds min total supply\\n      );\\n    }\\n\\n    summary.totalSupply = totalSupply_;\\n\\n    // if exclude account\\n    if (excludedAccounts[sender].exists) {\\n      summary.totalExcluded = summary.totalExcluded.sub(amount);\\n\\n      accountBalances[sender] = accountBalances[sender].sub(amount);\\n    } else {\\n      _updateHoldingBalance(\\n        sender,\\n        accountBalances[sender].sub(amount),\\n        summary.totalHolding.sub(amount)\\n      );\\n    }\\n\\n    _emitTransfer(\\n      sender,\\n      address(0),\\n      amount\\n    );\\n  }\\n\\n  function _transfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    require(\\n      sender != address(0),\\n      \\\"MetaheroToken#18\\\" // sender is the zero address\\n    );\\n\\n    require(\\n      recipient != address(0),\\n      \\\"MetaheroToken#19\\\" // recipient is the zero address\\n    );\\n\\n    if (sender == recipient) { // special transfer type\\n      _syncLP(); // sync only LP\\n\\n      _emitTransfer(\\n        sender,\\n        recipient,\\n        0\\n      );\\n    } else {\\n      require(\\n        excludedAccounts[sender].exists ||\\n        presaleFinished,\\n        \\\"MetaheroToken#20\\\" // presale not finished yet\\n      );\\n\\n      require(\\n        amount != 0,\\n        \\\"MetaheroToken#21\\\" // amount is zero\\n      );\\n\\n      if (\\n        !excludedAccounts[sender].exists &&\\n        !excludedAccounts[recipient].exists\\n      ) {\\n        _transferBetweenHolderAccounts(\\n          sender,\\n          recipient,\\n          amount\\n        );\\n      } else if (\\n        excludedAccounts[sender].exists &&\\n        !excludedAccounts[recipient].exists\\n      ) {\\n        _transferFromExcludedAccount(\\n          sender,\\n          recipient,\\n          amount\\n        );\\n      } else if (\\n        !excludedAccounts[sender].exists &&\\n        excludedAccounts[recipient].exists\\n      ) {\\n        _transferToExcludedAccount(\\n          sender,\\n          recipient,\\n          amount\\n        );\\n      } else {\\n        _transferBetweenExcludedAccounts(\\n          sender,\\n          recipient,\\n          amount\\n        );\\n      }\\n    }\\n  }\\n\\n  function _transferBetweenHolderAccounts(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    uint256 senderAmount;\\n    uint256 senderBurnFee;\\n    uint256 senderLpFee;\\n\\n    uint256 recipientAmount;\\n    uint256 recipientBurnFee;\\n    uint256 recipientLpFee;\\n\\n    uint256 totalFee;\\n\\n    {\\n      uint256 totalSupply_ = summary.totalSupply;\\n\\n      // calc fees for sender and recipient\\n      {\\n        uint256 senderTotalFee;\\n        uint256 recipientTotalFee;\\n\\n        (\\n          senderTotalFee,\\n          senderBurnFee,\\n          senderLpFee\\n        ) = _calcTransferSenderFees(amount);\\n\\n        (\\n          totalSupply_,\\n          senderTotalFee,\\n          senderBurnFee\\n        ) = _matchTotalSupplyWithFees(totalSupply_, senderTotalFee, senderBurnFee);\\n\\n        (\\n          recipientTotalFee,\\n          recipientBurnFee,\\n          recipientLpFee\\n        ) = _calcTransferRecipientFees(amount);\\n\\n        (\\n          totalSupply_,\\n          recipientTotalFee,\\n          recipientBurnFee\\n        ) = _matchTotalSupplyWithFees(totalSupply_, recipientTotalFee, recipientBurnFee);\\n\\n        totalFee = senderTotalFee.add(recipientTotalFee);\\n        senderAmount = amount.add(senderTotalFee);\\n        recipientAmount = amount.sub(recipientTotalFee);\\n      }\\n\\n      // appends total rewards\\n      if (summary.totalRewards != 0) {\\n        uint256 totalHoldingWithRewards = summary.totalHolding.add(\\n          summary.totalRewards\\n        );\\n\\n        senderAmount = senderAmount.mul(summary.totalHolding).div(\\n          totalHoldingWithRewards\\n        );\\n        recipientAmount = recipientAmount.mul(summary.totalHolding).div(\\n          totalHoldingWithRewards\\n        );\\n        totalFee = totalFee.mul(summary.totalHolding).div(\\n          totalHoldingWithRewards\\n        );\\n      }\\n\\n      require(\\n        accountBalances[sender] >= senderAmount,\\n        \\\"MetaheroToken#22\\\" // amount exceeds sender balance\\n      );\\n\\n      summary.totalSupply = totalSupply_;\\n\\n      // reduce local vars\\n      senderAmount = accountBalances[sender].sub(senderAmount);\\n      recipientAmount = accountBalances[recipient].add(recipientAmount);\\n\\n      _updateHoldingBalances(\\n        sender,\\n        senderAmount,\\n        recipient,\\n        recipientAmount,\\n        summary.totalHolding.sub(totalFee)\\n      );\\n\\n      _increaseTotalLP(senderLpFee.add(recipientLpFee));\\n    }\\n\\n    // emits events\\n\\n    {\\n      _emitTransfer(\\n        sender,\\n        recipient,\\n        amount\\n      );\\n\\n      _emitTransfer(\\n        sender,\\n        address(0),\\n        senderBurnFee\\n      );\\n\\n      _emitTransfer(\\n        sender,\\n        address(lpm),\\n        senderLpFee\\n      );\\n\\n      _emitTransfer(\\n        recipient,\\n        address(0),\\n        recipientBurnFee\\n      );\\n\\n      _emitTransfer(\\n        recipient,\\n        address(lpm),\\n        recipientLpFee\\n      );\\n\\n      _updateTotalRewards();\\n\\n      _syncLP();\\n    }\\n  }\\n\\n  function _transferFromExcludedAccount(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    require(\\n      accountBalances[sender] >= amount,\\n      \\\"MetaheroToken#23\\\" // amount exceeds sender balance\\n    );\\n\\n    (\\n      bool shouldSyncLPBefore,\\n      bool shouldSyncLPAfter\\n    ) = _canSyncLP(\\n      sender,\\n      address(0)\\n    );\\n\\n    if (shouldSyncLPBefore) {\\n      lpm.syncLP();\\n    }\\n\\n    uint256 recipientTotalFee;\\n    uint256 recipientBurnFee;\\n    uint256 recipientLPFee;\\n\\n    uint256 totalSupply_ = summary.totalSupply;\\n\\n    // when sender does not remove the fee from the recipient\\n    if (!excludedAccounts[sender].excludeRecipientFromFee) {\\n      (\\n        recipientTotalFee,\\n        recipientBurnFee,\\n        recipientLPFee\\n      ) = _calcTransferRecipientFees(amount);\\n\\n      (\\n        totalSupply_,\\n        recipientTotalFee,\\n        recipientBurnFee\\n      ) = _matchTotalSupplyWithFees(totalSupply_, recipientTotalFee, recipientBurnFee);\\n    }\\n\\n    uint256 recipientAmount = amount.sub(recipientTotalFee);\\n\\n    summary.totalSupply = totalSupply_;\\n    summary.totalExcluded = summary.totalExcluded.sub(amount);\\n\\n    accountBalances[sender] = accountBalances[sender].sub(amount);\\n\\n    _updateHoldingBalance(\\n      recipient,\\n      accountBalances[recipient].add(recipientAmount),\\n      summary.totalHolding.add(recipientAmount)\\n    );\\n\\n    _increaseTotalLP(recipientLPFee);\\n\\n    // emits events\\n\\n    _emitTransfer(\\n      sender,\\n      recipient,\\n      amount\\n    );\\n\\n    _emitTransfer(\\n      recipient,\\n      address(0),\\n      recipientBurnFee\\n    );\\n\\n    _emitTransfer(\\n      recipient,\\n      address(lpm),\\n      recipientLPFee\\n    );\\n\\n    _updateTotalRewards();\\n\\n    if (shouldSyncLPAfter) {\\n      lpm.syncLP();\\n    }\\n  }\\n\\n  function _transferToExcludedAccount(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    (\\n      bool shouldSyncLPBefore,\\n      bool shouldSyncLPAfter\\n    ) = _canSyncLP(\\n      address(0),\\n      recipient\\n    );\\n\\n    if (shouldSyncLPBefore) {\\n      lpm.syncLP();\\n    }\\n\\n    uint256 senderTotalFee;\\n    uint256 senderBurnFee;\\n    uint256 senderLpFee;\\n\\n    uint256 totalSupply_ = summary.totalSupply;\\n\\n    // when recipient does not remove the fee from the sender\\n    if (!excludedAccounts[recipient].excludeSenderFromFee) {\\n      (\\n        senderTotalFee,\\n        senderBurnFee,\\n        senderLpFee\\n      ) = _calcTransferSenderFees(amount);\\n\\n      (\\n        totalSupply_,\\n        senderTotalFee,\\n        senderBurnFee\\n      ) = _matchTotalSupplyWithFees(totalSupply_, senderTotalFee, senderBurnFee);\\n    }\\n\\n    uint256 senderAmount = amount.add(senderTotalFee);\\n\\n    // append total rewards\\n    if (summary.totalRewards != 0) {\\n      uint256 totalHoldingWithRewards = summary.totalHolding.add(\\n        summary.totalRewards\\n      );\\n\\n      senderAmount = senderAmount.mul(summary.totalHolding).div(\\n        totalHoldingWithRewards\\n      );\\n    }\\n\\n    require(\\n      accountBalances[sender] >= senderAmount,\\n      \\\"MetaheroToken#24\\\" // amount exceeds sender balance\\n    );\\n\\n    summary.totalSupply = totalSupply_;\\n    summary.totalExcluded = summary.totalExcluded.add(amount);\\n\\n    accountBalances[recipient] = accountBalances[recipient].add(amount);\\n\\n    _updateHoldingBalance(\\n      sender,\\n      accountBalances[sender].sub(senderAmount),\\n      summary.totalHolding.sub(senderAmount)\\n    );\\n\\n    _increaseTotalLP(senderLpFee);\\n\\n    // emits events\\n\\n    _emitTransfer(\\n      sender,\\n      recipient,\\n      amount\\n    );\\n\\n    _emitTransfer(\\n      sender,\\n      address(0),\\n      senderBurnFee\\n    );\\n\\n    _emitTransfer(\\n      sender,\\n      address(lpm),\\n      senderLpFee\\n    );\\n\\n    _updateTotalRewards();\\n\\n    if (shouldSyncLPAfter) {\\n      lpm.syncLP();\\n    }\\n  }\\n\\n  function _transferBetweenExcludedAccounts(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    require(\\n      accountBalances[sender] >= amount,\\n      \\\"MetaheroToken#25\\\" // amount exceeds sender balance\\n    );\\n\\n    (\\n      bool shouldSyncLPBefore,\\n      bool shouldSyncLPAfter\\n    ) = _canSyncLP(\\n      address(0),\\n      recipient\\n    );\\n\\n    if (shouldSyncLPBefore) {\\n      lpm.syncLP();\\n    }\\n\\n    accountBalances[sender] = accountBalances[sender].sub(amount);\\n    accountBalances[recipient] = accountBalances[recipient].add(amount);\\n\\n    _emitTransfer(\\n      sender,\\n      recipient,\\n      amount\\n    );\\n\\n    if (shouldSyncLPAfter) {\\n      lpm.syncLP();\\n    }\\n  }\\n\\n  function _updateHoldingBalance(\\n    address holder,\\n    uint256 holderBalance,\\n    uint256 totalHolding\\n  )\\n    private\\n  {\\n    accountBalances[holder] = holderBalance;\\n    summary.totalHolding = totalHolding;\\n\\n    if (address(dao) != address(0)) { // if dao is not the zero address\\n      dao.syncMember(\\n        holder,\\n        holderBalance,\\n        totalHolding\\n      );\\n    }\\n  }\\n\\n  function _updateHoldingBalances(\\n    address holderA,\\n    uint256 holderABalance,\\n    address holderB,\\n    uint256 holderBBalance,\\n    uint256 totalHolding\\n  )\\n    private\\n  {\\n    accountBalances[holderA] = holderABalance;\\n    accountBalances[holderB] = holderBBalance;\\n    summary.totalHolding = totalHolding;\\n\\n    if (address(dao) != address(0)) { // if dao is not the zero address\\n      dao.syncMembers(\\n        holderA,\\n        holderABalance,\\n        holderB,\\n        holderBBalance,\\n        totalHolding\\n      );\\n    }\\n  }\\n\\n  function _emitTransfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    if (amount != 0) { // when amount is not zero\\n      emit Transfer(\\n        sender,\\n        recipient,\\n        amount\\n      );\\n    }\\n  }\\n\\n  function _increaseTotalLP(\\n    uint256 amount\\n  )\\n    private\\n  {\\n    if (amount != 0) { // when amount is not zero\\n      accountBalances[address(lpm)] = accountBalances[address(lpm)].add(amount);\\n\\n      summary.totalExcluded = summary.totalExcluded.add(amount);\\n    }\\n  }\\n\\n  function _syncLP()\\n    private\\n  {\\n    if (address(lpm) != address(0)) { // if lpm is not the zero address\\n      lpm.syncLP();\\n    }\\n  }\\n\\n  function _updateTotalRewards()\\n    private\\n  {\\n    // totalRewards = totalSupply - totalExcluded - totalHolding\\n    uint256 totalRewards = summary.totalSupply\\n    .sub(summary.totalExcluded)\\n    .sub(summary.totalHolding);\\n\\n    if (totalRewards != summary.totalRewards) {\\n      summary.totalRewards = totalRewards;\\n\\n      emit TotalRewardsUpdated(\\n        totalRewards\\n      );\\n    }\\n  }\\n\\n  // private functions (views)\\n\\n  function _matchTotalSupplyWithFees(\\n    uint256 totalSupply_,\\n    uint256 totalFee,\\n    uint256 burnFee\\n  )\\n    private\\n    view\\n    returns (uint256, uint256, uint256)\\n  {\\n    if (burnFee != 0) {\\n      uint256 newTotalSupply = totalSupply_.sub(burnFee);\\n\\n      if (newTotalSupply >= settings.minTotalSupply) {\\n        totalSupply_ = newTotalSupply;\\n      } else  { // turn of burn fee\\n        totalFee = totalFee.sub(burnFee);\\n        burnFee = 0;\\n      }\\n    }\\n\\n    return (totalSupply_, totalFee, burnFee);\\n  }\\n\\n\\n  function _canSyncLP(\\n    address sender,\\n    address recipient\\n  )\\n    private\\n    view\\n    returns (\\n      bool shouldSyncLPBefore,\\n      bool shouldSyncLPAfter\\n    )\\n  {\\n    if (address(lpm) != address(0)) { // if lpm is not the zero address\\n      (shouldSyncLPBefore, shouldSyncLPAfter) = lpm.canSyncLP(\\n        sender,\\n        recipient\\n      );\\n    }\\n\\n    return (shouldSyncLPBefore, shouldSyncLPAfter);\\n  }\\n\\n  function _calcRewards(\\n    address account\\n  )\\n    private\\n    view\\n    returns (uint256 result)\\n  {\\n    if (\\n      !excludedAccounts[account].exists && // only for holders\\n      summary.totalRewards != 0\\n    ) {\\n      result = summary.totalRewards\\n        .mul(accountBalances[account])\\n        .div(summary.totalHolding);\\n    }\\n\\n    return result;\\n  }\\n\\n  function _calcTransferSenderFees(\\n    uint256 amount\\n  )\\n    private\\n    view\\n    returns (\\n      uint256 totalFee,\\n      uint256 burnFee,\\n      uint256 lpFee\\n    )\\n  {\\n    uint256 rewardsFee = amount.percent(settings.rewardsFees.sender);\\n\\n    lpFee = amount.percent(settings.lpFees.sender);\\n    burnFee = amount.percent(settings.burnFees.sender);\\n\\n    totalFee = lpFee.add(rewardsFee).add(burnFee);\\n\\n    return (totalFee, burnFee, lpFee);\\n  }\\n\\n  function _calcTransferRecipientFees(\\n    uint256 amount\\n  )\\n    private\\n    view\\n    returns (\\n      uint256 totalFee,\\n      uint256 burnFee,\\n      uint256 lpFee\\n    )\\n  {\\n    uint256 rewardsFee = amount.percent(settings.rewardsFees.recipient);\\n\\n    lpFee = amount.percent(settings.lpFees.recipient);\\n    burnFee = amount.percent(settings.burnFees.recipient);\\n\\n    totalFee = lpFee.add(rewardsFee).add(burnFee);\\n\\n    return (totalFee, burnFee, lpFee);\\n  }\\n\\n  // private functions (pure)\\n\\n  function _verifyFees(\\n    Fees memory burnFees,\\n    Fees memory lpFees,\\n    Fees memory rewardsFees\\n  )\\n    private\\n    pure\\n  {\\n    uint256 totalFee = burnFees.sender.add(\\n      burnFees.recipient\\n    ).add(\\n      lpFees.sender.add(lpFees.recipient)\\n    ).add(\\n      rewardsFees.sender.add(rewardsFees.recipient)\\n    );\\n\\n    require(\\n      totalFee <= MAX_FEE,\\n      \\\"MetaheroToken#26\\\" // the total fee is too high\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x0add457e556d5395295037a9acc65a7d22833fcd448812ddf845f87ea4f9b633\",\"license\":\"MIT\"},\"src/core/access/Controlled.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Controlled\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@metahero.io>\\n */\\ncontract Controlled {\\n  /**\\n   * @return controller address\\n   */\\n  address public controller;\\n\\n  // modifiers\\n\\n  /**\\n   * @dev Throws if msg.sender is not the controller\\n   */\\n  modifier onlyController() {\\n    require(\\n      msg.sender == controller,\\n      \\\"Controlled#1\\\" // msg.sender is not the controller\\n    );\\n\\n    _;\\n  }\\n\\n  // events\\n\\n  /**\\n   * @dev Emitted when the controller is updated\\n   * @param controller new controller address\\n   */\\n  event ControllerUpdated(\\n    address controller\\n  );\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor()\\n    internal\\n  {\\n    //\\n  }\\n\\n  // internal functions\\n\\n  function _initializeController(\\n    address controller_\\n  )\\n    internal\\n  {\\n    controller = controller_;\\n  }\\n\\n  function _setController(\\n    address controller_\\n  )\\n    internal\\n  {\\n    require(\\n      controller_ != address(0),\\n      \\\"Controlled#2\\\" // controller is the zero address\\n    );\\n\\n    require(\\n      controller_ != controller,\\n      \\\"Controlled#3\\\" // does not update the controller\\n    );\\n\\n    controller = controller_;\\n\\n    emit ControllerUpdated(\\n      controller_\\n    );\\n  }\\n\\n  function _removeController()\\n    internal\\n  {\\n    require(\\n      controller != address(0),\\n      \\\"Controlled#4\\\" // controller is the zero address\\n    );\\n\\n    controller = address(0);\\n\\n    emit ControllerUpdated(\\n      address(0)\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x6fd7d2734e5013ec71b009a7348b2de27330370bad175c62ffd39285eefeaaee\",\"license\":\"MIT\"},\"src/core/access/Lockable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Lockable\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@metahero.io>\\n */\\ncontract Lockable {\\n  /**\\n   * @return true when contract is locked\\n   */\\n  bool public locked;\\n\\n  // modifiers\\n\\n\\n  /**\\n   * @dev Calls only when contract is unlocked\\n   */\\n  modifier lock() {\\n    if (!locked) {\\n      locked = true;\\n\\n      _;\\n\\n      locked = false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Throws if contract is locked\\n   */\\n  modifier lockOrThrowError() {\\n    require(\\n      !locked,\\n      \\\"Lockable#1\\\" // contract is locked\\n    );\\n\\n    locked = true;\\n\\n    _;\\n\\n    locked = false;\\n  }\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor()\\n    internal\\n  {\\n    //\\n  }\\n}\\n\",\"keccak256\":\"0x99756073634c8bff46b02af4a3f69176b803a03415a9293478d2c635285c9ae6\",\"license\":\"MIT\"},\"src/core/access/Owned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Owned\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@metahero.io>\\n */\\ncontract Owned {\\n  /**\\n   * @return owner address\\n   */\\n  address public owner;\\n\\n  // modifiers\\n\\n  /**\\n   * @dev Throws if msg.sender is not the owner\\n   */\\n  modifier onlyOwner() {\\n    require(\\n      msg.sender == owner,\\n      \\\"Owned#1\\\" // msg.sender is not the owner\\n    );\\n\\n    _;\\n  }\\n\\n  // events\\n\\n  /**\\n   * @dev Emitted when the owner is updated\\n   * @param owner new owner address\\n   */\\n  event OwnerUpdated(\\n    address owner\\n  );\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor()\\n    internal\\n  {\\n    owner = msg.sender;\\n  }\\n\\n  // external functions\\n\\n  /**\\n   * @notice Sets a new owner\\n   * @param owner_ owner address\\n   */\\n  function setOwner(\\n    address owner_\\n  )\\n    external\\n    onlyOwner\\n  {\\n    _setOwner(owner_);\\n  }\\n\\n  // internal functions\\n\\n  function _setOwner(\\n    address owner_\\n  )\\n    internal\\n  {\\n    require(\\n      owner_ != address(0),\\n      \\\"Owned#2\\\" // owner is the zero address\\n    );\\n\\n    require(\\n      owner_ != owner,\\n      \\\"Owned#3\\\" // does not update the owner\\n    );\\n\\n    owner = owner_;\\n\\n    emit OwnerUpdated(\\n      owner_\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0xf51e5a9b2810c8dac7bd959f56d334ba9221f0c87dd7d79062188a25f634ca68\",\"license\":\"MIT\"},\"src/core/erc20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n\\n/**\\n * @title ERC20 abstract token\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@metahero.io>\\n */\\nabstract contract ERC20 is IERC20 {\\n  string public override name;\\n  string public override symbol;\\n  uint8 public override decimals;\\n\\n  /**\\n   * @dev Internal constructor\\n   * @param name_ name\\n   * @param symbol_ symbol\\n   * @param decimals_ decimals amount\\n   */\\n  constructor (\\n    string memory name_,\\n    string memory symbol_,\\n    uint8 decimals_\\n  )\\n    internal\\n  {\\n    name = name_;\\n    symbol = symbol_;\\n    decimals = decimals_;\\n  }\\n}\\n\",\"keccak256\":\"0x7bf37353ffc0e4a6c0991a3d43d9bc3ffeae5f1dad6cc37ebd65eea009121821\",\"license\":\"MIT\"},\"src/core/erc20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title ERC20 token interface\\n *\\n * @notice See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\\n */\\ninterface IERC20 {\\n  // events\\n\\n  event Approval(\\n    address indexed owner,\\n    address indexed spender,\\n    uint256 value\\n  );\\n\\n  event Transfer(\\n    address indexed from,\\n    address indexed to,\\n    uint256 value\\n  );\\n\\n  // external functions\\n\\n  function approve(\\n    address spender,\\n    uint256 value\\n  )\\n    external\\n    returns (bool);\\n\\n  function transfer(\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (bool);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (bool);\\n\\n  // external functions (views)\\n\\n  function totalSupply()\\n    external\\n    view\\n    returns (uint256);\\n\\n  function balanceOf(\\n    address owner\\n  )\\n    external\\n    view\\n    returns (uint256);\\n\\n  function allowance(\\n    address owner,\\n    address spender\\n  )\\n    external\\n    view\\n    returns (uint256);\\n\\n  // external functions (pure)\\n\\n  function name()\\n    external\\n    pure\\n    returns (string memory);\\n\\n  function symbol()\\n    external\\n    pure\\n    returns (string memory);\\n\\n  function decimals()\\n    external\\n    pure\\n    returns (uint8);\\n}\\n\",\"keccak256\":\"0x724e6080597d9117b6b78581bad2dc6faa30bf63e015ec583df6cb10ce7fb7c8\",\"license\":\"MIT\"},\"src/core/lifecycle/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Initializable\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@metahero.io>\\n */\\ncontract Initializable {\\n  address private initializer;\\n\\n  // modifiers\\n\\n  /**\\n   * @dev Throws if msg.sender is not the initializer\\n   */\\n  modifier onlyInitializer() {\\n    require(\\n      initializer != address(0),\\n      \\\"Initializable#1\\\" // already initialized\\n    );\\n\\n    require(\\n      msg.sender == initializer,\\n      \\\"Initializable#2\\\" // msg.sender is not the initializer\\n    );\\n\\n    /// @dev removes initializer\\n    initializer = address(0);\\n\\n    _;\\n  }\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor()\\n    internal\\n  {\\n    initializer = msg.sender;\\n  }\\n\\n  // external functions (views)\\n\\n  /**\\n   * @notice Checks if contract is initialized\\n   * @return true when contract is initialized\\n   */\\n  function initialized()\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return initializer == address(0);\\n  }\\n}\\n\",\"keccak256\":\"0xe4741a154e5f2e6db7ba837b33e3d2f9c32179217de0c13cbda888170be5e24d\",\"license\":\"MIT\"},\"src/core/math/MathLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"./SafeMathLib.sol\\\";\\n\\n\\n/**\\n * @title Math library\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@metahero.io>\\n */\\nlibrary MathLib {\\n  using SafeMathLib for uint256;\\n\\n  // internal functions (pure)\\n\\n  /**\\n   * @notice Calcs a x p / 100\\n   */\\n  function percent(\\n    uint256 a,\\n    uint256 p\\n  )\\n    internal\\n    pure\\n    returns (uint256 result)\\n  {\\n    if (a != 0 && p != 0) {\\n      result = a.mul(p).div(100);\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0xeb9ba17d84220387df239090b90907a7d14cae4f82fd5e9aa67dfd710b1625ef\",\"license\":\"MIT\"},\"src/core/math/SafeMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Safe math library\\n *\\n * @notice Based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/5fe8f4e93bd1d4f5cc9a6899d7f24f5ffe4c14aa/contracts/math/SafeMath.sol\\n */\\nlibrary SafeMathLib {\\n  // internal functions (pure)\\n\\n  /**\\n   * @notice Calcs a + b\\n   */\\n  function add(\\n    uint256 a,\\n    uint256 b\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    uint256 c = a + b;\\n\\n    require(\\n      c >= a,\\n      \\\"SafeMathLib#1\\\"\\n    );\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @notice Calcs a - b\\n   */\\n  function sub(\\n    uint256 a,\\n    uint256 b\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    require(\\n      b <= a,\\n      \\\"SafeMathLib#2\\\"\\n    );\\n\\n    return a - b;\\n  }\\n\\n  /**\\n   * @notice Calcs a x b\\n   */\\n  function mul(\\n    uint256 a,\\n    uint256 b\\n  )\\n    internal\\n    pure\\n    returns (uint256 result)\\n  {\\n    if (a != 0 && b != 0) {\\n      result = a * b;\\n\\n      require(\\n        result / a == b,\\n        \\\"SafeMathLib#3\\\"\\n      );\\n    }\\n\\n    return result;\\n  }\\n\\n  /**\\n   * @notice Calcs a / b\\n   */\\n  function div(\\n    uint256 a,\\n    uint256 b\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    require(\\n      b != 0,\\n      \\\"SafeMathLib#4\\\"\\n    );\\n\\n    return a / b;\\n  }\\n}\\n\",\"keccak256\":\"0xb4d920f8a4ce97a5cd5a7afe9943be07e05abb3ea267c772473644173f5b71e2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040518060400160405280600881526020017f4d6574616865726f0000000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f4845524f00000000000000000000000000000000000000000000000000000000815250601233600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260029080519060200190620000d992919062000158565b508160039080519060200190620000f292919062000158565b5080600460006101000a81548160ff021916908360ff16021790555050505033600460016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620001fe565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200019b57805160ff1916838001178555620001cc565b82800160010185558215620001cc579182015b82811115620001cb578251825591602001919060010190620001ae565b5b509050620001db9190620001df565b5090565b5b80821115620001fa576000816000905550600101620001e0565b5090565b615885806200020e6000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c806370a08231116100f9578063b16a867c11610097578063dd62ed3e11610071578063dd62ed3e146104ea578063e06174e41461051a578063e73a914c1461053b578063f77c479114610557576101c4565b8063b16a867c1461048d578063c8c157ec146104ae578063da498b83146104b8576101c4565b80638da5cb5b116100d35780638da5cb5b1461040357806390b5e6d91461042157806395d89b411461043f578063a9059cbb1461045d576101c4565b806370a082311461039b57806379cc6790146103cb5780638578e3e9146103e7576101c4565b80632d380315116101665780634162169f116101405780634162169f1461032757806342966c6814610345578063449a52f8146103615780636c24c5a21461037d576101c4565b80632d380315146102bb578063313ce567146102ed578063341c56311461030b576101c4565b8063158ef93e116101a2578063158ef93e1461023357806318160ddd146102515780632197fb251461026f57806323b872dd1461028b576101c4565b806306fdde03146101c9578063095ea7b3146101e757806313af403514610217575b600080fd5b6101d1610575565b6040516101de9190615097565b60405180910390f35b61020160048036038101906101fc91906143b7565b610613565b60405161020e9190614fe6565b60405180910390f35b610231600480360381019061022c91906142b4565b61062a565b005b61023b6106c6565b6040516102489190614fe6565b60405180910390f35b61025961071e565b60405161026691906155f8565b60405180910390f35b61028960048036038101906102849190614368565b61072b565b005b6102a560048036038101906102a09190614319565b6107cb565b6040516102b29190614fe6565b60405180910390f35b6102d560048036038101906102d091906142b4565b6108c5565b6040516102e493929190615613565b60405180910390f35b6102f5610933565b604051610302919061568f565b60405180910390f35b6103256004803603810190610320919061442f565b610946565b005b61032f610a78565b60405161033c9190615061565b60405180910390f35b61035f600480360381019061035a919061454f565b610a9e565b005b61037b600480360381019061037691906143b7565b610b3a565b005b610385610bd6565b604051610392919061507c565b60405180910390f35b6103b560048036038101906103b091906142b4565b610bfc565b6040516103c291906155f8565b60405180910390f35b6103e560048036038101906103e091906143b7565b610c5f565b005b61040160048036038101906103fc919061447e565b610cfb565b005b61040b61105d565b6040516104189190614f18565b60405180910390f35b610429611083565b6040516104369190614fe6565b60405180910390f35b610447611096565b6040516104549190615097565b60405180910390f35b610477600480360381019061047291906143b7565b611134565b6040516104849190614fe6565b60405180910390f35b61049561114b565b6040516104a5949392919061564a565b60405180910390f35b6104b6611169565b005b6104d260048036038101906104cd91906142b4565b611292565b6040516104e19392919061502a565b60405180910390f35b61050460048036038101906104ff91906142dd565b611394565b60405161051191906155f8565b60405180910390f35b61052261141b565b6040516105329493929190615550565b60405180910390f35b610555600480360381019061055091906142b4565b611493565b005b61055f611617565b60405161056c9190614f18565b60405180910390f35b60028054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561060b5780601f106105e05761010080835404028352916020019161060b565b820191906000526020600020905b8154815290600101906020018083116105ee57829003601f168201915b505050505081565b600061062033848461163b565b6001905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b190615459565b60405180910390fd5b6106c381611796565b50565b60008073ffffffffffffffffffffffffffffffffffffffff16600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905090565b6000600e60030154905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b290615459565b60405180910390fd5b6107c6838383611912565b505050565b60006107d8848484611d6b565b6000601460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508281101561089c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089390615219565b60405180910390fd5b6108b985336108b486856121d190919063ffffffff16565b61163b565b60019150509392505050565b6000806000601360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915061091584612221565b905061092a818361230190919063ffffffff16565b92509193909250565b600460009054906101000a900460ff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109cd906154b9565b60405180910390fd5b6109e1838383612356565b8260076000016000820151816000015560208201518160010155905050816007600201600082015181600001556020820151816001015590505080600760040160008201518160000155602082015181600101559050507f0dbe11418c105d09d5be3678a3c5746668672dfa4ee46df48357b4fba6624062838383604051610a6b93929190615519565b60405180910390a1505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b601560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16610b2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2490615319565b60405180910390fd5b610b373382612417565b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610bc8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bbf90615419565b60405180910390fd5b610bd2828261275e565b5050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610c58610c0a83612221565b601360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461230190919063ffffffff16565b9050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ced576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce490615419565b60405180910390fd5b610cf78282612417565b5050565b600073ffffffffffffffffffffffffffffffffffffffff16600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610d8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8490615379565b60405180910390fd5b600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1490615339565b60405180910390fd5b6000600460016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610e6a898989612356565b8860076000016000820151816000015560208201518160010155905050876007600201600082015181600001556020820151816001015590505086600760040160008201518160000155602082015181600101559050508560076006018190555060008860000151141580610ee457506000886020015114155b15610f9b57600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415610f59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f50906152f9565b60405180910390fd5b84600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b610fa4846129c7565b7f06e0e4e247c5abbfda61b62eff3cf098108df70bbbd75f00cba76a9363dc5f47898989898989604051610fdd96959493929190615595565b60405180910390a1610ff133600180611912565b6000831461100457611003338461275e565b5b600082829050905060005b818110156110505761104384848381811061102657fe5b905060200201602081019061103b91906142b4565b600080611912565b808060010191505061100f565b5050505050505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b601260009054906101000a900460ff1681565b60038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561112c5780601f106111015761010080835404028352916020019161112c565b820191906000526020600020905b81548152906001019060200180831161110f57829003601f168201915b505050505081565b6000611141338484611d6b565b6001905092915050565b600e8060000154908060010154908060020154908060030154905084565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146111f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111f090615459565b60405180910390fd5b601260009054906101000a900460ff1615611249576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124090615299565b60405180910390fd5b6001601260006101000a81548160ff0219169083151502179055507f0b5ca8ee9a23a12c9bb341511e83987d73bee14e96dc855aeaea8840c54ea0bd60405160405180910390a1565b6000806000601560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16601560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff16601560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160029054906101000a900460ff169250925092509193909250565b6000601460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60078060000160405180604001604052908160008201548152602001600182015481525050908060020160405180604001604052908160008201548152602001600182015481525050908060040160405180604001604052908160008201548152602001600182015481525050908060060154905084565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611523576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151a90615459565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611593576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158a906150d9565b60405180910390fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f395c0f5a57accc3f0c20646b402f0845c448f3e4ac4a2ec56a3eaf26d15bf79a816040516116039190614f18565b60405180910390a161161481611796565b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156116ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116a290615119565b60405180910390fd5b80601460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161178991906155f8565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611806576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117fd906153f9565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611897576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188e906153d9565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f4ffd725fc4a22075e9ec71c59edf9c38cdeb588a91b24fc5b61388c5be41282b816040516119079190614f18565b60405180910390a150565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611982576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611979906151f9565b60405180910390fd5b601560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1615611b8457811515601560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff161515141580611a8c5750801515601560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160029054906101000a900460ff16151514155b611acb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ac290615399565b60405180910390fd5b81601560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160016101000a81548160ff02191690831515021790555080601560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160026101000a81548160ff021916908315150217905550611d16565b6000601360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414611c06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bfd906153b9565b60405180910390fd5b6001601560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff02191690831515021790555081601560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160016101000a81548160ff02191690831515021790555080601560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160026101000a81548160ff0219169083151502179055505b8273ffffffffffffffffffffffffffffffffffffffff167f32007f1d99093107aa587b30e94adbad373aaa061b0ed208485221eecf52ac218383604051611d5e929190615001565b60405180910390a2505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611ddb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dd2906150b9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611e4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e42906150f9565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611e9857611e87612a0a565b611e9383836000612ae5565b6121cc565b601560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1680611eff5750601260009054906101000a900460ff165b611f3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f3590615279565b60405180910390fd5b6000811415611f82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f79906152d9565b60405180910390fd5b601560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1615801561202c5750601560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16155b156120415761203c838383612b58565b6121cb565b601560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1680156120ea5750601560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16155b156120ff576120fa838383612ec9565b6121ca565b601560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff161580156121a85750601560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff165b156121bd576121b88383836132a9565b6121c9565b6121c88383836136e5565b5b5b5b5b505050565b600082821115612216576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161220d906152b9565b60405180910390fd5b818303905092915050565b6000601560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1615801561228657506000600e6002015414155b156122fc576122f9600e600101546122eb601360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600e600201546139c790919063ffffffff16565b613a3690919063ffffffff16565b90505b919050565b60008082840190508381101561234c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161234390615179565b60405180910390fd5b8091505092915050565b60006123cb6123768360200151846000015161230190919063ffffffff16565b6123bd6123948660200151876000015161230190919063ffffffff16565b6123af8860200151896000015161230190919063ffffffff16565b61230190919063ffffffff16565b61230190919063ffffffff16565b9050601e811115612411576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161240890615239565b60405180910390fd5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612487576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161247e90615159565b60405180910390fd5b60008114156124cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124c2906154d9565b60405180910390fd5b80601360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561254d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161254490615499565b60405180910390fd5b600061256782600e600301546121d190919063ffffffff16565b90506000600760060154146125bf576007600601548110156125be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125b5906151d9565b60405180910390fd5b5b80600e60030181905550601560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16156126d95761263682600e600001546121d190919063ffffffff16565b600e6000018190555061269182601360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546121d190919063ffffffff16565b601360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061274d565b61274c8361272f84601360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546121d190919063ffffffff16565b61274785600e600101546121d190919063ffffffff16565b613a8d565b5b61275983600084612ae5565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156127ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127c590615259565b60405180910390fd5b6000811415612812576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612809906151b9565b60405180910390fd5b61282a81600e6003015461230190919063ffffffff16565b600e60030181905550601560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1615612943576128a081600e6000015461230190919063ffffffff16565b600e600001819055506128fb81601360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461230190919063ffffffff16565b601360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506129b7565b6129b68261299983601360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461230190919063ffffffff16565b6129b184600e6001015461230190919063ffffffff16565b613a8d565b5b6129c360008383612ae5565b5050565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612ae357600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166339071c9e6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612aca57600080fd5b505af1158015612ade573d6000803e3d6000fd5b505050505b565b60008114612b53578173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051612b4a91906155f8565b60405180910390a35b505050565b600080600080600080600080600e600301549050600080612b788b613bc8565b809a50819b50829450505050612b8f83838b613c54565b809b50819450829550505050612ba48b613cb9565b809750819850829350505050612bbb838288613c54565b809850819350829550505050612bda818361230190919063ffffffff16565b9350612bef828c61230190919063ffffffff16565b9950612c04818c6121d190919063ffffffff16565b965050506000600e6002015414612cbc576000612c34600e60020154600e6001015461230190919063ffffffff16565b9050612c6081612c52600e600101548c6139c790919063ffffffff16565b613a3690919063ffffffff16565b9850612c8c81612c7e600e60010154896139c790919063ffffffff16565b613a3690919063ffffffff16565b9550612cb881612caa600e60010154866139c790919063ffffffff16565b613a3690919063ffffffff16565b9250505b87601360008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015612d3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d3590615199565b60405180910390fd5b80600e60030181905550612d9a88601360008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546121d190919063ffffffff16565b9750612dee85601360008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461230190919063ffffffff16565b9450612e148b898c88612e0f87600e600101546121d190919063ffffffff16565b613d45565b612e2f612e2a848861230190919063ffffffff16565b613eca565b50612e3b8a8a8a612ae5565b612e478a600088612ae5565b612e748a600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687612ae5565b612e8089600085612ae5565b612ead89600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684612ae5565b612eb5613fd0565b612ebd612a0a565b50505050505050505050565b80601360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015612f4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f4290615359565b60405180910390fd5b600080612f59856000614059565b915091508115612fe657600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166339071c9e6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612fcd57600080fd5b505af1158015612fe1573d6000803e3d6000fd5b505050505b600080600080600e600301549050601560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160029054906101000a900460ff166130755761305187613cb9565b809450819550829650505050613068818585613c54565b8095508196508293505050505b600061308a85896121d190919063ffffffff16565b905081600e600301819055506130ae88600e600001546121d190919063ffffffff16565b600e6000018190555061310988601360008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546121d190919063ffffffff16565b601360008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506131bf896131a283601360008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461230190919063ffffffff16565b6131ba84600e6001015461230190919063ffffffff16565b613a8d565b6131c883613eca565b6131d38a8a8a612ae5565b6131df89600086612ae5565b61320c89600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685612ae5565b613214613fd0565b851561329d57600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166339071c9e6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561328457600080fd5b505af1158015613298573d6000803e3d6000fd5b505050505b50505050505050505050565b6000806132b7600085614059565b91509150811561334457600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166339071c9e6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561332b57600080fd5b505af115801561333f573d6000803e3d6000fd5b505050505b600080600080600e600301549050601560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff166133d3576133af87613bc8565b8094508195508296505050506133c6818585613c54565b8095508196508293505050505b60006133e8858961230190919063ffffffff16565b90506000600e6002015414613446576000613416600e60020154600e6001015461230190919063ffffffff16565b905061344281613434600e60010154856139c790919063ffffffff16565b613a3690919063ffffffff16565b9150505b80601360008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156134c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134bf90615479565b60405180910390fd5b81600e600301819055506134ea88600e6000015461230190919063ffffffff16565b600e6000018190555061354588601360008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461230190919063ffffffff16565b601360008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506135fb8a6135de83601360008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546121d190919063ffffffff16565b6135f684600e600101546121d190919063ffffffff16565b613a8d565b61360483613eca565b61360f8a8a8a612ae5565b61361b8a600086612ae5565b6136488a600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685612ae5565b613650613fd0565b85156136d957600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166339071c9e6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156136c057600080fd5b505af11580156136d4573d6000803e3d6000fd5b505050505b50505050505050505050565b80601360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015613767576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161375e90615439565b60405180910390fd5b600080613775600085614059565b91509150811561380257600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166339071c9e6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156137e957600080fd5b505af11580156137fd573d6000803e3d6000fd5b505050505b61385483601360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546121d190919063ffffffff16565b601360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506138e983601360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461230190919063ffffffff16565b601360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613937858585612ae5565b80156139c057600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166339071c9e6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156139a757600080fd5b505af11580156139bb573d6000803e3d6000fd5b505050505b5050505050565b60008083141580156139da575060008214155b15613a30578183029050818382816139ee57fe5b0414613a2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613a26906154f9565b60405180910390fd5b5b92915050565b600080821415613a7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613a7290615139565b60405180910390fd5b818381613a8457fe5b04905092915050565b81601360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600e60010181905550600073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614613bc357600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663715885d88484846040518463ffffffff1660e01b8152600401613b9093929190614faf565b600060405180830381600087803b158015613baa57600080fd5b505af1158015613bbe573d6000803e3d6000fd5b505050505b505050565b600080600080613be96007600401600001548661416e90919063ffffffff16565b9050613c066007600201600001548661416e90919063ffffffff16565b9150613c236007600001600001548661416e90919063ffffffff16565b9250613c4a83613c3c838561230190919063ffffffff16565b61230190919063ffffffff16565b9350509193909250565b6000806000808414613ca7576000613c7585886121d190919063ffffffff16565b90506007600601548110613c8b57809650613ca5565b613c9e85876121d190919063ffffffff16565b9550600094505b505b85858592509250925093509350939050565b600080600080613cda6007600401600101548661416e90919063ffffffff16565b9050613cf76007600201600101548661416e90919063ffffffff16565b9150613d146007600001600101548661416e90919063ffffffff16565b9250613d3b83613d2d838561230190919063ffffffff16565b61230190919063ffffffff16565b9350509193909250565b83601360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081601360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600e60010181905550600073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614613ec357600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d6df5f3f86868686866040518663ffffffff1660e01b8152600401613e90959493929190614f5c565b600060405180830381600087803b158015613eaa57600080fd5b505af1158015613ebe573d6000803e3d6000fd5b505050505b5050505050565b60008114613fcd57613f468160136000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461230190919063ffffffff16565b60136000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613fc381600e6000015461230190919063ffffffff16565b600e600001819055505b50565b6000614006600e60010154613ff8600e60000154600e600301546121d190919063ffffffff16565b6121d190919063ffffffff16565b9050600e6002015481146140565780600e600201819055507f8629690313970e9e42939fc905246bd1ff3a69dae5efc961f8b40a91a838dffe8160405161404d91906155f8565b60405180910390a15b50565b600080600073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461416757600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632070e9ea85856040518363ffffffff1660e01b815260040161410f929190614f33565b604080518083038186803b15801561412657600080fd5b505afa15801561413a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061415e91906143f3565b80925081935050505b9250929050565b6000808314158015614181575060008214155b156141af576141ac606461419e84866139c790919063ffffffff16565b613a3690919063ffffffff16565b90505b92915050565b6000813590506141c48161581c565b92915050565b6000813590506141d981615833565b92915050565b60008083601f8401126141f157600080fd5b8235905067ffffffffffffffff81111561420a57600080fd5b60208301915083602082028301111561422257600080fd5b9250929050565b6000813590506142388161584a565b92915050565b60008151905061424d8161584a565b92915050565b60006040828403121561426557600080fd5b61426f60406156aa565b9050600061427f8482850161429f565b60008301525060206142938482850161429f565b60208301525092915050565b6000813590506142ae81615861565b92915050565b6000602082840312156142c657600080fd5b60006142d4848285016141b5565b91505092915050565b600080604083850312156142f057600080fd5b60006142fe858286016141b5565b925050602061430f858286016141b5565b9150509250929050565b60008060006060848603121561432e57600080fd5b600061433c868287016141b5565b935050602061434d868287016141b5565b925050604061435e8682870161429f565b9150509250925092565b60008060006060848603121561437d57600080fd5b600061438b868287016141b5565b935050602061439c86828701614229565b92505060406143ad86828701614229565b9150509250925092565b600080604083850312156143ca57600080fd5b60006143d8858286016141b5565b92505060206143e98582860161429f565b9150509250929050565b6000806040838503121561440657600080fd5b60006144148582860161423e565b92505060206144258582860161423e565b9150509250929050565b600080600060c0848603121561444457600080fd5b600061445286828701614253565b935050604061446386828701614253565b925050608061447486828701614253565b9150509250925092565b60008060008060008060008060006101608a8c03121561449d57600080fd5b60006144ab8c828d01614253565b99505060406144bc8c828d01614253565b98505060806144cd8c828d01614253565b97505060c06144de8c828d0161429f565b96505060e06144ef8c828d016141ca565b9550506101006145018c828d016141b5565b9450506101206145138c828d0161429f565b9350506101408a013567ffffffffffffffff81111561453157600080fd5b61453d8c828d016141df565b92509250509295985092959850929598565b60006020828403121561456157600080fd5b600061456f8482850161429f565b91505092915050565b6145818161575a565b82525050565b614590816156f3565b82525050565b61459f81615717565b82525050565b6145ae8161576c565b82525050565b6145bd81615790565b82525050565b60006145ce826156d7565b6145d881856156e2565b93506145e88185602086016157d8565b6145f18161580b565b840191505092915050565b60006146096010836156e2565b91507f4d6574616865726f546f6b656e233138000000000000000000000000000000006000830152602082019050919050565b6000614649600f836156e2565b91507f4d6574616865726f546f6b656e233400000000000000000000000000000000006000830152602082019050919050565b60006146896010836156e2565b91507f4d6574616865726f546f6b656e233139000000000000000000000000000000006000830152602082019050919050565b60006146c96010836156e2565b91507f4d6574616865726f546f6b656e233131000000000000000000000000000000006000830152602082019050919050565b6000614709600d836156e2565b91507f536166654d6174684c69622334000000000000000000000000000000000000006000830152602082019050919050565b60006147496010836156e2565b91507f4d6574616865726f546f6b656e233134000000000000000000000000000000006000830152602082019050919050565b6000614789600d836156e2565b91507f536166654d6174684c69622331000000000000000000000000000000000000006000830152602082019050919050565b60006147c96010836156e2565b91507f4d6574616865726f546f6b656e233232000000000000000000000000000000006000830152602082019050919050565b60006148096010836156e2565b91507f4d6574616865726f546f6b656e233133000000000000000000000000000000006000830152602082019050919050565b60006148496010836156e2565b91507f4d6574616865726f546f6b656e233137000000000000000000000000000000006000830152602082019050919050565b6000614889600f836156e2565b91507f4d6574616865726f546f6b656e233700000000000000000000000000000000006000830152602082019050919050565b60006148c9600f836156e2565b91507f4d6574616865726f546f6b656e233600000000000000000000000000000000006000830152602082019050919050565b60006149096010836156e2565b91507f4d6574616865726f546f6b656e233236000000000000000000000000000000006000830152602082019050919050565b60006149496010836156e2565b91507f4d6574616865726f546f6b656e233132000000000000000000000000000000006000830152602082019050919050565b60006149896010836156e2565b91507f4d6574616865726f546f6b656e233230000000000000000000000000000000006000830152602082019050919050565b60006149c9600f836156e2565b91507f4d6574616865726f546f6b656e233500000000000000000000000000000000006000830152602082019050919050565b6000614a09600d836156e2565b91507f536166654d6174684c69622332000000000000000000000000000000000000006000830152602082019050919050565b6000614a496010836156e2565b91507f4d6574616865726f546f6b656e233231000000000000000000000000000000006000830152602082019050919050565b6000614a89600f836156e2565b91507f4d6574616865726f546f6b656e233300000000000000000000000000000000006000830152602082019050919050565b6000614ac9600f836156e2565b91507f4d6574616865726f546f6b656e233200000000000000000000000000000000006000830152602082019050919050565b6000614b09600f836156e2565b91507f496e697469616c697a61626c65233200000000000000000000000000000000006000830152602082019050919050565b6000614b496010836156e2565b91507f4d6574616865726f546f6b656e233233000000000000000000000000000000006000830152602082019050919050565b6000614b89600f836156e2565b91507f496e697469616c697a61626c65233100000000000000000000000000000000006000830152602082019050919050565b6000614bc9600f836156e2565b91507f4d6574616865726f546f6b656e233800000000000000000000000000000000006000830152602082019050919050565b6000614c09600f836156e2565b91507f4d6574616865726f546f6b656e233900000000000000000000000000000000006000830152602082019050919050565b6000614c496007836156e2565b91507f4f776e65642333000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000614c896007836156e2565b91507f4f776e65642332000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000614cc9600c836156e2565b91507f436f6e74726f6c6c6564233100000000000000000000000000000000000000006000830152602082019050919050565b6000614d096010836156e2565b91507f4d6574616865726f546f6b656e233235000000000000000000000000000000006000830152602082019050919050565b6000614d496007836156e2565b91507f4f776e65642331000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000614d896010836156e2565b91507f4d6574616865726f546f6b656e233234000000000000000000000000000000006000830152602082019050919050565b6000614dc96010836156e2565b91507f4d6574616865726f546f6b656e233136000000000000000000000000000000006000830152602082019050919050565b6000614e09600f836156e2565b91507f4d6574616865726f546f6b656e233100000000000000000000000000000000006000830152602082019050919050565b6000614e496010836156e2565b91507f4d6574616865726f546f6b656e233135000000000000000000000000000000006000830152602082019050919050565b6000614e89600d836156e2565b91507f536166654d6174684c69622333000000000000000000000000000000000000006000830152602082019050919050565b604082016000820151614ed26000850182614eeb565b506020820151614ee56020850182614eeb565b50505050565b614ef481615743565b82525050565b614f0381615743565b82525050565b614f128161574d565b82525050565b6000602082019050614f2d6000830184614587565b92915050565b6000604082019050614f486000830185614587565b614f556020830184614587565b9392505050565b600060a082019050614f716000830188614587565b614f7e6020830187614efa565b614f8b6040830186614587565b614f986060830185614efa565b614fa56080830184614efa565b9695505050505050565b6000606082019050614fc46000830186614587565b614fd16020830185614efa565b614fde6040830184614efa565b949350505050565b6000602082019050614ffb6000830184614596565b92915050565b60006040820190506150166000830185614596565b6150236020830184614596565b9392505050565b600060608201905061503f6000830186614596565b61504c6020830185614596565b6150596040830184614596565b949350505050565b600060208201905061507660008301846145a5565b92915050565b600060208201905061509160008301846145b4565b92915050565b600060208201905081810360008301526150b181846145c3565b905092915050565b600060208201905081810360008301526150d2816145fc565b9050919050565b600060208201905081810360008301526150f28161463c565b9050919050565b600060208201905081810360008301526151128161467c565b9050919050565b60006020820190508181036000830152615132816146bc565b9050919050565b60006020820190508181036000830152615152816146fc565b9050919050565b600060208201905081810360008301526151728161473c565b9050919050565b600060208201905081810360008301526151928161477c565b9050919050565b600060208201905081810360008301526151b2816147bc565b9050919050565b600060208201905081810360008301526151d2816147fc565b9050919050565b600060208201905081810360008301526151f28161483c565b9050919050565b600060208201905081810360008301526152128161487c565b9050919050565b60006020820190508181036000830152615232816148bc565b9050919050565b60006020820190508181036000830152615252816148fc565b9050919050565b600060208201905081810360008301526152728161493c565b9050919050565b600060208201905081810360008301526152928161497c565b9050919050565b600060208201905081810360008301526152b2816149bc565b9050919050565b600060208201905081810360008301526152d2816149fc565b9050919050565b600060208201905081810360008301526152f281614a3c565b9050919050565b6000602082019050818103600083015261531281614a7c565b9050919050565b6000602082019050818103600083015261533281614abc565b9050919050565b6000602082019050818103600083015261535281614afc565b9050919050565b6000602082019050818103600083015261537281614b3c565b9050919050565b6000602082019050818103600083015261539281614b7c565b9050919050565b600060208201905081810360008301526153b281614bbc565b9050919050565b600060208201905081810360008301526153d281614bfc565b9050919050565b600060208201905081810360008301526153f281614c3c565b9050919050565b6000602082019050818103600083015261541281614c7c565b9050919050565b6000602082019050818103600083015261543281614cbc565b9050919050565b6000602082019050818103600083015261545281614cfc565b9050919050565b6000602082019050818103600083015261547281614d3c565b9050919050565b6000602082019050818103600083015261549281614d7c565b9050919050565b600060208201905081810360008301526154b281614dbc565b9050919050565b600060208201905081810360008301526154d281614dfc565b9050919050565b600060208201905081810360008301526154f281614e3c565b9050919050565b6000602082019050818103600083015261551281614e7c565b9050919050565b600060c08201905061552e6000830186614ebc565b61553b6040830185614ebc565b6155486080830184614ebc565b949350505050565b600060e0820190506155656000830187614ebc565b6155726040830186614ebc565b61557f6080830185614ebc565b61558c60c0830184614efa565b95945050505050565b6000610120820190506155ab6000830189614ebc565b6155b86040830188614ebc565b6155c56080830187614ebc565b6155d260c0830186614efa565b6155df60e0830185614578565b6155ed610100830184614587565b979650505050505050565b600060208201905061560d6000830184614efa565b92915050565b60006060820190506156286000830186614efa565b6156356020830185614efa565b6156426040830184614efa565b949350505050565b600060808201905061565f6000830187614efa565b61566c6020830186614efa565b6156796040830185614efa565b6156866060830184614efa565b95945050505050565b60006020820190506156a46000830184614f09565b92915050565b6000604051905081810181811067ffffffffffffffff821117156156cd57600080fd5b8060405250919050565b600081519050919050565b600082825260208201905092915050565b60006156fe82615723565b9050919050565b600061571082615723565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000615765826157b4565b9050919050565b60006157778261577e565b9050919050565b600061578982615723565b9050919050565b600061579b826157a2565b9050919050565b60006157ad82615723565b9050919050565b60006157bf826157c6565b9050919050565b60006157d182615723565b9050919050565b60005b838110156157f65780820151818401526020810190506157db565b83811115615805576000848401525b50505050565b6000601f19601f8301169050919050565b615825816156f3565b811461583057600080fd5b50565b61583c81615705565b811461584757600080fd5b50565b61585381615717565b811461585e57600080fd5b50565b61586a81615743565b811461587557600080fd5b5056fea164736f6c634300060c000a",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Stanisław Głogowski <stan@metahero.io>",
    "events": {
      "AccountExcluded(address,bool,bool)": {
        "details": "Emitted when account is excluded",
        "params": {
          "account": "account address",
          "excludeRecipientFromFee": "exclude recipient from fee",
          "excludeSenderFromFee": "exclude sender from fee"
        }
      },
      "DAOUpdated(address)": {
        "details": "Emitted when the dao is updated",
        "params": {
          "dao": "dao address"
        }
      },
      "FeesUpdated((uint256,uint256),(uint256,uint256),(uint256,uint256))": {
        "details": "Emitted when fees are updated",
        "params": {
          "burnFees": "burn fees",
          "lpFees": "liquidity pool fees",
          "rewardsFees": "rewards fees"
        }
      },
      "Initialized((uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,address,address)": {
        "details": "Emitted when the contract is initialized",
        "params": {
          "burnFees": "burn fees",
          "controller": "controller address",
          "lpFees": "liquidity pool fees",
          "lpm": "liquidity pool manager address",
          "minTotalSupply": "min total supply",
          "rewardsFees": "rewards fees"
        }
      },
      "PresaleFinished()": {
        "details": "Emitted when the presale is finished"
      },
      "TotalRewardsUpdated(uint256)": {
        "details": "Emitted when total rewards amount is updated",
        "params": {
          "totalRewards": "total rewards amount"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "Gets allowance",
        "params": {
          "owner": "owner address",
          "spender": "spender address"
        },
        "returns": {
          "_0": "allowance"
        }
      },
      "approve(address,uint256)": {
        "details": "Approve spending limit",
        "params": {
          "amount": "spending limit",
          "spender": "spender address"
        }
      },
      "balanceOf(address)": {
        "details": "Gets balance of",
        "params": {
          "account": "account address"
        },
        "returns": {
          "result": "account balance"
        }
      },
      "burn(uint256)": {
        "details": "Burns tokens from msg.sender",
        "params": {
          "amount": "tokens amount"
        }
      },
      "burnFrom(address,uint256)": {
        "details": "Burns tokens from sender",
        "params": {
          "amount": "tokens amount",
          "sender": "sender address"
        }
      },
      "constructor": {
        "details": "Public constructor"
      },
      "excludeAccount(address,bool,bool)": {
        "details": "Excludes account",
        "params": {
          "account": "account address",
          "excludeRecipientFromFee": "exclude recipient from fee",
          "excludeSenderFromFee": "exclude sender from fee"
        }
      },
      "getBalanceSummary(address)": {
        "details": "Gets balance summary",
        "params": {
          "account": "account address"
        }
      },
      "getExcludedAccount(address)": {
        "details": "Gets excluded account",
        "params": {
          "account": "account address"
        }
      },
      "initialize((uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,address,address,uint256,address[])": {
        "details": "Initializes the contract",
        "params": {
          "burnFees": "burn fees",
          "controller_": "controller address",
          "lpFees": "liquidity pool fees",
          "lpm_": "liquidity pool manager address",
          "minTotalSupply": "min total supply",
          "rewardsFees": "rewards fees",
          "totalSupply_": "total supply"
        }
      },
      "initialized()": {
        "returns": {
          "_0": "true when contract is initialized"
        }
      },
      "mintTo(address,uint256)": {
        "details": "Mints tokens to recipient",
        "params": {
          "amount": "tokens amount",
          "recipient": "recipient address"
        }
      },
      "setDAO(address)": {
        "details": "Sets the dao",
        "params": {
          "dao_": "dao address"
        }
      },
      "setOwner(address)": {
        "params": {
          "owner_": "owner address"
        }
      },
      "setPresaleAsFinished()": {
        "details": "Set the presale as finished"
      },
      "totalSupply()": {
        "details": "Gets total supply",
        "returns": {
          "_0": "total supply"
        }
      },
      "transfer(address,uint256)": {
        "details": "Transfers tokens to recipient",
        "params": {
          "amount": "tokens amount",
          "recipient": "recipient address"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers tokens from sender to recipient",
        "params": {
          "amount": "tokens amount",
          "recipient": "recipient address",
          "sender": "sender address"
        }
      },
      "updateFees((uint256,uint256),(uint256,uint256),(uint256,uint256))": {
        "details": "Updates fees",
        "params": {
          "burnFees": "burn fees",
          "lpFees": "liquidity pool fees",
          "rewardsFees": "rewards fees"
        }
      }
    },
    "stateVariables": {
      "dao": {
        "return": "dao address"
      },
      "lpm": {
        "return": "liquidity pool manager address"
      },
      "presaleFinished": {
        "return": "return true when presale is finished"
      },
      "settings": {
        "return": "settings object"
      },
      "summary": {
        "return": "summary object"
      }
    },
    "title": "Metahero token",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initialized()": {
        "notice": "Checks if contract is initialized"
      },
      "setOwner(address)": {
        "notice": "Sets a new owner"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3876,
        "contract": "src/MetaheroToken.sol:MetaheroToken",
        "label": "controller",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4117,
        "contract": "src/MetaheroToken.sol:MetaheroToken",
        "label": "owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4224,
        "contract": "src/MetaheroToken.sol:MetaheroToken",
        "label": "name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 4227,
        "contract": "src/MetaheroToken.sol:MetaheroToken",
        "label": "symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 4230,
        "contract": "src/MetaheroToken.sol:MetaheroToken",
        "label": "decimals",
        "offset": 0,
        "slot": "4",
        "type": "t_uint8"
      },
      {
        "astId": 4704,
        "contract": "src/MetaheroToken.sol:MetaheroToken",
        "label": "initializer",
        "offset": 1,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 1619,
        "contract": "src/MetaheroToken.sol:MetaheroToken",
        "label": "dao",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IMetaheroDAO)27"
      },
      {
        "astId": 1622,
        "contract": "src/MetaheroToken.sol:MetaheroToken",
        "label": "lpm",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(MetaheroLPM)225"
      },
      {
        "astId": 1625,
        "contract": "src/MetaheroToken.sol:MetaheroToken",
        "label": "settings",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(Settings)1588_storage"
      },
      {
        "astId": 1628,
        "contract": "src/MetaheroToken.sol:MetaheroToken",
        "label": "summary",
        "offset": 0,
        "slot": "14",
        "type": "t_struct(Summary)1597_storage"
      },
      {
        "astId": 1631,
        "contract": "src/MetaheroToken.sol:MetaheroToken",
        "label": "presaleFinished",
        "offset": 0,
        "slot": "18",
        "type": "t_bool"
      },
      {
        "astId": 1635,
        "contract": "src/MetaheroToken.sol:MetaheroToken",
        "label": "accountBalances",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1641,
        "contract": "src/MetaheroToken.sol:MetaheroToken",
        "label": "accountAllowances",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1645,
        "contract": "src/MetaheroToken.sol:MetaheroToken",
        "label": "excludedAccounts",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_struct(ExcludedAccount)1604_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IMetaheroDAO)27": {
        "encoding": "inplace",
        "label": "contract IMetaheroDAO",
        "numberOfBytes": "20"
      },
      "t_contract(MetaheroLPM)225": {
        "encoding": "inplace",
        "label": "contract MetaheroLPM",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(ExcludedAccount)1604_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MetaheroToken.ExcludedAccount)",
        "numberOfBytes": "32",
        "value": "t_struct(ExcludedAccount)1604_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ExcludedAccount)1604_storage": {
        "encoding": "inplace",
        "label": "struct MetaheroToken.ExcludedAccount",
        "members": [
          {
            "astId": 1599,
            "contract": "src/MetaheroToken.sol:MetaheroToken",
            "label": "exists",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1601,
            "contract": "src/MetaheroToken.sol:MetaheroToken",
            "label": "excludeSenderFromFee",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1603,
            "contract": "src/MetaheroToken.sol:MetaheroToken",
            "label": "excludeRecipientFromFee",
            "offset": 2,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Fees)1579_storage": {
        "encoding": "inplace",
        "label": "struct MetaheroToken.Fees",
        "members": [
          {
            "astId": 1576,
            "contract": "src/MetaheroToken.sol:MetaheroToken",
            "label": "sender",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1578,
            "contract": "src/MetaheroToken.sol:MetaheroToken",
            "label": "recipient",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Settings)1588_storage": {
        "encoding": "inplace",
        "label": "struct MetaheroToken.Settings",
        "members": [
          {
            "astId": 1581,
            "contract": "src/MetaheroToken.sol:MetaheroToken",
            "label": "burnFees",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Fees)1579_storage"
          },
          {
            "astId": 1583,
            "contract": "src/MetaheroToken.sol:MetaheroToken",
            "label": "lpFees",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(Fees)1579_storage"
          },
          {
            "astId": 1585,
            "contract": "src/MetaheroToken.sol:MetaheroToken",
            "label": "rewardsFees",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(Fees)1579_storage"
          },
          {
            "astId": 1587,
            "contract": "src/MetaheroToken.sol:MetaheroToken",
            "label": "minTotalSupply",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Summary)1597_storage": {
        "encoding": "inplace",
        "label": "struct MetaheroToken.Summary",
        "members": [
          {
            "astId": 1590,
            "contract": "src/MetaheroToken.sol:MetaheroToken",
            "label": "totalExcluded",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1592,
            "contract": "src/MetaheroToken.sol:MetaheroToken",
            "label": "totalHolding",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1594,
            "contract": "src/MetaheroToken.sol:MetaheroToken",
            "label": "totalRewards",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1596,
            "contract": "src/MetaheroToken.sol:MetaheroToken",
            "label": "totalSupply",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}