{
  "address": "0x79c285c5c447Ecaf5a651147b3f35f25c63FDd87",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "getAllowances",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "allowancesTokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "balancesTokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "getAllowancesAndBalances",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getBalances",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2f58042ac5697fa01e2b25cb31e94465a39e1ab67af98be78908cf077ec02c37",
  "receipt": {
    "to": null,
    "from": "0x1e3026E29D54bC1F3Ebe83AfBBE0b7567741EaD2",
    "contractAddress": "0x79c285c5c447Ecaf5a651147b3f35f25c63FDd87",
    "transactionIndex": 20,
    "gasUsed": "480518",
    "logsBloom": "0x
    "blockHash": "0x1263bc5d84b3160eb35c8778159f1cc72adc2583a60b59d321c54bef38ddc82a",
    "transactionHash": "0x2f58042ac5697fa01e2b25cb31e94465a39e1ab67af98be78908cf077ec02c37",
    "logs": [],
    "blockNumber": 22120337,
    "cumulativeGasUsed": "2450882",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6e906c6c2f1b3f51361011c29ec56366",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"getAllowances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"allowancesTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"balancesTokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"getAllowancesAndBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Stanis\\u0142aw G\\u0142ogowski <stan@metahero.io>\",\"kind\":\"dev\",\"methods\":{},\"title\":\"ERC20 Helper\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/ERC20Helper.sol\":\"ERC20Helper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"src/ERC20Helper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @title ERC20 Helper\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@metahero.io>\\n */\\ncontract ERC20Helper {\\n  using Address for address;\\n\\n  // constructor\\n\\n  constructor() {\\n    //\\n  }\\n\\n  // external functions (views)\\n\\n  function getAllowances(\\n    address[] calldata tokens,\\n    address account,\\n    address spender\\n  ) external view returns (uint256[] memory) {\\n    return _getAllowances(tokens, account, spender);\\n  }\\n\\n  function getBalances(address[] calldata tokens, address account)\\n    external\\n    view\\n    returns (uint256[] memory)\\n  {\\n    return _getBalances(tokens, account);\\n  }\\n\\n  function getAllowancesAndBalances(\\n    address[] calldata allowancesTokens,\\n    address[] calldata balancesTokens,\\n    address account,\\n    address spender\\n  ) external view returns (uint256[] memory, uint256[] memory) {\\n    return (\\n      _getAllowances(allowancesTokens, account, spender),\\n      _getBalances(balancesTokens, account)\\n    );\\n  }\\n\\n  // private functions (views)\\n\\n  function _getAllowances(\\n    address[] memory tokens,\\n    address account,\\n    address spender\\n  ) private view returns (uint256[] memory result) {\\n    uint256 len = tokens.length;\\n\\n    result = new uint256[](len);\\n\\n    for (uint256 index; index < len; ) {\\n      address token = tokens[index];\\n\\n      if (token.isContract()) {\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool methodExists, bytes memory methodResponse) = token.staticcall(\\n          abi.encodeWithSelector(\\n            IERC20(token).allowance.selector,\\n            account,\\n            spender\\n          )\\n        );\\n\\n        if (methodExists) {\\n          (result[index]) = abi.decode(methodResponse, (uint256));\\n        }\\n      }\\n\\n      unchecked {\\n        ++index;\\n      }\\n    }\\n\\n    return result;\\n  }\\n\\n  function _getBalances(address[] memory tokens, address account)\\n    private\\n    view\\n    returns (uint256[] memory result)\\n  {\\n    uint256 len = tokens.length;\\n\\n    result = new uint256[](len);\\n\\n    for (uint256 index; index < len; index) {\\n      address token = tokens[index];\\n\\n      if (token == address(0)) {\\n        result[index] = payable(account).balance;\\n      } else if (token.isContract()) {\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool methodExists, bytes memory methodResponse) = token.staticcall(\\n          abi.encodeWithSelector(IERC20(token).balanceOf.selector, account)\\n        );\\n\\n        if (methodExists) {\\n          (result[index]) = abi.decode(methodResponse, (uint256));\\n        }\\n      }\\n\\n      unchecked {\\n        ++index;\\n      }\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0xac187b848257286e645b1b3a869b9125d767d9d5bfa57755983e482b3f27e980\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506107bb806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80634687c7e814610046578063b69a985014610070578063d1c0702814610090575b600080fd5b61005961005436600461056b565b6100a3565b604051610067929190610636565b60405180910390f35b61008361007e36600461065b565b610133565b60405161006791906106c0565b61008361009e3660046106da565b61017e565b6060806100e68888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508892508791506101c69050565b61012487878080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525089925061034d915050565b91509150965096945050505050565b60606101758585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508792508691506101c69050565b95945050505050565b60606101be84848080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525086925061034d915050565b949350505050565b82516060908067ffffffffffffffff8111156101e4576101e461072e565b60405190808252806020026020018201604052801561020d578160200160208202803683370190505b50915060005b8181101561034457600086828151811061022f5761022f610744565b60200260200101519050610255816001600160a01b03166001600160a01b03163b151590565b1561033b57604080516001600160a01b03888116602483015287811660448084019190915283518084039091018152606490920183526020820180516001600160e01b0316636eb1769f60e11b17905291516000928392908516916102ba919061075a565b600060405180830381855afa9150503d80600081146102f5576040519150601f19603f3d011682016040523d82523d6000602084013e6102fa565b606091505b5091509150811561033857808060200190518101906103199190610795565b86858151811061032b5761032b610744565b6020026020010181815250505b50505b50600101610213565b50509392505050565b81516060908067ffffffffffffffff81111561036b5761036b61072e565b604051908082528060200260200182016040528015610394578160200160208202803683370190505b50915060005b818110156104fb5760008582815181106103b6576103b6610744565b6020026020010151905060006001600160a01b0316816001600160a01b0316141561040957846001600160a01b0316318483815181106103f8576103f8610744565b6020026020010181815250506104f2565b6001600160a01b0381163b156104f257604080516001600160a01b0387811660248084019190915283518084039091018152604490920183526020820180516001600160e01b03166370a0823160e01b1790529151600092839290851691610471919061075a565b600060405180830381855afa9150503d80600081146104ac576040519150601f19603f3d011682016040523d82523d6000602084013e6104b1565b606091505b509150915081156104ef57808060200190518101906104d09190610795565b8685815181106104e2576104e2610744565b6020026020010181815250505b50505b5060010161039a565b505092915050565b60008083601f84011261051557600080fd5b50813567ffffffffffffffff81111561052d57600080fd5b6020830191508360208260051b850101111561054857600080fd5b9250929050565b80356001600160a01b038116811461056657600080fd5b919050565b6000806000806000806080878903121561058457600080fd5b863567ffffffffffffffff8082111561059c57600080fd5b6105a88a838b01610503565b909850965060208901359150808211156105c157600080fd5b506105ce89828a01610503565b90955093506105e190506040880161054f565b91506105ef6060880161054f565b90509295509295509295565b600081518084526020808501945080840160005b8381101561062b5781518752958201959082019060010161060f565b509495945050505050565b60408152600061064960408301856105fb565b828103602084015261017581856105fb565b6000806000806060858703121561067157600080fd5b843567ffffffffffffffff81111561068857600080fd5b61069487828801610503565b90955093506106a790506020860161054f565b91506106b56040860161054f565b905092959194509250565b6020815260006106d360208301846105fb565b9392505050565b6000806000604084860312156106ef57600080fd5b833567ffffffffffffffff81111561070657600080fd5b61071286828701610503565b909450925061072590506020850161054f565b90509250925092565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000825160005b8181101561077b5760208186018101518583015201610761565b8181111561078a576000828501525b509190910192915050565b6000602082840312156107a757600080fd5b505191905056fea164736f6c6343000809000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80634687c7e814610046578063b69a985014610070578063d1c0702814610090575b600080fd5b61005961005436600461056b565b6100a3565b604051610067929190610636565b60405180910390f35b61008361007e36600461065b565b610133565b60405161006791906106c0565b61008361009e3660046106da565b61017e565b6060806100e68888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508892508791506101c69050565b61012487878080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525089925061034d915050565b91509150965096945050505050565b60606101758585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508792508691506101c69050565b95945050505050565b60606101be84848080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525086925061034d915050565b949350505050565b82516060908067ffffffffffffffff8111156101e4576101e461072e565b60405190808252806020026020018201604052801561020d578160200160208202803683370190505b50915060005b8181101561034457600086828151811061022f5761022f610744565b60200260200101519050610255816001600160a01b03166001600160a01b03163b151590565b1561033b57604080516001600160a01b03888116602483015287811660448084019190915283518084039091018152606490920183526020820180516001600160e01b0316636eb1769f60e11b17905291516000928392908516916102ba919061075a565b600060405180830381855afa9150503d80600081146102f5576040519150601f19603f3d011682016040523d82523d6000602084013e6102fa565b606091505b5091509150811561033857808060200190518101906103199190610795565b86858151811061032b5761032b610744565b6020026020010181815250505b50505b50600101610213565b50509392505050565b81516060908067ffffffffffffffff81111561036b5761036b61072e565b604051908082528060200260200182016040528015610394578160200160208202803683370190505b50915060005b818110156104fb5760008582815181106103b6576103b6610744565b6020026020010151905060006001600160a01b0316816001600160a01b0316141561040957846001600160a01b0316318483815181106103f8576103f8610744565b6020026020010181815250506104f2565b6001600160a01b0381163b156104f257604080516001600160a01b0387811660248084019190915283518084039091018152604490920183526020820180516001600160e01b03166370a0823160e01b1790529151600092839290851691610471919061075a565b600060405180830381855afa9150503d80600081146104ac576040519150601f19603f3d011682016040523d82523d6000602084013e6104b1565b606091505b509150915081156104ef57808060200190518101906104d09190610795565b8685815181106104e2576104e2610744565b6020026020010181815250505b50505b5060010161039a565b505092915050565b60008083601f84011261051557600080fd5b50813567ffffffffffffffff81111561052d57600080fd5b6020830191508360208260051b850101111561054857600080fd5b9250929050565b80356001600160a01b038116811461056657600080fd5b919050565b6000806000806000806080878903121561058457600080fd5b863567ffffffffffffffff8082111561059c57600080fd5b6105a88a838b01610503565b909850965060208901359150808211156105c157600080fd5b506105ce89828a01610503565b90955093506105e190506040880161054f565b91506105ef6060880161054f565b90509295509295509295565b600081518084526020808501945080840160005b8381101561062b5781518752958201959082019060010161060f565b509495945050505050565b60408152600061064960408301856105fb565b828103602084015261017581856105fb565b6000806000806060858703121561067157600080fd5b843567ffffffffffffffff81111561068857600080fd5b61069487828801610503565b90955093506106a790506020860161054f565b91506106b56040860161054f565b905092959194509250565b6020815260006106d360208301846105fb565b9392505050565b6000806000604084860312156106ef57600080fd5b833567ffffffffffffffff81111561070657600080fd5b61071286828701610503565b909450925061072590506020850161054f565b90509250925092565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000825160005b8181101561077b5760208186018101518583015201610761565b8181111561078a576000828501525b509190910192915050565b6000602082840312156107a757600080fd5b505191905056fea164736f6c6343000809000a",
  "devdoc": {
    "author": "Stanisław Głogowski <stan@metahero.io>",
    "kind": "dev",
    "methods": {},
    "title": "ERC20 Helper",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}