{
  "language": "Solidity",
  "sources": {
    "src/constants.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nuint256 constant MAX_PERCENTAGE = 100_000;\n\nuint256 constant YEAR_TIME = 365 days;\n"
    },
    "src/MetaheroLoyaltyTokenDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@metahero/common-contracts/src/access/Ownable.sol\";\nimport \"@metahero/common-contracts/src/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"./MetaheroLoyaltyToken.sol\";\nimport \"./constants.sol\";\n\n/**\n * @title Metahero Loyalty Token (distributor)\n *\n * @author Stanisław Głogowski <stan@metahero.io>\n */\ncontract MetaheroLoyaltyTokenDistributor is Ownable, Initializable, Context {\n  using MerkleProof for bytes32[];\n\n  enum DistributionStates {\n    Ready,\n    Paused,\n    Finished\n  }\n\n  enum InvitationStates {\n    Unknown,\n    Added,\n    Removed\n  }\n\n  struct Invitation {\n    InvitationStates state;\n    bytes32 treeRoot;\n    uint256 depositPower;\n    uint256 minDeposit;\n    uint256 maxDeposit;\n    uint256 minRewardsAPY;\n    uint256 maxRewardsAPY;\n    uint256 minWithdrawalLockTime;\n    uint256 maxWithdrawalLockTime;\n  }\n\n  // constants\n\n  uint256 private constant DEPOSIT_MAX_POWER = 100;\n\n  // state variables\n\n  DistributionStates private _distributionState;\n\n  MetaheroLoyaltyToken private _loyaltyToken;\n\n  IERC20 private _paymentToken;\n\n  mapping(uint256 => Invitation) private _invitations;\n\n  mapping(uint256 => mapping(address => bool)) private _usedInvitation;\n\n  // errors\n\n  error DistributionIsFinished();\n  error DistributionIsNotReady();\n  error InvalidDeposit();\n  error InvalidDepositPower();\n  error InvalidInvitationId();\n  error InvalidInvitationProof();\n  error InvalidMaxDeposit();\n  error InvalidMaxRewardsAPY();\n  error InvalidMaxWithdrawalLockTime();\n  error InvalidMinDeposit();\n  error InvalidMinWithdrawalLockTime();\n  error InvalidWithdrawalLockTime();\n  error InvitationAlreadyExists();\n  error InvitationAlreadyUsed();\n  error InvitationDoesntExist();\n  error LoyaltyTokenIsTheZeroAddress();\n  error NoRewardsToRelease();\n  error PaymentTokenIsTheZeroAddress();\n\n  // events\n\n  event Initialized(address loyaltyToken, address paymentToken);\n\n  event DistributionStateUpdated(DistributionStates distributionState);\n\n  event RewardsReleased(uint256 rewards);\n\n  event InvitationAdded(\n    uint256 invitationId,\n    bytes32 treeRoot,\n    uint256 depositPower,\n    uint256 minDeposit,\n    uint256 maxDeposit,\n    uint256 minRewardsAPY,\n    uint256 maxRewardsAPY,\n    uint256 minWithdrawalLockTime,\n    uint256 maxWithdrawalLockTime\n  );\n\n  event InvitationRemoved(uint256 invitationId);\n\n  event InvitationUsed(uint256 invitationId, uint256 tokenId, address owner);\n\n  // modifiers\n\n  modifier onlyWhenReady() {\n    if (_distributionState != DistributionStates.Ready) {\n      revert DistributionIsNotReady();\n    }\n\n    _;\n  }\n\n  modifier onlyWhenNotFinished() {\n    if (_distributionState == DistributionStates.Finished) {\n      revert DistributionIsFinished();\n    }\n\n    _;\n  }\n\n  // constructor\n\n  constructor() Ownable() Initializable() {\n    //\n  }\n\n  // initialize\n\n  function initialize(address loyaltyToken, address paymentToken)\n    external\n    initializer\n  {\n    if (loyaltyToken == address(0)) {\n      revert LoyaltyTokenIsTheZeroAddress();\n    }\n\n    if (paymentToken == address(0)) {\n      revert PaymentTokenIsTheZeroAddress();\n    }\n\n    _loyaltyToken = MetaheroLoyaltyToken(loyaltyToken);\n\n    _paymentToken = IERC20(paymentToken);\n\n    emit Initialized(loyaltyToken, paymentToken);\n  }\n\n  // external functions (views)\n\n  function getDistributionState() external view returns (DistributionStates) {\n    return _distributionState;\n  }\n\n  function getInvitation(uint256 invitationId)\n    external\n    view\n    returns (Invitation memory)\n  {\n    return _invitations[invitationId];\n  }\n\n  function getInvitations(uint256[] calldata invitationIds)\n    external\n    view\n    returns (Invitation[] memory result)\n  {\n    uint256 len = invitationIds.length;\n\n    result = new Invitation[](len);\n\n    for (uint256 index; index < len; ) {\n      result[index] = _invitations[invitationIds[index]];\n\n      unchecked {\n        ++index;\n      }\n    }\n\n    return result;\n  }\n\n  function isInvitationInUse(uint256 invitationId, address account)\n    external\n    view\n    returns (bool)\n  {\n    return _usedInvitation[invitationId][account];\n  }\n\n  // external functions\n\n  function setDistributionState(DistributionStates distributionState)\n    external\n    onlyOwner\n    onlyWhenNotFinished\n  {\n    _distributionState = distributionState;\n\n    emit DistributionStateUpdated(distributionState);\n  }\n\n  function releaseRewards() external onlyOwner {\n    uint256 rewards = _paymentToken.balanceOf(address(this));\n\n    if (rewards == 0) {\n      revert NoRewardsToRelease();\n    }\n\n    _paymentToken.transfer(_owner, rewards);\n\n    emit RewardsReleased(rewards);\n  }\n\n  function addInvitation(\n    uint256 invitationId,\n    bytes32 treeRoot,\n    uint256 depositPower,\n    uint256 minDeposit,\n    uint256 maxDeposit,\n    uint256 minRewardsAPY,\n    uint256 maxRewardsAPY,\n    uint256 minWithdrawalLockTime,\n    uint256 maxWithdrawalLockTime\n  ) external onlyOwner onlyWhenNotFinished {\n    if (invitationId == 0) {\n      revert InvalidInvitationId();\n    }\n\n    if (_invitations[invitationId].state != InvitationStates.Unknown) {\n      revert InvitationAlreadyExists();\n    }\n\n    if (depositPower == 0 || depositPower > DEPOSIT_MAX_POWER) {\n      revert InvalidDepositPower();\n    }\n\n    if (minDeposit == 0) {\n      revert InvalidMinDeposit();\n    }\n\n    if (maxDeposit < minDeposit) {\n      revert InvalidMaxDeposit();\n    }\n\n    if (minRewardsAPY == 0) {\n      if (maxRewardsAPY != 0) {\n        revert InvalidMaxRewardsAPY();\n      }\n\n      if (maxWithdrawalLockTime != minWithdrawalLockTime) {\n        revert InvalidMaxWithdrawalLockTime();\n      }\n    } else {\n      if (maxRewardsAPY < minRewardsAPY) {\n        revert InvalidMaxRewardsAPY();\n      }\n\n      if (minWithdrawalLockTime == 0) {\n        revert InvalidMinWithdrawalLockTime();\n      }\n\n      if (maxWithdrawalLockTime < minWithdrawalLockTime) {\n        revert InvalidMaxWithdrawalLockTime();\n      }\n    }\n\n    _invitations[invitationId].state = InvitationStates.Added;\n    _invitations[invitationId].treeRoot = treeRoot;\n    _invitations[invitationId].depositPower = depositPower;\n    _invitations[invitationId].minDeposit = minDeposit;\n    _invitations[invitationId].maxDeposit = maxDeposit;\n    _invitations[invitationId].minRewardsAPY = minRewardsAPY;\n    _invitations[invitationId].maxRewardsAPY = maxRewardsAPY;\n    _invitations[invitationId].minWithdrawalLockTime = minWithdrawalLockTime;\n    _invitations[invitationId].maxWithdrawalLockTime = maxWithdrawalLockTime;\n\n    emit InvitationAdded(\n      invitationId,\n      treeRoot,\n      depositPower,\n      minDeposit,\n      maxDeposit,\n      minRewardsAPY,\n      maxRewardsAPY,\n      minWithdrawalLockTime,\n      maxWithdrawalLockTime\n    );\n  }\n\n  function removeInvitation(uint256 invitationId) external onlyOwner {\n    if (invitationId == 0) {\n      revert InvalidInvitationId();\n    }\n\n    Invitation storage invitation = _invitations[invitationId];\n\n    if (invitation.state != InvitationStates.Added) {\n      revert InvitationDoesntExist();\n    }\n\n    invitation.state = InvitationStates.Removed;\n\n    emit InvitationRemoved(invitationId);\n  }\n\n  function useInvitation(\n    uint256 invitationId,\n    uint256 deposit,\n    uint256 withdrawalLockTime,\n    bytes32[] memory proof\n  ) external onlyWhenReady {\n    if (invitationId == 0) {\n      revert InvalidInvitationId();\n    }\n\n    Invitation memory invitation = _invitations[invitationId];\n\n    if (invitation.state != InvitationStates.Added) {\n      revert InvitationDoesntExist();\n    }\n\n    if (deposit < invitation.minDeposit || deposit > invitation.maxDeposit) {\n      revert InvalidDeposit();\n    }\n\n    if (\n      withdrawalLockTime < invitation.minWithdrawalLockTime ||\n      withdrawalLockTime > invitation.maxWithdrawalLockTime\n    ) {\n      revert InvalidWithdrawalLockTime();\n    }\n\n    address sender = _msgSender();\n\n    if (\n      !proof.verify(invitation.treeRoot, keccak256(abi.encodePacked(sender)))\n    ) {\n      revert InvalidInvitationProof();\n    }\n\n    if (_usedInvitation[invitationId][sender]) {\n      revert InvitationAlreadyUsed();\n    }\n\n    uint256 rewards;\n    uint256 weight;\n    uint256 unlockWithdrawalAt;\n\n    {\n      uint256 rewardsAPY;\n\n      if (\n        withdrawalLockTime == invitation.minWithdrawalLockTime //\n      ) {\n        rewardsAPY = invitation.minRewardsAPY;\n      } else if (\n        withdrawalLockTime == invitation.maxWithdrawalLockTime //\n      ) {\n        rewardsAPY = invitation.maxRewardsAPY;\n      } else {\n        unchecked {\n          rewardsAPY =\n            invitation.minRewardsAPY +\n            ((invitation.maxRewardsAPY - invitation.minRewardsAPY) *\n              (withdrawalLockTime - invitation.minWithdrawalLockTime)) /\n            (invitation.maxWithdrawalLockTime -\n              invitation.minWithdrawalLockTime);\n        }\n      }\n\n      unchecked {\n        rewards =\n          (deposit * rewardsAPY * withdrawalLockTime) /\n          (MAX_PERCENTAGE * YEAR_TIME);\n      }\n\n      uint256 availableRewards = _paymentToken.balanceOf(address(this));\n\n      if (rewards > availableRewards) {\n        rewards = 0;\n        withdrawalLockTime = invitation.minWithdrawalLockTime;\n      }\n    }\n\n    unchecked {\n      weight = invitation.depositPower * deposit;\n      unlockWithdrawalAt = block.timestamp + withdrawalLockTime;\n    }\n\n    uint256 tokenId = _loyaltyToken.mintToken(\n      sender,\n      deposit,\n      rewards,\n      weight,\n      unlockWithdrawalAt\n    );\n\n    _usedInvitation[invitationId][sender] = true;\n\n    _paymentToken.transferFrom(sender, address(_loyaltyToken), deposit);\n\n    if (rewards != 0) {\n      _paymentToken.transfer(address(_loyaltyToken), rewards);\n    }\n\n    emit InvitationUsed(invitationId, tokenId, sender);\n  }\n}\n"
    },
    "@metahero/common-contracts/src/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nabstract contract Ownable {\n  address internal _owner;\n\n  // events\n\n  event OwnerUpdated(address owner);\n\n  // errors\n\n  error MsgSenderIsNotTheOwner();\n  error OwnerIsTheZeroAddress();\n\n  // modifiers\n\n  modifier onlyOwner() {\n    if (msg.sender != _owner) {\n      revert MsgSenderIsNotTheOwner();\n    }\n\n    _;\n  }\n\n  // constructor\n\n  constructor() {\n    _owner = msg.sender;\n  }\n\n  // external functions (views)\n\n  function getOwner() external view returns (address) {\n    return _owner;\n  }\n\n  // external functions\n\n  function setOwner(address owner) external onlyOwner {\n    if (owner == address(0)) {\n      revert OwnerIsTheZeroAddress();\n    }\n\n    _owner = owner;\n\n    emit OwnerUpdated(owner);\n  }\n}\n"
    },
    "@metahero/common-contracts/src/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nabstract contract Initializable {\n  address private _deployer;\n\n  // errors\n\n  error AlreadyInitialized();\n  error MsgSenderIsNotTheDeployer();\n\n  // modifiers\n\n  modifier initializer() {\n    if (_deployer == address(0)) {\n      revert AlreadyInitialized();\n    }\n\n    if (msg.sender != _deployer) {\n      revert MsgSenderIsNotTheDeployer();\n    }\n\n    _deployer = address(0);\n\n    _;\n  }\n\n  // constructor\n\n  constructor() {\n    _deployer = msg.sender;\n  }\n\n  // external functions (views)\n\n  function initialized() external view returns (bool) {\n    return _deployer == address(0);\n  }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = _efficientHash(computedHash, proofElement);\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = _efficientHash(proofElement, computedHash);\n            }\n        }\n        return computedHash;\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "src/MetaheroLoyaltyToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@metahero/common-contracts/src/access/Ownable.sol\";\nimport \"@metahero/common-contracts/src/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"./constants.sol\";\n\n/**\n * @title Metahero Loyalty Token\n *\n * @author Stanisław Głogowski <stan@metahero.io>\n */\ncontract MetaheroLoyaltyToken is Ownable, Initializable, ERC721Enumerable {\n  using Strings for uint256;\n\n  struct TokenDetails {\n    uint256 snapshotId;\n    uint256 deposit;\n    uint256 rewards;\n    uint256 weight;\n    uint256 unlockWithdrawalAt;\n  }\n\n  struct TokenSummary {\n    address owner;\n    uint256 deposit;\n    uint256 depositPower;\n    uint256 rewards;\n    uint256 snapshotRewards;\n    uint256 unlockWithdrawalAt;\n  }\n\n  struct Snapshot {\n    uint256 index;\n    uint256 weights;\n    uint256 rewards;\n  }\n\n  // constants\n\n  uint256 private constant EARLY_WITHDRAWAL_MAX_TAX = 25_000; // 25%\n\n  // state variables\n\n  IERC20 private _paymentToken;\n\n  address private _tokenDistributor;\n\n  uint256 private _snapshotBaseTimestamp;\n\n  uint256 private _snapshotWindowMinLength;\n\n  uint256 private _earlyWithdrawalTax;\n\n  uint256 private _totalTokensDeposits;\n\n  uint256 private _totalTokensWeights;\n\n  uint256 private _totalTokensRewards;\n\n  uint256 private _totalSnapshotsRewards;\n\n  uint256 private _totalTokens;\n\n  uint256 private _tokenIdCounter;\n\n  string private _tokenBaseURI;\n\n  uint256[] private _snapshotIds;\n\n  mapping(uint256 => Snapshot) private _snapshots;\n\n  mapping(uint256 => TokenDetails) private _tokenDetails;\n\n  // errors\n\n  error InvalidEarlyWithdrawalTax();\n  error InvalidSnapshotWindowMinLength();\n  error MsgSenderIsNotTheTokenDistributor();\n  error MsgSenderIsNotTheTokenOwner();\n  error NoTokenRewardsToWithdraw();\n  error PaymentTokenIsTheZeroAddress();\n  error TokenDistributorIsTheZeroAddress();\n  error TokenDoesntExist();\n  error TokenRewardsWithdrawalIsLocked();\n\n  // events\n\n  event Initialized(\n    address paymentToken,\n    address tokenDistributor,\n    uint256 snapshotBaseTimestamp,\n    uint256 snapshotWindowMinLength,\n    uint256 earlyWithdrawalTax,\n    string tokenBaseURI\n  );\n\n  event TokenBaseURIUpdated(string tokenBaseURI);\n\n  event TokenMinted(\n    address owner,\n    uint256 tokenId,\n    uint256 snapshotId,\n    uint256 deposit,\n    uint256 rewards,\n    uint256 weight,\n    uint256 unlockWithdrawalAt\n  );\n\n  event TokenBurned(uint256 tokenId, uint256 withdrawal);\n\n  event TokenRewardsWithdrawn(uint256 tokenId, uint256 rewards);\n\n  // modifiers\n\n  modifier onlyTokenDistributor() {\n    if (msg.sender != _tokenDistributor) {\n      revert MsgSenderIsNotTheTokenDistributor();\n    }\n\n    _;\n  }\n\n  // constructor\n\n  constructor()\n    Ownable()\n    Initializable()\n    ERC721(\"Metahero Loyalty\", \"LOYAL-HERO\")\n  {\n    //\n  }\n\n  // initialize\n\n  function initialize(\n    address paymentToken,\n    address tokenDistributor,\n    uint256 snapshotWindowMinLength,\n    uint256 earlyWithdrawalTax,\n    string calldata tokenBaseURI\n  ) external initializer {\n    if (paymentToken == address(0)) {\n      revert PaymentTokenIsTheZeroAddress();\n    }\n\n    if (tokenDistributor == address(0)) {\n      revert TokenDistributorIsTheZeroAddress();\n    }\n\n    if (snapshotWindowMinLength == 0) {\n      revert InvalidSnapshotWindowMinLength();\n    }\n\n    if (earlyWithdrawalTax > EARLY_WITHDRAWAL_MAX_TAX) {\n      revert InvalidEarlyWithdrawalTax();\n    }\n\n    uint256 snapshotBaseTimestamp = block.timestamp;\n\n    _paymentToken = IERC20(paymentToken);\n\n    _tokenDistributor = tokenDistributor;\n\n    _snapshotBaseTimestamp = snapshotBaseTimestamp;\n\n    _snapshotWindowMinLength = snapshotWindowMinLength;\n\n    _earlyWithdrawalTax = earlyWithdrawalTax;\n\n    _tokenBaseURI = tokenBaseURI;\n\n    emit Initialized(\n      paymentToken,\n      tokenDistributor,\n      snapshotBaseTimestamp,\n      snapshotWindowMinLength,\n      earlyWithdrawalTax,\n      tokenBaseURI\n    );\n  }\n\n  // public functions (views)\n\n  function tokenURI(uint256 tokenId)\n    public\n    view\n    override\n    returns (string memory result)\n  {\n    if (_exists(tokenId) && bytes(_tokenBaseURI).length > 0) {\n      result = string(\n        abi.encodePacked(_tokenBaseURI, tokenId.toString(), \".json\")\n      );\n    }\n\n    return result;\n  }\n\n  // external functions (views)\n\n  function computeSnapshotId(uint256 timestamp)\n    external\n    view\n    returns (uint256)\n  {\n    return _computeSnapshotId(timestamp);\n  }\n\n  function getSnapshot(uint256 snapshotId)\n    external\n    view\n    returns (Snapshot memory)\n  {\n    return _snapshots[snapshotId];\n  }\n\n  function getSummary()\n    external\n    view\n    returns (\n      uint256 totalDeposits,\n      uint256 totalTokensRewards,\n      uint256 totalSnapshotsRewards,\n      uint256 totalTokens,\n      uint256 earlyWithdrawalTax\n    )\n  {\n    return (\n      _totalTokensDeposits,\n      _totalTokensRewards,\n      _calcTotalSnapshotsRewards(),\n      _totalTokens,\n      _earlyWithdrawalTax\n    );\n  }\n\n  function getTokenSummary(uint256 tokenId)\n    external\n    view\n    returns (TokenSummary memory)\n  {\n    return _getTokenSummary(tokenId);\n  }\n\n  function getTokenSummaries(uint256[] memory tokenIds)\n    external\n    view\n    returns (TokenSummary[] memory result)\n  {\n    uint256 len = tokenIds.length;\n\n    result = new TokenSummary[](len);\n\n    for (uint256 index; index < len; ) {\n      result[index] = _getTokenSummary(tokenIds[index]);\n\n      unchecked {\n        ++index;\n      }\n    }\n\n    return result;\n  }\n\n  // external functions\n\n  function setTokenBaseURI(string calldata tokenBaseURI) external onlyOwner {\n    _tokenBaseURI = tokenBaseURI;\n\n    emit TokenBaseURIUpdated(tokenBaseURI);\n  }\n\n  function depositRewards(uint256 amount) external {\n    address sender = _msgSender();\n\n    _paymentToken.transferFrom(sender, address(this), amount);\n\n    _syncSnapshot(_computeSnapshotId(block.timestamp));\n  }\n\n  function mintToken(\n    address owner,\n    uint256 deposit,\n    uint256 rewards,\n    uint256 weight,\n    uint256 unlockWithdrawalAt\n  ) external onlyTokenDistributor returns (uint256 tokenId) {\n    uint256 currentSnapshotId = _computeSnapshotId(block.timestamp);\n\n    unchecked {\n      tokenId = ++_tokenIdCounter;\n    }\n\n    TokenDetails storage tokenDetails = _tokenDetails[tokenId];\n\n    tokenDetails.snapshotId = currentSnapshotId;\n    tokenDetails.deposit = deposit;\n    tokenDetails.rewards = rewards;\n    tokenDetails.weight = weight;\n    tokenDetails.unlockWithdrawalAt = unlockWithdrawalAt;\n\n    unchecked {\n      _totalTokensDeposits += deposit;\n      _totalTokensRewards += rewards;\n      _totalTokensWeights += weight;\n      _totalTokens += 1;\n    }\n\n    _mint(owner, tokenId);\n\n    _syncSnapshot(currentSnapshotId);\n\n    emit TokenMinted(\n      owner,\n      tokenId,\n      currentSnapshotId,\n      deposit,\n      rewards,\n      weight,\n      unlockWithdrawalAt\n    );\n\n    return tokenId;\n  }\n\n  function withdrawTokenRewards(uint256 tokenId) external {\n    address sender = _msgSender();\n\n    TokenDetails storage tokenDetails = _tokenDetails[tokenId];\n\n    if (tokenDetails.unlockWithdrawalAt == 0) {\n      revert TokenDoesntExist();\n    }\n\n    if (sender != ownerOf(tokenId)) {\n      revert MsgSenderIsNotTheTokenOwner();\n    }\n\n    if (tokenDetails.unlockWithdrawalAt > block.timestamp) {\n      revert TokenRewardsWithdrawalIsLocked();\n    }\n\n    uint256 currentSnapshotId = _computeSnapshotId(block.timestamp);\n\n    uint256 snapshotRewards = _calcTokenSnapshotRewards(\n      currentSnapshotId,\n      tokenDetails.snapshotId,\n      tokenDetails.weight\n    );\n\n    uint256 rewards;\n\n    unchecked {\n      rewards = tokenDetails.rewards + snapshotRewards;\n    }\n\n    if (rewards == 0) {\n      revert NoTokenRewardsToWithdraw();\n    }\n\n    unchecked {\n      _totalSnapshotsRewards -= snapshotRewards;\n      _totalTokensRewards -= tokenDetails.rewards;\n    }\n\n    tokenDetails.snapshotId = currentSnapshotId;\n    tokenDetails.rewards = 0;\n\n    _paymentToken.transfer(sender, rewards);\n\n    emit TokenRewardsWithdrawn(tokenId, rewards);\n  }\n\n  function burnToken(uint256 tokenId) external {\n    address sender = _msgSender();\n\n    TokenDetails memory tokenDetails = _tokenDetails[tokenId];\n\n    if (tokenDetails.unlockWithdrawalAt == 0) {\n      revert TokenDoesntExist();\n    }\n\n    if (sender != ownerOf(tokenId)) {\n      revert MsgSenderIsNotTheTokenOwner();\n    }\n\n    uint256 withdrawal;\n\n    if (tokenDetails.unlockWithdrawalAt > block.timestamp) {\n      unchecked {\n        withdrawal =\n          ((MAX_PERCENTAGE - _earlyWithdrawalTax) * tokenDetails.deposit) /\n          MAX_PERCENTAGE;\n      }\n    } else {\n      uint256 currentSnapshotId = _computeSnapshotId(block.timestamp);\n\n      uint256 snapshotRewards = _calcTokenSnapshotRewards(\n        currentSnapshotId,\n        tokenDetails.snapshotId,\n        tokenDetails.weight\n      );\n\n      unchecked {\n        withdrawal =\n          tokenDetails.deposit +\n          tokenDetails.rewards +\n          snapshotRewards;\n\n        _totalSnapshotsRewards -= snapshotRewards;\n      }\n    }\n\n    unchecked {\n      _totalTokensDeposits -= tokenDetails.deposit;\n      _totalTokensRewards -= tokenDetails.rewards;\n      _totalTokens -= 1;\n    }\n\n    if (withdrawal != 0) {\n      _paymentToken.transfer(sender, withdrawal);\n    }\n\n    delete _tokenDetails[tokenId];\n\n    _burn(tokenId);\n\n    emit TokenBurned(tokenId, withdrawal);\n  }\n\n  // private functions (views)\n\n  function _getTokenSummary(uint256 tokenId)\n    private\n    view\n    returns (TokenSummary memory result)\n  {\n    TokenDetails memory tokenDetails = _tokenDetails[tokenId];\n\n    if (tokenDetails.deposit != 0) {\n      uint256 currentSnapshotId = _computeSnapshotId(block.timestamp);\n\n      result.owner = ownerOf(tokenId);\n\n      result.deposit = tokenDetails.deposit;\n\n      unchecked {\n        result.depositPower = tokenDetails.weight / tokenDetails.deposit;\n      }\n\n      result.rewards = tokenDetails.rewards;\n\n      result.snapshotRewards = _calcTokenSnapshotRewards(\n        currentSnapshotId,\n        tokenDetails.snapshotId,\n        tokenDetails.weight\n      );\n\n      result.unlockWithdrawalAt = tokenDetails.unlockWithdrawalAt;\n    }\n\n    return result;\n  }\n\n  function _computeSnapshotId(uint256 timestamp)\n    private\n    view\n    returns (uint256 result)\n  {\n    if (timestamp >= _snapshotBaseTimestamp) {\n      unchecked {\n        result =\n          1 +\n          (timestamp - _snapshotBaseTimestamp) /\n          _snapshotWindowMinLength;\n      }\n    }\n\n    return result;\n  }\n\n  function _calcTokenSnapshotRewards(\n    uint256 currentSnapshotId,\n    uint256 tokenSnapshotId,\n    uint256 tokenWeight\n  ) private view returns (uint256 result) {\n    uint256 len = _snapshotIds.length;\n\n    if (len != 0) {\n      uint256 index;\n\n      unchecked {\n        index = len - 1;\n      }\n\n      for (;;) {\n        uint256 snapshotId = _snapshotIds[index];\n\n        if (snapshotId < currentSnapshotId) {\n          if (snapshotId < tokenSnapshotId) {\n            break;\n          }\n\n          Snapshot memory snapshot = _snapshots[snapshotId];\n\n          unchecked {\n            result += (tokenWeight * snapshot.rewards) / snapshot.weights;\n          }\n        }\n\n        if (index == 0) {\n          break;\n        } else {\n          unchecked {\n            --index;\n          }\n        }\n      }\n    }\n\n    return result;\n  }\n\n  function _calcTotalSnapshotsRewards() private view returns (uint256 result) {\n    result = _paymentToken.balanceOf(address(this));\n\n    unchecked {\n      result -= _totalTokensDeposits;\n      result -= _totalTokensRewards;\n    }\n\n    return result;\n  }\n\n  // private functions\n\n  function _syncSnapshot(uint256 currentSnapshotId) private {\n    if (_totalTokensWeights == 0) {\n      return;\n    }\n\n    uint256 rewards;\n\n    {\n      uint256 totalSnapshotsRewards = _calcTotalSnapshotsRewards();\n\n      if (totalSnapshotsRewards != _totalSnapshotsRewards) {\n        unchecked {\n          rewards = totalSnapshotsRewards - _totalSnapshotsRewards;\n        }\n\n        _totalSnapshotsRewards = totalSnapshotsRewards;\n      }\n    }\n\n    if (rewards == 0) {\n      return;\n    }\n\n    uint256 len = _snapshotIds.length;\n\n    if (len == 0) {\n      Snapshot storage snapshot = _snapshots[currentSnapshotId];\n\n      snapshot.weights = _totalTokensWeights;\n      snapshot.rewards = rewards;\n\n      _snapshotIds.push(currentSnapshotId);\n\n      return;\n    }\n\n    uint256 latestIndex;\n\n    unchecked {\n      latestIndex = len - 1;\n    }\n\n    uint256 latestSnapshotId = _snapshotIds[latestIndex];\n\n    if (latestSnapshotId == currentSnapshotId) {\n      Snapshot storage snapshot = _snapshots[latestSnapshotId];\n\n      snapshot.weights = _totalTokensWeights;\n\n      unchecked {\n        snapshot.rewards += rewards;\n      }\n    } else {\n      Snapshot storage snapshot = _snapshots[currentSnapshotId];\n\n      snapshot.weights = _totalTokensWeights;\n      snapshot.rewards = rewards;\n\n      unchecked {\n        snapshot.index = latestIndex + 1;\n      }\n\n      _snapshotIds.push(currentSnapshotId);\n    }\n  }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetFixedSupply.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/presets/ERC20PresetFixedSupply.sol)\npragma solidity ^0.8.0;\n\nimport \"../extensions/ERC20Burnable.sol\";\n\n/**\n * @dev {ERC20} token, including:\n *\n *  - Preminted initial supply\n *  - Ability for holders to burn (destroy) their tokens\n *  - No access control mechanism (for minting/pausing) and hence no governance\n *\n * This contract uses {ERC20Burnable} to include burn capabilities - head to\n * its documentation for details.\n *\n * _Available since v3.4._\n *\n * _Deprecated in favor of https://wizard.openzeppelin.com/[Contracts Wizard]._\n */\ncontract ERC20PresetFixedSupply is ERC20Burnable {\n    /**\n     * @dev Mints `initialSupply` amount of token and transfers them to `owner`.\n     *\n     * See {ERC20-constructor}.\n     */\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint256 initialSupply,\n        address owner\n    ) ERC20(name, symbol) {\n        _mint(owner, initialSupply);\n    }\n}\n"
    },
    "src/imports.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetFixedSupply.sol\";\n"
    }
  },
  "settings": {
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 100
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}