{
  "address": "0x642e247534c5DA09c4fc8848907334CF047bA2DA",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidDeposit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidDepositPower",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInvitationId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInvitationProof",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidMaxDeposit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidMaxRewardsAPY",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidMaxWithdrawalLockTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidMinDeposit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidMinWithdrawalLockTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidWithdrawalLockTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvitationAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvitationAlreadyUsed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvitationDoesntExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LoyaltyTokenIsTheZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MsgSenderIsNotTheDeployer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MsgSenderIsNotTheOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoRewardsToRelease",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerIsTheZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PaymentTokenIsTheZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "loyaltyToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invitationId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "treeRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositPower",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minDeposit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxDeposit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minRewardsAPY",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxRewardsAPY",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minWithdrawalLockTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxWithdrawalLockTime",
          "type": "uint256"
        }
      ],
      "name": "InvitationAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invitationId",
          "type": "uint256"
        }
      ],
      "name": "InvitationRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invitationId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "InvitationUsed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewards",
          "type": "uint256"
        }
      ],
      "name": "RewardsReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "invitationId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "treeRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "depositPower",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minDeposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxDeposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minRewardsAPY",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxRewardsAPY",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minWithdrawalLockTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxWithdrawalLockTime",
          "type": "uint256"
        }
      ],
      "name": "addInvitation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "invitationId",
          "type": "uint256"
        }
      ],
      "name": "getInvitation",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum MetaheroLoyaltyTokenDistributor.InvitationStates",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "treeRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "depositPower",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minDeposit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxDeposit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minRewardsAPY",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxRewardsAPY",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minWithdrawalLockTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxWithdrawalLockTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct MetaheroLoyaltyTokenDistributor.Invitation",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "loyaltyToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "invitationId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isInvitationInUse",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "releaseRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "invitationId",
          "type": "uint256"
        }
      ],
      "name": "removeInvitation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "togglePaused",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "invitationId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrawalLockTime",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "useInvitation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa6dba28f92ea59fe35f3f0a8b6b67474013d9bf18bebe20811ab1836361c176c",
  "receipt": {
    "to": null,
    "from": "0x1e3026E29D54bC1F3Ebe83AfBBE0b7567741EaD2",
    "contractAddress": "0x642e247534c5DA09c4fc8848907334CF047bA2DA",
    "transactionIndex": 17,
    "gasUsed": "1203716",
    "logsBloom": "0x
    "blockHash": "0x2964ebe7710d24d673de869113459d4e23560c3dad95ef8a6f7dd4246f706a2b",
    "transactionHash": "0xa6dba28f92ea59fe35f3f0a8b6b67474013d9bf18bebe20811ab1836361c176c",
    "logs": [],
    "blockNumber": 22120347,
    "cumulativeGasUsed": "3489942",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "2d532362db83d3ab9bf117d21ceb4b27",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDeposit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDepositPower\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInvitationId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInvitationProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMaxDeposit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMaxRewardsAPY\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMaxWithdrawalLockTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMinDeposit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMinWithdrawalLockTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidWithdrawalLockTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvitationAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvitationAlreadyUsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvitationDoesntExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LoyaltyTokenIsTheZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MsgSenderIsNotTheDeployer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MsgSenderIsNotTheOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoRewardsToRelease\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerIsTheZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PaymentTokenIsTheZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"loyaltyToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invitationId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"treeRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositPower\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minRewardsAPY\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxRewardsAPY\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minWithdrawalLockTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxWithdrawalLockTime\",\"type\":\"uint256\"}],\"name\":\"InvitationAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invitationId\",\"type\":\"uint256\"}],\"name\":\"InvitationRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invitationId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"InvitationUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"name\":\"RewardsReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"invitationId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"treeRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"depositPower\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minRewardsAPY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRewardsAPY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minWithdrawalLockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWithdrawalLockTime\",\"type\":\"uint256\"}],\"name\":\"addInvitation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"invitationId\",\"type\":\"uint256\"}],\"name\":\"getInvitation\",\"outputs\":[{\"components\":[{\"internalType\":\"enum MetaheroLoyaltyTokenDistributor.InvitationStates\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"treeRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"depositPower\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minRewardsAPY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRewardsAPY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minWithdrawalLockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWithdrawalLockTime\",\"type\":\"uint256\"}],\"internalType\":\"struct MetaheroLoyaltyTokenDistributor.Invitation\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"loyaltyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"invitationId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isInvitationInUse\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"invitationId\",\"type\":\"uint256\"}],\"name\":\"removeInvitation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"invitationId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalLockTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"useInvitation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Stanis\\u0142aw G\\u0142ogowski <stan@metahero.io>\",\"kind\":\"dev\",\"methods\":{\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"title\":\"Metahero Loyalty Token (distributor)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/MetaheroLoyaltyTokenDistributor.sol\":\"MetaheroLoyaltyTokenDistributor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@metahero/common-contracts/src/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nabstract contract Ownable {\\n  address internal _owner;\\n\\n  // events\\n\\n  event OwnerUpdated(address owner);\\n\\n  // errors\\n\\n  error MsgSenderIsNotTheOwner();\\n  error OwnerIsTheZeroAddress();\\n\\n  // modifiers\\n\\n  modifier onlyOwner() {\\n    if (msg.sender != _owner) {\\n      revert MsgSenderIsNotTheOwner();\\n    }\\n\\n    _;\\n  }\\n\\n  // constructor\\n\\n  constructor() {\\n    _owner = msg.sender;\\n  }\\n\\n  // external functions (views)\\n\\n  function getOwner() external view returns (address) {\\n    return _owner;\\n  }\\n\\n  // external functions\\n\\n  function setOwner(address owner) external onlyOwner {\\n    if (owner == address(0)) {\\n      revert OwnerIsTheZeroAddress();\\n    }\\n\\n    _owner = owner;\\n\\n    emit OwnerUpdated(owner);\\n  }\\n}\\n\",\"keccak256\":\"0x87a57b213f4ae5ee0158bb98e39667bbd16f1c3dec8f178aca3e48463785062f\",\"license\":\"MIT\"},\"@metahero/common-contracts/src/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nabstract contract Initializable {\\n  address private _deployer;\\n\\n  // errors\\n\\n  error AlreadyInitialized();\\n  error MsgSenderIsNotTheDeployer();\\n\\n  // modifiers\\n\\n  modifier initializer() {\\n    if (_deployer == address(0)) {\\n      revert AlreadyInitialized();\\n    }\\n\\n    if (msg.sender != _deployer) {\\n      revert MsgSenderIsNotTheDeployer();\\n    }\\n\\n    _deployer = address(0);\\n\\n    _;\\n  }\\n\\n  // constructor\\n\\n  constructor() {\\n    _deployer = msg.sender;\\n  }\\n\\n  // external functions (views)\\n\\n  function initialized() external view returns (bool) {\\n    return _deployer == address(0);\\n  }\\n}\\n\",\"keccak256\":\"0x08690d8e86050dcdf866457b853caa35adaae3380f868901977f89c121c6c97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x921f012325281f7d81e29c53a13824cf6c2c5d77232065d0d4f3f912e97af6ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaa504ac17eb0298dcdf5733ce24021b4914f035b97f4400b92827341d3facb3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/MetaheroLoyaltyToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@metahero/common-contracts/src/access/Ownable.sol\\\";\\nimport \\\"@metahero/common-contracts/src/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./constants.sol\\\";\\n\\n/**\\n * @title Metahero Loyalty Token\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@metahero.io>\\n */\\ncontract MetaheroLoyaltyToken is Ownable, Initializable, ERC721Enumerable {\\n  using Strings for uint256;\\n\\n  enum TokenStates {\\n    Unknown,\\n    Minted,\\n    Burned\\n  }\\n\\n  struct TokenDetails {\\n    TokenStates state;\\n    uint256 snapshotId;\\n    uint256 deposit;\\n    uint256 rewards;\\n    uint256 weight;\\n    uint256 unlockWithdrawalAt;\\n  }\\n\\n  struct Snapshot {\\n    uint256 index;\\n    uint256 weights;\\n    uint256 rewards;\\n  }\\n\\n  // constants\\n\\n  uint256 private constant EARLY_WITHDRAWAL_MAX_TAX = 25_000; // 25%\\n\\n  // state variables\\n\\n  IERC20 private _paymentToken;\\n\\n  address private _tokenAuction;\\n\\n  address private _tokenDistributor;\\n\\n  uint256 private _snapshotBaseTimestamp;\\n\\n  uint256 private _snapshotWindowMinLength;\\n\\n  uint256 private _earlyWithdrawalTax;\\n\\n  uint256 private _totalTokensDeposits;\\n\\n  uint256 private _totalTokensWeights;\\n\\n  uint256 private _totalTokensRewards;\\n\\n  uint256 private _totalSnapshotsRewards;\\n\\n  uint256 private _tokenIdCounter;\\n\\n  string private _tokenBaseURI;\\n\\n  uint256[] private _snapshotIds;\\n\\n  mapping(uint256 => Snapshot) private _snapshots;\\n\\n  mapping(uint256 => TokenDetails) private _tokenDetails;\\n\\n  // errors\\n\\n  error InvalidEarlyWithdrawalTax();\\n  error InvalidSnapshotWindowMinLength();\\n  error InvalidTokenState();\\n  error MsgSenderIsNotTheTokenAuction();\\n  error MsgSenderIsNotTheTokenDistributor();\\n  error MsgSenderIsNotTheTokenOwner();\\n  error PaymentTokenIsTheZeroAddress();\\n  error TokenAuctionIsTheZeroAddress();\\n  error TokenDistributorIsTheZeroAddress();\\n  error TokenRewardsWithdrawalIsLocked();\\n  error NoTokenRewardsForWithdrawn();\\n\\n  // events\\n\\n  event Initialized(\\n    address paymentToken,\\n    address tokenAuction,\\n    address tokenDistributor,\\n    uint256 snapshotBaseTimestamp,\\n    uint256 snapshotWindowMinLength,\\n    uint256 earlyWithdrawalTax,\\n    string tokenBaseURI\\n  );\\n\\n  event TokenBaseURIUpdated(string tokenBaseURI);\\n\\n  event TokenMinted(\\n    uint256 tokenId,\\n    uint256 snapshotId,\\n    uint256 deposit,\\n    uint256 rewards,\\n    uint256 weight,\\n    uint256 unlockWithdrawalAt\\n  );\\n\\n  event TokenBurned(uint256 tokenId, uint256 withdrawal);\\n\\n  event TokenMarkedAsBurned(uint256 tokenId, uint256 deposit, uint256 weight);\\n\\n  event TokenResurrected(\\n    uint256 tokenId,\\n    uint256 snapshotId,\\n    uint256 deposit,\\n    uint256 weight,\\n    uint256 unlockWithdrawalAt\\n  );\\n\\n  event TokenRewardsWithdrawn(uint256 tokenId, uint256 rewards);\\n\\n  // modifiers\\n\\n  modifier onlyTokenAuction() {\\n    if (msg.sender != _tokenAuction) {\\n      revert MsgSenderIsNotTheTokenAuction();\\n    }\\n\\n    _;\\n  }\\n\\n  modifier onlyTokenDistributor() {\\n    if (msg.sender != _tokenDistributor) {\\n      revert MsgSenderIsNotTheTokenDistributor();\\n    }\\n\\n    _;\\n  }\\n\\n  // constructor\\n\\n  constructor()\\n    Ownable()\\n    Initializable()\\n    ERC721(\\\"Metahero Loyalty\\\", \\\"LOYAL-HERO\\\")\\n  {\\n    //\\n  }\\n\\n  // initialize\\n\\n  function initialize(\\n    address paymentToken,\\n    address tokenAuction,\\n    address tokenDistributor,\\n    uint256 snapshotWindowMinLength,\\n    uint256 earlyWithdrawalTax,\\n    string calldata tokenBaseURI\\n  ) external initializer {\\n    if (paymentToken == address(0)) {\\n      revert PaymentTokenIsTheZeroAddress();\\n    }\\n\\n    if (tokenAuction == address(0)) {\\n      revert TokenAuctionIsTheZeroAddress();\\n    }\\n\\n    if (tokenDistributor == address(0)) {\\n      revert TokenDistributorIsTheZeroAddress();\\n    }\\n\\n    if (snapshotWindowMinLength == 0) {\\n      revert InvalidSnapshotWindowMinLength();\\n    }\\n\\n    if (earlyWithdrawalTax > EARLY_WITHDRAWAL_MAX_TAX) {\\n      revert InvalidEarlyWithdrawalTax();\\n    }\\n\\n    uint256 snapshotBaseTimestamp = block.timestamp;\\n\\n    _paymentToken = IERC20(paymentToken);\\n\\n    _tokenAuction = tokenAuction;\\n\\n    _tokenDistributor = tokenDistributor;\\n\\n    _snapshotBaseTimestamp = snapshotBaseTimestamp;\\n\\n    _snapshotWindowMinLength = snapshotWindowMinLength;\\n\\n    _earlyWithdrawalTax = earlyWithdrawalTax;\\n\\n    _tokenBaseURI = tokenBaseURI;\\n\\n    emit Initialized(\\n      paymentToken,\\n      tokenAuction,\\n      tokenDistributor,\\n      snapshotBaseTimestamp,\\n      snapshotWindowMinLength,\\n      earlyWithdrawalTax,\\n      tokenBaseURI\\n    );\\n  }\\n\\n  // public functions (views)\\n\\n  function tokenURI(uint256 tokenId)\\n    public\\n    view\\n    override\\n    returns (string memory result)\\n  {\\n    if (_exists(tokenId) && bytes(_tokenBaseURI).length > 0) {\\n      result = string(\\n        abi.encodePacked(_tokenBaseURI, tokenId.toString(), \\\".json\\\")\\n      );\\n    }\\n\\n    return result;\\n  }\\n\\n  // external functions (views)\\n\\n  function computeSnapshotId(uint256 timestamp)\\n    external\\n    view\\n    returns (uint256)\\n  {\\n    return _computeSnapshotId(timestamp);\\n  }\\n\\n  function getSnapshot(uint256 snapshotId)\\n    external\\n    view\\n    returns (Snapshot memory)\\n  {\\n    return _snapshots[snapshotId];\\n  }\\n\\n  function getSummary()\\n    external\\n    view\\n    returns (\\n      uint256 totalDeposits,\\n      uint256 totalRewards,\\n      uint256 earlyWithdrawalTax\\n    )\\n  {\\n    uint256 totalSnapshotsRewards = _calcTotalSnapshotsRewards();\\n\\n    unchecked {\\n      totalRewards = _totalTokensRewards + totalSnapshotsRewards;\\n    }\\n\\n    return (_totalTokensDeposits, totalRewards, _earlyWithdrawalTax);\\n  }\\n\\n  function getTokenSummary(uint256 tokenId)\\n    external\\n    view\\n    returns (\\n      address owner,\\n      uint256 deposit,\\n      uint256 rewards,\\n      uint256 unlockWithdrawalAt\\n    )\\n  {\\n    TokenDetails memory tokenDetails = _tokenDetails[tokenId];\\n\\n    if (tokenDetails.state == TokenStates.Minted) {\\n      uint256 currentSnapshotId = _computeSnapshotId(block.timestamp);\\n\\n      owner = ownerOf(tokenId);\\n\\n      deposit = tokenDetails.deposit;\\n\\n      uint256 snapshotRewards = _calcTokenSnapshotRewards(\\n        currentSnapshotId,\\n        tokenDetails.snapshotId,\\n        tokenDetails.weight\\n      );\\n\\n      unchecked {\\n        rewards = tokenDetails.rewards + snapshotRewards;\\n      }\\n\\n      unlockWithdrawalAt = tokenDetails.unlockWithdrawalAt;\\n    }\\n\\n    return (owner, deposit, rewards, unlockWithdrawalAt);\\n  }\\n\\n  function getRequiredTokenResurrectionDeposit(uint256 tokenId)\\n    external\\n    view\\n    returns (uint256 result)\\n  {\\n    TokenDetails memory tokenDetails = _tokenDetails[tokenId];\\n\\n    if (tokenDetails.state == TokenStates.Burned) {\\n      result = tokenDetails.deposit;\\n    }\\n\\n    return result;\\n  }\\n\\n  // external functions\\n\\n  function setTokenBaseURI(string calldata tokenBaseURI) external onlyOwner {\\n    _tokenBaseURI = tokenBaseURI;\\n\\n    emit TokenBaseURIUpdated(tokenBaseURI);\\n  }\\n\\n  function depositRewards(uint256 amount) external {\\n    address sender = _msgSender();\\n    uint256 currentSnapshotId = _computeSnapshotId(block.timestamp);\\n\\n    _paymentToken.transferFrom(sender, address(this), amount);\\n\\n    _syncSnapshot(currentSnapshotId);\\n  }\\n\\n  function mintToken(\\n    address owner,\\n    uint256 deposit,\\n    uint256 rewards,\\n    uint256 weight,\\n    uint256 unlockWithdrawalAt\\n  ) external onlyTokenDistributor returns (uint256 tokenId) {\\n    uint256 currentSnapshotId = _computeSnapshotId(block.timestamp);\\n\\n    unchecked {\\n      tokenId = ++_tokenIdCounter;\\n    }\\n\\n    TokenDetails storage tokenDetails = _tokenDetails[tokenId];\\n\\n    tokenDetails.state = TokenStates.Minted;\\n    tokenDetails.snapshotId = currentSnapshotId;\\n    tokenDetails.deposit = deposit;\\n    tokenDetails.rewards = rewards;\\n    tokenDetails.weight = weight;\\n    tokenDetails.unlockWithdrawalAt = unlockWithdrawalAt;\\n\\n    unchecked {\\n      _totalTokensDeposits += deposit;\\n      _totalTokensRewards += rewards;\\n      _totalTokensWeights += weight;\\n    }\\n\\n    _mint(owner, tokenId);\\n\\n    _syncSnapshot(currentSnapshotId);\\n\\n    emit TokenMinted(\\n      tokenId,\\n      currentSnapshotId,\\n      deposit,\\n      rewards,\\n      weight,\\n      unlockWithdrawalAt\\n    );\\n\\n    return tokenId;\\n  }\\n\\n  function withdrawTokenRewards(uint256 tokenId) external {\\n    address sender = _msgSender();\\n\\n    TokenDetails storage tokenDetails = _tokenDetails[tokenId];\\n\\n    if (tokenDetails.state != TokenStates.Minted) {\\n      revert InvalidTokenState();\\n    }\\n\\n    if (sender != ownerOf(tokenId)) {\\n      revert MsgSenderIsNotTheTokenOwner();\\n    }\\n\\n    if (tokenDetails.unlockWithdrawalAt > block.timestamp) {\\n      revert TokenRewardsWithdrawalIsLocked();\\n    }\\n\\n    uint256 currentSnapshotId = _computeSnapshotId(block.timestamp);\\n\\n    uint256 snapshotRewards = _calcTokenSnapshotRewards(\\n      currentSnapshotId,\\n      tokenDetails.snapshotId,\\n      tokenDetails.weight\\n    );\\n\\n    uint256 rewards;\\n\\n    unchecked {\\n      rewards = tokenDetails.rewards + snapshotRewards;\\n    }\\n\\n    if (rewards == 0) {\\n      revert NoTokenRewardsForWithdrawn();\\n    }\\n\\n    unchecked {\\n      _totalSnapshotsRewards -= snapshotRewards;\\n      _totalTokensRewards -= tokenDetails.rewards;\\n    }\\n\\n    tokenDetails.snapshotId = currentSnapshotId;\\n    tokenDetails.rewards = 0;\\n\\n    _paymentToken.transfer(sender, rewards);\\n\\n    emit TokenRewardsWithdrawn(tokenId, rewards);\\n  }\\n\\n  function burnToken(uint256 tokenId) external {\\n    address sender = _msgSender();\\n\\n    TokenDetails storage tokenDetails = _tokenDetails[tokenId];\\n\\n    if (tokenDetails.state != TokenStates.Minted) {\\n      revert InvalidTokenState();\\n    }\\n\\n    if (sender != ownerOf(tokenId)) {\\n      revert MsgSenderIsNotTheTokenOwner();\\n    }\\n\\n    uint256 withdrawal;\\n\\n    if (tokenDetails.unlockWithdrawalAt > block.timestamp) {\\n      unchecked {\\n        withdrawal =\\n          ((MAX_PERCENTAGE - _earlyWithdrawalTax) * tokenDetails.deposit) /\\n          MAX_PERCENTAGE;\\n      }\\n    } else {\\n      uint256 currentSnapshotId = _computeSnapshotId(block.timestamp);\\n\\n      uint256 snapshotRewards = _calcTokenSnapshotRewards(\\n        currentSnapshotId,\\n        tokenDetails.snapshotId,\\n        tokenDetails.weight\\n      );\\n\\n      unchecked {\\n        withdrawal =\\n          tokenDetails.deposit +\\n          tokenDetails.rewards +\\n          snapshotRewards;\\n\\n        _totalSnapshotsRewards -= snapshotRewards;\\n      }\\n    }\\n\\n    unchecked {\\n      _totalTokensDeposits -= tokenDetails.deposit;\\n      _totalTokensRewards -= tokenDetails.rewards;\\n    }\\n\\n    if (withdrawal != 0) {\\n      _paymentToken.transfer(sender, withdrawal);\\n    }\\n\\n    tokenDetails.state = TokenStates.Burned;\\n    tokenDetails.snapshotId = 0;\\n    tokenDetails.rewards = 0;\\n    tokenDetails.unlockWithdrawalAt = 0;\\n\\n    _burn(tokenId);\\n\\n    emit TokenBurned(tokenId, withdrawal);\\n  }\\n\\n  function markTokenAsBurned(\\n    uint256 tokenId,\\n    uint256 deposit,\\n    uint256 weight\\n  ) external onlyTokenAuction {\\n    TokenDetails storage tokenDetails = _tokenDetails[tokenId];\\n\\n    if (tokenDetails.state != TokenStates.Unknown) {\\n      revert InvalidTokenState();\\n    }\\n\\n    tokenDetails.state = TokenStates.Burned;\\n    tokenDetails.deposit = deposit;\\n    tokenDetails.weight = weight;\\n\\n    emit TokenMarkedAsBurned(tokenId, deposit, weight);\\n  }\\n\\n  function resurrectToken(\\n    address owner,\\n    uint256 tokenId,\\n    uint256 unlockWithdrawalAt\\n  ) external onlyTokenAuction {\\n    uint256 currentSnapshotId = _computeSnapshotId(block.timestamp);\\n\\n    TokenDetails storage tokenDetails = _tokenDetails[tokenId];\\n\\n    if (tokenDetails.state != TokenStates.Burned) {\\n      revert InvalidTokenState();\\n    }\\n\\n    tokenDetails.state = TokenStates.Minted;\\n    tokenDetails.snapshotId = currentSnapshotId;\\n    tokenDetails.unlockWithdrawalAt = unlockWithdrawalAt;\\n\\n    unchecked {\\n      _totalTokensDeposits += tokenDetails.deposit;\\n      _totalTokensWeights += tokenDetails.weight;\\n    }\\n\\n    _mint(owner, tokenId);\\n\\n    _syncSnapshot(currentSnapshotId);\\n\\n    emit TokenResurrected(\\n      tokenId,\\n      currentSnapshotId,\\n      tokenDetails.deposit,\\n      tokenDetails.weight,\\n      unlockWithdrawalAt\\n    );\\n  }\\n\\n  // private functions (views)\\n\\n  function _computeSnapshotId(uint256 timestamp)\\n    private\\n    view\\n    returns (uint256 result)\\n  {\\n    if (timestamp >= _snapshotBaseTimestamp) {\\n      unchecked {\\n        result =\\n          1 +\\n          (timestamp - _snapshotBaseTimestamp) /\\n          _snapshotWindowMinLength;\\n      }\\n    }\\n\\n    return result;\\n  }\\n\\n  function _calcTokenSnapshotRewards(\\n    uint256 currentSnapshotId,\\n    uint256 tokenSnapshotId,\\n    uint256 tokenWeight\\n  ) private view returns (uint256 result) {\\n    uint256 len = _snapshotIds.length;\\n\\n    if (len != 0) {\\n      uint256 index;\\n\\n      unchecked {\\n        index = len - 1;\\n      }\\n\\n      for (;;) {\\n        uint256 snapshotId = _snapshotIds[index];\\n\\n        if (snapshotId < currentSnapshotId) {\\n          if (snapshotId < tokenSnapshotId) {\\n            break;\\n          }\\n\\n          Snapshot memory snapshot = _snapshots[snapshotId];\\n\\n          unchecked {\\n            result += (tokenWeight * snapshot.rewards) / snapshot.weights;\\n          }\\n        }\\n\\n        if (index == 0) {\\n          break;\\n        } else {\\n          unchecked {\\n            --index;\\n          }\\n        }\\n      }\\n    }\\n\\n    return result;\\n  }\\n\\n  function _calcTotalSnapshotsRewards() private view returns (uint256 result) {\\n    result = _paymentToken.balanceOf(address(this));\\n\\n    unchecked {\\n      result -= _totalTokensDeposits;\\n      result -= _totalTokensRewards;\\n    }\\n\\n    return result;\\n  }\\n\\n  // private functions\\n\\n  function _syncSnapshot(uint256 currentSnapshotId) private {\\n    if (_totalTokensWeights == 0) {\\n      return;\\n    }\\n\\n    uint256 rewards;\\n\\n    {\\n      uint256 totalSnapshotsRewards = _calcTotalSnapshotsRewards();\\n\\n      if (totalSnapshotsRewards != _totalSnapshotsRewards) {\\n        unchecked {\\n          rewards = totalSnapshotsRewards - _totalSnapshotsRewards;\\n        }\\n\\n        _totalSnapshotsRewards = totalSnapshotsRewards;\\n      }\\n    }\\n\\n    if (rewards == 0) {\\n      return;\\n    }\\n\\n    uint256 len = _snapshotIds.length;\\n\\n    if (len == 0) {\\n      Snapshot storage snapshot = _snapshots[currentSnapshotId];\\n\\n      snapshot.weights = _totalTokensWeights;\\n      snapshot.rewards = rewards;\\n\\n      _snapshotIds.push(currentSnapshotId);\\n\\n      return;\\n    }\\n\\n    uint256 latestIndex;\\n\\n    unchecked {\\n      latestIndex = len - 1;\\n    }\\n\\n    uint256 latestSnapshotId = _snapshotIds[latestIndex];\\n\\n    if (latestSnapshotId == currentSnapshotId) {\\n      Snapshot storage snapshot = _snapshots[latestSnapshotId];\\n\\n      snapshot.weights = _totalTokensWeights;\\n\\n      unchecked {\\n        snapshot.rewards += rewards;\\n      }\\n    } else {\\n      Snapshot storage snapshot = _snapshots[currentSnapshotId];\\n\\n      snapshot.weights = _totalTokensWeights;\\n      snapshot.rewards = rewards;\\n\\n      unchecked {\\n        snapshot.index = latestIndex + 1;\\n      }\\n\\n      _snapshotIds.push(currentSnapshotId);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x970fb8dbe0e4d81842ee525074c018c4ea3fc04b27637f8a41d2c1e1d59232b8\",\"license\":\"MIT\"},\"src/MetaheroLoyaltyTokenDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@metahero/common-contracts/src/access/Ownable.sol\\\";\\nimport \\\"@metahero/common-contracts/src/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"./MetaheroLoyaltyToken.sol\\\";\\nimport \\\"./constants.sol\\\";\\n\\n/**\\n * @title Metahero Loyalty Token (distributor)\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@metahero.io>\\n */\\ncontract MetaheroLoyaltyTokenDistributor is Ownable, Initializable, Pausable {\\n  using MerkleProof for bytes32[];\\n\\n  enum InvitationStates {\\n    Unknown,\\n    Added,\\n    Removed\\n  }\\n\\n  struct Invitation {\\n    InvitationStates state;\\n    bytes32 treeRoot;\\n    uint256 depositPower;\\n    uint256 minDeposit;\\n    uint256 maxDeposit;\\n    uint256 minRewardsAPY;\\n    uint256 maxRewardsAPY;\\n    uint256 minWithdrawalLockTime;\\n    uint256 maxWithdrawalLockTime;\\n  }\\n\\n  // constants\\n\\n  uint256 private constant DEPOSIT_MAX_POWER = 100;\\n\\n  // state variables\\n\\n  MetaheroLoyaltyToken private _loyaltyToken;\\n\\n  IERC20 private _paymentToken;\\n\\n  mapping(uint256 => Invitation) private _invitations;\\n\\n  mapping(uint256 => mapping(address => bool)) private _usedInvitation;\\n\\n  // errors\\n\\n  error InvalidDeposit();\\n  error InvalidDepositPower();\\n  error InvalidInvitationId();\\n  error InvalidInvitationProof();\\n  error InvalidMaxDeposit();\\n  error InvalidMaxRewardsAPY();\\n  error InvalidMaxWithdrawalLockTime();\\n  error InvalidMinDeposit();\\n  error InvalidMinWithdrawalLockTime();\\n  error InvalidWithdrawalLockTime();\\n  error InvitationAlreadyExists();\\n  error InvitationAlreadyUsed();\\n  error InvitationDoesntExist();\\n  error LoyaltyTokenIsTheZeroAddress();\\n  error NoRewardsToRelease();\\n  error PaymentTokenIsTheZeroAddress();\\n\\n  // events\\n\\n  event Initialized(address loyaltyToken, address paymentToken);\\n\\n  event RewardsReleased(uint256 rewards);\\n\\n  event InvitationAdded(\\n    uint256 invitationId,\\n    bytes32 treeRoot,\\n    uint256 depositPower,\\n    uint256 minDeposit,\\n    uint256 maxDeposit,\\n    uint256 minRewardsAPY,\\n    uint256 maxRewardsAPY,\\n    uint256 minWithdrawalLockTime,\\n    uint256 maxWithdrawalLockTime\\n  );\\n\\n  event InvitationRemoved(uint256 invitationId);\\n\\n  event InvitationUsed(uint256 invitationId, uint256 tokenId);\\n\\n  // constructor\\n\\n  constructor() Ownable() Initializable() Pausable() {\\n    //\\n  }\\n\\n  // initialize\\n\\n  function initialize(address loyaltyToken, address paymentToken)\\n    external\\n    initializer\\n  {\\n    if (loyaltyToken == address(0)) {\\n      revert LoyaltyTokenIsTheZeroAddress();\\n    }\\n\\n    if (paymentToken == address(0)) {\\n      revert PaymentTokenIsTheZeroAddress();\\n    }\\n\\n    _loyaltyToken = MetaheroLoyaltyToken(loyaltyToken);\\n\\n    _paymentToken = IERC20(paymentToken);\\n\\n    emit Initialized(loyaltyToken, paymentToken);\\n  }\\n\\n  // external functions (views)\\n\\n  function getInvitation(uint256 invitationId)\\n    external\\n    view\\n    returns (Invitation memory)\\n  {\\n    return _invitations[invitationId];\\n  }\\n\\n  function isInvitationInUse(uint256 invitationId, address account)\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return _usedInvitation[invitationId][account];\\n  }\\n\\n  // external functions\\n\\n  function togglePaused() external onlyOwner {\\n    if (paused()) {\\n      _unpause();\\n    } else {\\n      _pause();\\n    }\\n  }\\n\\n  function releaseRewards() external onlyOwner {\\n    uint256 rewards = _paymentToken.balanceOf(address(this));\\n\\n    if (rewards == 0) {\\n      revert NoRewardsToRelease();\\n    }\\n\\n    _paymentToken.transfer(_owner, rewards);\\n\\n    emit RewardsReleased(rewards);\\n  }\\n\\n  function addInvitation(\\n    uint256 invitationId,\\n    bytes32 treeRoot,\\n    uint256 depositPower,\\n    uint256 minDeposit,\\n    uint256 maxDeposit,\\n    uint256 minRewardsAPY,\\n    uint256 maxRewardsAPY,\\n    uint256 minWithdrawalLockTime,\\n    uint256 maxWithdrawalLockTime\\n  ) external onlyOwner {\\n    if (invitationId == 0) {\\n      revert InvalidInvitationId();\\n    }\\n\\n    if (_invitations[invitationId].state != InvitationStates.Unknown) {\\n      revert InvitationAlreadyExists();\\n    }\\n\\n    if (depositPower == 0 || depositPower > DEPOSIT_MAX_POWER) {\\n      revert InvalidDepositPower();\\n    }\\n\\n    if (minDeposit == 0) {\\n      revert InvalidMinDeposit();\\n    }\\n\\n    if (maxDeposit < minDeposit) {\\n      revert InvalidMaxDeposit();\\n    }\\n\\n    if (minRewardsAPY == 0) {\\n      if (maxRewardsAPY != 0) {\\n        revert InvalidMaxRewardsAPY();\\n      }\\n\\n      if (maxWithdrawalLockTime != minWithdrawalLockTime) {\\n        revert InvalidMaxWithdrawalLockTime();\\n      }\\n    } else {\\n      if (maxRewardsAPY < minRewardsAPY) {\\n        revert InvalidMaxRewardsAPY();\\n      }\\n\\n      if (minWithdrawalLockTime == 0) {\\n        revert InvalidMinWithdrawalLockTime();\\n      }\\n\\n      if (maxWithdrawalLockTime < minWithdrawalLockTime) {\\n        revert InvalidMaxWithdrawalLockTime();\\n      }\\n    }\\n\\n    _invitations[invitationId].state = InvitationStates.Added;\\n    _invitations[invitationId].treeRoot = treeRoot;\\n    _invitations[invitationId].depositPower = depositPower;\\n    _invitations[invitationId].minDeposit = minDeposit;\\n    _invitations[invitationId].maxDeposit = maxDeposit;\\n    _invitations[invitationId].minRewardsAPY = minRewardsAPY;\\n    _invitations[invitationId].maxRewardsAPY = maxRewardsAPY;\\n    _invitations[invitationId].minWithdrawalLockTime = minWithdrawalLockTime;\\n    _invitations[invitationId].maxWithdrawalLockTime = maxWithdrawalLockTime;\\n\\n    emit InvitationAdded(\\n      invitationId,\\n      treeRoot,\\n      depositPower,\\n      minDeposit,\\n      maxDeposit,\\n      minRewardsAPY,\\n      maxRewardsAPY,\\n      minWithdrawalLockTime,\\n      maxWithdrawalLockTime\\n    );\\n  }\\n\\n  function removeInvitation(uint256 invitationId) external onlyOwner {\\n    if (invitationId == 0) {\\n      revert InvalidInvitationId();\\n    }\\n\\n    Invitation storage invitation = _invitations[invitationId];\\n\\n    if (invitation.state != InvitationStates.Added) {\\n      revert InvitationDoesntExist();\\n    }\\n\\n    invitation.state = InvitationStates.Removed;\\n\\n    emit InvitationRemoved(invitationId);\\n  }\\n\\n  function useInvitation(\\n    uint256 invitationId,\\n    uint256 deposit,\\n    uint256 withdrawalLockTime,\\n    bytes32[] memory proof\\n  ) external whenNotPaused {\\n    if (invitationId == 0) {\\n      revert InvalidInvitationId();\\n    }\\n\\n    Invitation memory invitation = _invitations[invitationId];\\n\\n    if (invitation.state != InvitationStates.Added) {\\n      revert InvitationDoesntExist();\\n    }\\n\\n    if (deposit < invitation.minDeposit || deposit > invitation.maxDeposit) {\\n      revert InvalidDeposit();\\n    }\\n\\n    if (\\n      withdrawalLockTime < invitation.minWithdrawalLockTime ||\\n      withdrawalLockTime > invitation.maxWithdrawalLockTime\\n    ) {\\n      revert InvalidWithdrawalLockTime();\\n    }\\n\\n    address sender = _msgSender();\\n\\n    if (\\n      !proof.verify(invitation.treeRoot, keccak256(abi.encodePacked(sender)))\\n    ) {\\n      revert InvalidInvitationProof();\\n    }\\n\\n    if (_usedInvitation[invitationId][sender]) {\\n      revert InvitationAlreadyUsed();\\n    }\\n\\n    uint256 rewards;\\n    uint256 weight;\\n    uint256 unlockWithdrawalAt;\\n\\n    {\\n      uint256 rewardsAPY;\\n\\n      if (\\n        withdrawalLockTime == invitation.minWithdrawalLockTime //\\n      ) {\\n        rewardsAPY = invitation.minRewardsAPY;\\n      } else if (\\n        withdrawalLockTime == invitation.maxWithdrawalLockTime //\\n      ) {\\n        rewardsAPY = invitation.maxRewardsAPY;\\n      } else {\\n        unchecked {\\n          rewardsAPY =\\n            invitation.minRewardsAPY +\\n            ((invitation.maxRewardsAPY - invitation.minRewardsAPY) *\\n              (withdrawalLockTime - invitation.minWithdrawalLockTime)) /\\n            (invitation.maxWithdrawalLockTime -\\n              invitation.minWithdrawalLockTime);\\n        }\\n      }\\n\\n      unchecked {\\n        rewards =\\n          (deposit * rewardsAPY * withdrawalLockTime) /\\n          (MAX_PERCENTAGE * YEAR_TIME);\\n      }\\n\\n      uint256 availableRewards = _paymentToken.balanceOf(address(this));\\n\\n      if (rewards > availableRewards) {\\n        rewards = 0;\\n        withdrawalLockTime = invitation.minWithdrawalLockTime;\\n      }\\n    }\\n\\n    unchecked {\\n      weight = invitation.depositPower * deposit;\\n      unlockWithdrawalAt = block.timestamp + withdrawalLockTime;\\n    }\\n\\n    uint256 tokenId = _loyaltyToken.mintToken(\\n      sender,\\n      deposit,\\n      rewards,\\n      weight,\\n      unlockWithdrawalAt\\n    );\\n\\n    _usedInvitation[invitationId][sender] = true;\\n\\n    _paymentToken.transferFrom(sender, address(_loyaltyToken), deposit);\\n\\n    if (rewards != 0) {\\n      _paymentToken.transfer(address(_loyaltyToken), rewards);\\n    }\\n\\n    emit InvitationUsed(invitationId, tokenId);\\n  }\\n}\\n\",\"keccak256\":\"0x7919bd73e0374e41f0304b37a3023628bf9d00b53fd6aa0fc4df4e7bab64763d\",\"license\":\"MIT\"},\"src/constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nuint256 constant MAX_PERCENTAGE = 100_000;\\n\\nuint256 constant YEAR_TIME = 365 days;\\n\",\"keccak256\":\"0x63b58839a0744dd9b32232e0479566f24f9471f8c4ad2b95f1e4b7428528368f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600080546001600160a01b031916339081179091556001805460ff60a01b199092166001600160a81b031990921691909117905561140b806100546000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80637af6372d116100715780637af6372d14610127578063893d20e814610147578063a3998d2714610160578063bd3aedf614610199578063d0fab3ca146101ac578063dc8d3ce6146101b457600080fd5b806313af4035146100b9578063158ef93e146100ce57806336566f06146100f1578063485cc955146100f95780635c975abb1461010c5780636aaaf68314610114575b600080fd5b6100cc6100c73660046110b7565b6101c7565b005b6001546001600160a01b0316155b60405190151581526020015b60405180910390f35b6100cc61026f565b6100cc6101073660046110d9565b6102b9565b6100dc6103d9565b6100cc610122366004611122565b6103e9565b61013a6101353660046111fd565b61097a565b6040516100e8919061122c565b6000546001600160a01b03166040516100e891906112ae565b6100dc61016e3660046112c2565b60009182526005602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6100cc6101a73660046111fd565b610a6b565b6100cc610b33565b6100cc6101c23660046112e5565b610cb8565b6000546001600160a01b031633146101f2576040516317f6584d60e31b815260040160405180910390fd5b6001600160a01b03811661021957604051630465f79960e41b815260040160405180910390fd5b600080546001600160a01b0319166001600160a01b0383161790556040517f4ffd725fc4a22075e9ec71c59edf9c38cdeb588a91b24fc5b61388c5be41282b906102649083906112ae565b60405180910390a150565b6000546001600160a01b0316331461029a576040516317f6584d60e31b815260040160405180910390fd5b6102a26103d9565b156102b1576102af610f1f565b565b6102af610fb1565b6001546001600160a01b03166102e15760405162dc149f60e41b815260040160405180910390fd5b6001546001600160a01b0316331461030c5760405163bc40aee160e01b815260040160405180910390fd5b600180546001600160a01b03191690556001600160a01b038216610343576040516303a5f09160e21b815260040160405180910390fd5b6001600160a01b03811661036a5760405163b352a63160e01b815260040160405180910390fd5b600280546001600160a01b038481166001600160a01b03199283168117909355600380549185169190921681179091556040805192835260208301919091527f3cd5ec01b1ae7cfec6ca1863e2cd6aa25d6d1702825803ff2b7cc95010fffdc291015b60405180910390a15050565b600154600160a01b900460ff1690565b6103f16103d9565b156104175760405162461bcd60e51b815260040161040e90611344565b60405180910390fd5b8361043557604051635b26ac7160e01b815260040160405180910390fd5b600084815260046020526040808220815161012081019092528054829060ff16600281111561046657610466611216565b600281111561047757610477611216565b81526001828101546020830152600283015460408301526003830154606083015260048301546080830152600583015460a0830152600683015460c0830152600783015460e083015260089092015461010090910152909150815160028111156104e3576104e3611216565b146105015760405163379e7dc760e11b815260040160405180910390fd5b80606001518410806105165750806080015184115b1561053457604051635972996f60e11b815260040160405180910390fd5b8060e0015183108061054a575080610100015183115b15610568576040516314dcf90960e31b815260040160405180910390fd5b60003390506105c482602001518260405160200161059e919060609190911b6bffffffffffffffffffffffff1916815260140190565b60405160208183030381529060405280519060200120856110119092919063ffffffff16565b6105e15760405163f235cee760e01b815260040160405180910390fd5b60008681526005602090815260408083206001600160a01b038516845290915290205460ff161561062557604051633450cb4760e21b815260040160405180910390fd5b6000806000808560e00151881415610642575060a0850151610690565b85610100015188141561065a575060c0850151610690565b8560e00151866101000151038660e0015189038760a001518860c001510302816106865761068661136e565b048660a001510190505b6003546040516370a0823160e01b81526502de41353000838c028b020495506000916001600160a01b0316906370a08231906106d09030906004016112ae565b60206040518083038186803b1580156106e857600080fd5b505afa1580156106fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107209190611384565b90508085111561073657600094508660e0015198505b5050505060408381015160025491516307d061c560e41b81526001600160a01b038581166004830152602482018a905260448201859052918902606482018190524289016084830181905290939092600092911690637d061c509060a401602060405180830381600087803b1580156107ae57600080fd5b505af11580156107c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e69190611384565b60008b81526005602090815260408083206001600160a01b038a81168086529190935292819020805460ff1916600117905560035460025491516323b872dd60e01b815260048101949094529082166024840152604483018d905292935091909116906323b872dd90606401602060405180830381600087803b15801561086c57600080fd5b505af1158015610880573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a4919061139d565b5083156109355760035460025460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810187905291169063a9059cbb90604401602060405180830381600087803b1580156108fb57600080fd5b505af115801561090f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610933919061139d565b505b604080518b8152602081018390527f1d632f053eb6e817ebd2ee91a602ba1885314ccbb9e9fa3740245416b4205895910160405180910390a150505050505050505050565b6109cd604080516101208101909152806000815260200160008019168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60008281526004602052604090819020815161012081019092528054829060ff1660028111156109ff576109ff611216565b6002811115610a1057610a10611216565b815260018201546020820152600282015460408201526003820154606082015260048201546080820152600582015460a0820152600682015460c0820152600782015460e08201526008909101546101009091015292915050565b6000546001600160a01b03163314610a96576040516317f6584d60e31b815260040160405180910390fd5b80610ab457604051635b26ac7160e01b815260040160405180910390fd5b60008181526004602052604090206001815460ff166002811115610ada57610ada611216565b14610af85760405163379e7dc760e11b815260040160405180910390fd5b805460ff191660021781556040518281527ff64a5aa1a64c46c60a68b78cdc9a7c70398c06a42c1b379f8a7fec6e00fe6301906020016103cd565b6000546001600160a01b03163314610b5e576040516317f6584d60e31b815260040160405180910390fd5b6003546040516370a0823160e01b81526000916001600160a01b0316906370a0823190610b8f9030906004016112ae565b60206040518083038186803b158015610ba757600080fd5b505afa158015610bbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bdf9190611384565b905080610bff5760405163049d2cfb60e31b815260040160405180910390fd5b60035460005460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810184905291169063a9059cbb90604401602060405180830381600087803b158015610c4f57600080fd5b505af1158015610c63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c87919061139d565b506040518181527f85de091be18b1506795711e7cfa4b799aa13315833d24c8f92af184dad04209890602001610264565b6000546001600160a01b03163314610ce3576040516317f6584d60e31b815260040160405180910390fd5b88610d0157604051635b26ac7160e01b815260040160405180910390fd5b60008981526004602052604081205460ff166002811115610d2457610d24611216565b14610d4257604051631f11ecf560e31b815260040160405180910390fd5b861580610d4f5750606487115b15610d6d57604051630da0c90560e11b815260040160405180910390fd5b85610d8b57604051634f4940eb60e11b815260040160405180910390fd5b85851015610dac5760405163f112120b60e01b815260040160405180910390fd5b83610df5578215610dd05760405163eeea87cb60e01b815260040160405180910390fd5b818114610df057604051635d9dcc3960e11b815260040160405180910390fd5b610e55565b83831015610e165760405163eeea87cb60e01b815260040160405180910390fd5b81610e345760405163523b70bf60e01b815260040160405180910390fd5b81811015610e5557604051635d9dcc3960e11b815260040160405180910390fd5b600089815260046020818152604092839020805460ff19166001908117825581018c9055600281018b9055600381018a9055918201889055600582018790556006820186905560078201859055600890910183905581518b81529081018a9052908101889052606081018790526080810186905260a0810185905260c0810184905260e0810183905261010081018290527f17eab8e5d873f1bb8ded565d67e26a2965dc1eecd4f2eb7c49bf44f1e4d33ba8906101200160405180910390a1505050505050505050565b610f276103d9565b610f6a5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161040e565b6001805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051610fa791906112ae565b60405180910390a1565b610fb96103d9565b15610fd65760405162461bcd60e51b815260040161040e90611344565b6001805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610f9a3390565b60008261101e8584611027565b14949350505050565b600081815b8451811015611093576000858281518110611049576110496113bf565b6020026020010151905080831161106f5760008381526020829052604090209250611080565b600081815260208490526040902092505b508061108b816113d5565b91505061102c565b509392505050565b80356001600160a01b03811681146110b257600080fd5b919050565b6000602082840312156110c957600080fd5b6110d28261109b565b9392505050565b600080604083850312156110ec57600080fd5b6110f58361109b565b91506111036020840161109b565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561113857600080fd5b84359350602080860135935060408601359250606086013567ffffffffffffffff8082111561116657600080fd5b818801915088601f83011261117a57600080fd5b81358181111561118c5761118c61110c565b8060051b604051601f19603f830116810181811085821117156111b1576111b161110c565b60405291825284820192508381018501918b8311156111cf57600080fd5b938501935b828510156111ed578435845293850193928501926111d4565b989b979a50959850505050505050565b60006020828403121561120f57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b81516101208201906003811061125257634e487b7160e01b600052602160045260246000fd5b808352506020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525092915050565b6001600160a01b0391909116815260200190565b600080604083850312156112d557600080fd5b823591506111036020840161109b565b60008060008060008060008060006101208a8c03121561130457600080fd5b505087359960208901359950604089013598606081013598506080810135975060a0810135965060c0810135955060e08101359450610100013592509050565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b634e487b7160e01b600052601260045260246000fd5b60006020828403121561139657600080fd5b5051919050565b6000602082840312156113af57600080fd5b815180151581146110d257600080fd5b634e487b7160e01b600052603260045260246000fd5b60006000198214156113f757634e487b7160e01b600052601160045260246000fd5b506001019056fea164736f6c6343000809000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c80637af6372d116100715780637af6372d14610127578063893d20e814610147578063a3998d2714610160578063bd3aedf614610199578063d0fab3ca146101ac578063dc8d3ce6146101b457600080fd5b806313af4035146100b9578063158ef93e146100ce57806336566f06146100f1578063485cc955146100f95780635c975abb1461010c5780636aaaf68314610114575b600080fd5b6100cc6100c73660046110b7565b6101c7565b005b6001546001600160a01b0316155b60405190151581526020015b60405180910390f35b6100cc61026f565b6100cc6101073660046110d9565b6102b9565b6100dc6103d9565b6100cc610122366004611122565b6103e9565b61013a6101353660046111fd565b61097a565b6040516100e8919061122c565b6000546001600160a01b03166040516100e891906112ae565b6100dc61016e3660046112c2565b60009182526005602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6100cc6101a73660046111fd565b610a6b565b6100cc610b33565b6100cc6101c23660046112e5565b610cb8565b6000546001600160a01b031633146101f2576040516317f6584d60e31b815260040160405180910390fd5b6001600160a01b03811661021957604051630465f79960e41b815260040160405180910390fd5b600080546001600160a01b0319166001600160a01b0383161790556040517f4ffd725fc4a22075e9ec71c59edf9c38cdeb588a91b24fc5b61388c5be41282b906102649083906112ae565b60405180910390a150565b6000546001600160a01b0316331461029a576040516317f6584d60e31b815260040160405180910390fd5b6102a26103d9565b156102b1576102af610f1f565b565b6102af610fb1565b6001546001600160a01b03166102e15760405162dc149f60e41b815260040160405180910390fd5b6001546001600160a01b0316331461030c5760405163bc40aee160e01b815260040160405180910390fd5b600180546001600160a01b03191690556001600160a01b038216610343576040516303a5f09160e21b815260040160405180910390fd5b6001600160a01b03811661036a5760405163b352a63160e01b815260040160405180910390fd5b600280546001600160a01b038481166001600160a01b03199283168117909355600380549185169190921681179091556040805192835260208301919091527f3cd5ec01b1ae7cfec6ca1863e2cd6aa25d6d1702825803ff2b7cc95010fffdc291015b60405180910390a15050565b600154600160a01b900460ff1690565b6103f16103d9565b156104175760405162461bcd60e51b815260040161040e90611344565b60405180910390fd5b8361043557604051635b26ac7160e01b815260040160405180910390fd5b600084815260046020526040808220815161012081019092528054829060ff16600281111561046657610466611216565b600281111561047757610477611216565b81526001828101546020830152600283015460408301526003830154606083015260048301546080830152600583015460a0830152600683015460c0830152600783015460e083015260089092015461010090910152909150815160028111156104e3576104e3611216565b146105015760405163379e7dc760e11b815260040160405180910390fd5b80606001518410806105165750806080015184115b1561053457604051635972996f60e11b815260040160405180910390fd5b8060e0015183108061054a575080610100015183115b15610568576040516314dcf90960e31b815260040160405180910390fd5b60003390506105c482602001518260405160200161059e919060609190911b6bffffffffffffffffffffffff1916815260140190565b60405160208183030381529060405280519060200120856110119092919063ffffffff16565b6105e15760405163f235cee760e01b815260040160405180910390fd5b60008681526005602090815260408083206001600160a01b038516845290915290205460ff161561062557604051633450cb4760e21b815260040160405180910390fd5b6000806000808560e00151881415610642575060a0850151610690565b85610100015188141561065a575060c0850151610690565b8560e00151866101000151038660e0015189038760a001518860c001510302816106865761068661136e565b048660a001510190505b6003546040516370a0823160e01b81526502de41353000838c028b020495506000916001600160a01b0316906370a08231906106d09030906004016112ae565b60206040518083038186803b1580156106e857600080fd5b505afa1580156106fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107209190611384565b90508085111561073657600094508660e0015198505b5050505060408381015160025491516307d061c560e41b81526001600160a01b038581166004830152602482018a905260448201859052918902606482018190524289016084830181905290939092600092911690637d061c509060a401602060405180830381600087803b1580156107ae57600080fd5b505af11580156107c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e69190611384565b60008b81526005602090815260408083206001600160a01b038a81168086529190935292819020805460ff1916600117905560035460025491516323b872dd60e01b815260048101949094529082166024840152604483018d905292935091909116906323b872dd90606401602060405180830381600087803b15801561086c57600080fd5b505af1158015610880573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a4919061139d565b5083156109355760035460025460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810187905291169063a9059cbb90604401602060405180830381600087803b1580156108fb57600080fd5b505af115801561090f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610933919061139d565b505b604080518b8152602081018390527f1d632f053eb6e817ebd2ee91a602ba1885314ccbb9e9fa3740245416b4205895910160405180910390a150505050505050505050565b6109cd604080516101208101909152806000815260200160008019168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60008281526004602052604090819020815161012081019092528054829060ff1660028111156109ff576109ff611216565b6002811115610a1057610a10611216565b815260018201546020820152600282015460408201526003820154606082015260048201546080820152600582015460a0820152600682015460c0820152600782015460e08201526008909101546101009091015292915050565b6000546001600160a01b03163314610a96576040516317f6584d60e31b815260040160405180910390fd5b80610ab457604051635b26ac7160e01b815260040160405180910390fd5b60008181526004602052604090206001815460ff166002811115610ada57610ada611216565b14610af85760405163379e7dc760e11b815260040160405180910390fd5b805460ff191660021781556040518281527ff64a5aa1a64c46c60a68b78cdc9a7c70398c06a42c1b379f8a7fec6e00fe6301906020016103cd565b6000546001600160a01b03163314610b5e576040516317f6584d60e31b815260040160405180910390fd5b6003546040516370a0823160e01b81526000916001600160a01b0316906370a0823190610b8f9030906004016112ae565b60206040518083038186803b158015610ba757600080fd5b505afa158015610bbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bdf9190611384565b905080610bff5760405163049d2cfb60e31b815260040160405180910390fd5b60035460005460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810184905291169063a9059cbb90604401602060405180830381600087803b158015610c4f57600080fd5b505af1158015610c63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c87919061139d565b506040518181527f85de091be18b1506795711e7cfa4b799aa13315833d24c8f92af184dad04209890602001610264565b6000546001600160a01b03163314610ce3576040516317f6584d60e31b815260040160405180910390fd5b88610d0157604051635b26ac7160e01b815260040160405180910390fd5b60008981526004602052604081205460ff166002811115610d2457610d24611216565b14610d4257604051631f11ecf560e31b815260040160405180910390fd5b861580610d4f5750606487115b15610d6d57604051630da0c90560e11b815260040160405180910390fd5b85610d8b57604051634f4940eb60e11b815260040160405180910390fd5b85851015610dac5760405163f112120b60e01b815260040160405180910390fd5b83610df5578215610dd05760405163eeea87cb60e01b815260040160405180910390fd5b818114610df057604051635d9dcc3960e11b815260040160405180910390fd5b610e55565b83831015610e165760405163eeea87cb60e01b815260040160405180910390fd5b81610e345760405163523b70bf60e01b815260040160405180910390fd5b81811015610e5557604051635d9dcc3960e11b815260040160405180910390fd5b600089815260046020818152604092839020805460ff19166001908117825581018c9055600281018b9055600381018a9055918201889055600582018790556006820186905560078201859055600890910183905581518b81529081018a9052908101889052606081018790526080810186905260a0810185905260c0810184905260e0810183905261010081018290527f17eab8e5d873f1bb8ded565d67e26a2965dc1eecd4f2eb7c49bf44f1e4d33ba8906101200160405180910390a1505050505050505050565b610f276103d9565b610f6a5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161040e565b6001805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051610fa791906112ae565b60405180910390a1565b610fb96103d9565b15610fd65760405162461bcd60e51b815260040161040e90611344565b6001805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610f9a3390565b60008261101e8584611027565b14949350505050565b600081815b8451811015611093576000858281518110611049576110496113bf565b6020026020010151905080831161106f5760008381526020829052604090209250611080565b600081815260208490526040902092505b508061108b816113d5565b91505061102c565b509392505050565b80356001600160a01b03811681146110b257600080fd5b919050565b6000602082840312156110c957600080fd5b6110d28261109b565b9392505050565b600080604083850312156110ec57600080fd5b6110f58361109b565b91506111036020840161109b565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561113857600080fd5b84359350602080860135935060408601359250606086013567ffffffffffffffff8082111561116657600080fd5b818801915088601f83011261117a57600080fd5b81358181111561118c5761118c61110c565b8060051b604051601f19603f830116810181811085821117156111b1576111b161110c565b60405291825284820192508381018501918b8311156111cf57600080fd5b938501935b828510156111ed578435845293850193928501926111d4565b989b979a50959850505050505050565b60006020828403121561120f57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b81516101208201906003811061125257634e487b7160e01b600052602160045260246000fd5b808352506020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525092915050565b6001600160a01b0391909116815260200190565b600080604083850312156112d557600080fd5b823591506111036020840161109b565b60008060008060008060008060006101208a8c03121561130457600080fd5b505087359960208901359950604089013598606081013598506080810135975060a0810135965060c0810135955060e08101359450610100013592509050565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b634e487b7160e01b600052601260045260246000fd5b60006020828403121561139657600080fd5b5051919050565b6000602082840312156113af57600080fd5b815180151581146110d257600080fd5b634e487b7160e01b600052603260045260246000fd5b60006000198214156113f757634e487b7160e01b600052601160045260246000fd5b506001019056fea164736f6c6343000809000a",
  "devdoc": {
    "author": "Stanisław Głogowski <stan@metahero.io>",
    "kind": "dev",
    "methods": {
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      }
    },
    "title": "Metahero Loyalty Token (distributor)",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3,
        "contract": "src/MetaheroLoyaltyTokenDistributor.sol:MetaheroLoyaltyTokenDistributor",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 73,
        "contract": "src/MetaheroLoyaltyTokenDistributor.sol:MetaheroLoyaltyTokenDistributor",
        "label": "_deployer",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 149,
        "contract": "src/MetaheroLoyaltyTokenDistributor.sol:MetaheroLoyaltyTokenDistributor",
        "label": "_paused",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 5022,
        "contract": "src/MetaheroLoyaltyTokenDistributor.sol:MetaheroLoyaltyTokenDistributor",
        "label": "_loyaltyToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(MetaheroLoyaltyToken)4406"
      },
      {
        "astId": 5025,
        "contract": "src/MetaheroLoyaltyTokenDistributor.sol:MetaheroLoyaltyTokenDistributor",
        "label": "_paymentToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)887"
      },
      {
        "astId": 5030,
        "contract": "src/MetaheroLoyaltyTokenDistributor.sol:MetaheroLoyaltyTokenDistributor",
        "label": "_invitations",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Invitation)5016_storage)"
      },
      {
        "astId": 5036,
        "contract": "src/MetaheroLoyaltyTokenDistributor.sol:MetaheroLoyaltyTokenDistributor",
        "label": "_usedInvitation",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)887": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(MetaheroLoyaltyToken)4406": {
        "encoding": "inplace",
        "label": "contract MetaheroLoyaltyToken",
        "numberOfBytes": "20"
      },
      "t_enum(InvitationStates)4996": {
        "encoding": "inplace",
        "label": "enum MetaheroLoyaltyTokenDistributor.InvitationStates",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_struct(Invitation)5016_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MetaheroLoyaltyTokenDistributor.Invitation)",
        "numberOfBytes": "32",
        "value": "t_struct(Invitation)5016_storage"
      },
      "t_struct(Invitation)5016_storage": {
        "encoding": "inplace",
        "label": "struct MetaheroLoyaltyTokenDistributor.Invitation",
        "members": [
          {
            "astId": 4999,
            "contract": "src/MetaheroLoyaltyTokenDistributor.sol:MetaheroLoyaltyTokenDistributor",
            "label": "state",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(InvitationStates)4996"
          },
          {
            "astId": 5001,
            "contract": "src/MetaheroLoyaltyTokenDistributor.sol:MetaheroLoyaltyTokenDistributor",
            "label": "treeRoot",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 5003,
            "contract": "src/MetaheroLoyaltyTokenDistributor.sol:MetaheroLoyaltyTokenDistributor",
            "label": "depositPower",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5005,
            "contract": "src/MetaheroLoyaltyTokenDistributor.sol:MetaheroLoyaltyTokenDistributor",
            "label": "minDeposit",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5007,
            "contract": "src/MetaheroLoyaltyTokenDistributor.sol:MetaheroLoyaltyTokenDistributor",
            "label": "maxDeposit",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5009,
            "contract": "src/MetaheroLoyaltyTokenDistributor.sol:MetaheroLoyaltyTokenDistributor",
            "label": "minRewardsAPY",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 5011,
            "contract": "src/MetaheroLoyaltyTokenDistributor.sol:MetaheroLoyaltyTokenDistributor",
            "label": "maxRewardsAPY",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 5013,
            "contract": "src/MetaheroLoyaltyTokenDistributor.sol:MetaheroLoyaltyTokenDistributor",
            "label": "minWithdrawalLockTime",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 5015,
            "contract": "src/MetaheroLoyaltyTokenDistributor.sol:MetaheroLoyaltyTokenDistributor",
            "label": "maxWithdrawalLockTime",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}