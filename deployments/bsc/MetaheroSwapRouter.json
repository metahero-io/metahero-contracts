{
  "address": "0xbF815B78D177543Cc56B16F456C4c74d8295143e",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "native",
          "type": "address"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SupportedTokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SupportedTokenRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        }
      ],
      "name": "addSupportedToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "addSupportedTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "router_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "native",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        }
      ],
      "name": "removeSupportedToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "removeSupportedTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "supportedToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        }
      ],
      "name": "swapSupportedTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xcb42127b7e6d3e1483638e1f970a206025959b84f98adb5f6a9da9bc1abadd3c",
  "receipt": {
    "to": null,
    "from": "0x3531dB095F19B21b7CDF0300c25CeC817335A6A4",
    "contractAddress": "0xbF815B78D177543Cc56B16F456C4c74d8295143e",
    "transactionIndex": 6,
    "gasUsed": "2115819",
    "logsBloom": "0x
    "blockHash": "0xa0a48ec5ba02c73dd2bae4e1e33dc55a48344907d69825ff913a20f8d655c56d",
    "transactionHash": "0xcb42127b7e6d3e1483638e1f970a206025959b84f98adb5f6a9da9bc1abadd3c",
    "logs": [],
    "blockNumber": 10521227,
    "cumulativeGasUsed": "3131798",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "8e009ef51c8277dc9c4d3913f55be85d",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"native\",\"type\":\"address\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SupportedTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SupportedTokenRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"addSupportedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"addSupportedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"native\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"removeSupportedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"removeSupportedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"supportedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"name\":\"swapSupportedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Stanis\\u0142aw G\\u0142ogowski <stan@metahero.io>\",\"events\":{\"Initialized(address,address,address)\":{\"details\":\"Emitted when the contract is initialized\",\"params\":{\"factory\":\"factory address\",\"native\":\"native address\",\"token\":\"token address\"}},\"SupportedTokenAdded(address)\":{\"details\":\"Emitted when supported token is added\",\"params\":{\"token\":\"token address\"}},\"SupportedTokenRemoved(address)\":{\"details\":\"Emitted when supported token is removed\",\"params\":{\"token\":\"token address\"}}},\"kind\":\"dev\",\"methods\":{\"addSupportedToken(address)\":{\"details\":\"Adds supported token\",\"params\":{\"token_\":\"token address\"}},\"addSupportedTokens(address[])\":{\"details\":\"Adds supported tokens\",\"params\":{\"tokens\":\"tokens array\"}},\"constructor\":{\"details\":\"Public constructor\"},\"initialize(address,address)\":{\"details\":\"Initializes the contract\",\"params\":{\"router_\":\"router address\",\"token_\":\"token address\"}},\"initialized()\":{\"returns\":{\"_0\":\"true when contract is initialized\"}},\"removeSupportedToken(address)\":{\"details\":\"Removes supported tokens\",\"params\":{\"token_\":\"token address\"}},\"removeSupportedTokens(address[])\":{\"details\":\"Removes supported tokens\",\"params\":{\"tokens\":\"tokens array\"}},\"setOwner(address)\":{\"params\":{\"owner_\":\"owner address\"}}},\"title\":\"Metahero swap router\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initialized()\":{\"notice\":\"Checks if contract is initialized\"},\"setOwner(address)\":{\"notice\":\"Sets a new owner\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/MetaheroSwapRouter.sol\":\"MetaheroSwapRouter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/MetaheroSwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"./core/access/Owned.sol\\\";\\nimport \\\"./core/erc20/IERC20.sol\\\";\\nimport \\\"./core/lifecycle/Initializable.sol\\\";\\nimport \\\"./core/math/SafeMathLib.sol\\\";\\nimport \\\"./pancakeswap/PancakeTransferHelper.sol\\\";\\nimport \\\"./uniswapV2/IUniswapV2Factory.sol\\\";\\nimport \\\"./uniswapV2/IUniswapV2Pair.sol\\\";\\nimport \\\"./uniswapV2/IUniswapV2Router02.sol\\\";\\n\\n\\n/**\\n * @title Metahero swap router\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@metahero.io>\\n */\\ncontract MetaheroSwapRouter is Owned, Initializable {\\n  using SafeMathLib for uint256;\\n\\n  address public token;\\n  address public factory;\\n  address public native;\\n\\n  mapping (address => bool) private supportedTokens;\\n\\n  // events\\n\\n  /**\\n   * @dev Emitted when the contract is initialized\\n   * @param token token address\\n   * @param factory factory address\\n   * @param native native address\\n   */\\n  event Initialized(\\n    address token,\\n    address factory,\\n    address native\\n  );\\n\\n  /**\\n   * @dev Emitted when supported token is added\\n   * @param token token address\\n   */\\n  event SupportedTokenAdded(\\n    address token\\n  );\\n\\n  /**\\n   * @dev Emitted when supported token is removed\\n   * @param token token address\\n   */\\n  event SupportedTokenRemoved(\\n    address token\\n  );\\n\\n  /**\\n   * @dev Public constructor\\n   */\\n  constructor ()\\n    public\\n    Owned()\\n    Initializable()\\n  {\\n    //\\n  }\\n\\n  // external functions\\n\\n  /**\\n   * @dev Initializes the contract\\n   * @param token_ token address\\n   * @param router_ router address\\n   */\\n  function initialize(\\n    address token_,\\n    address router_\\n  )\\n    external\\n    onlyInitializer\\n  {\\n    require(\\n      token_ != address(0),\\n      \\\"MetaheroSwapRouter#1\\\" // token is the zero address\\n    );\\n\\n    require(\\n      router_ != address(0),\\n      \\\"MetaheroSwapRouter#2\\\" // router is the zero address\\n    );\\n\\n    IUniswapV2Router02 router = IUniswapV2Router02(router_);\\n\\n    token = token_;\\n    factory = router.factory();\\n    native = router.WETH();\\n\\n    emit Initialized(\\n      token_,\\n      factory,\\n      native\\n    );\\n  }\\n\\n  /**\\n   * @dev Adds supported token\\n   * @param token_ token address\\n   */\\n  function addSupportedToken(\\n    address token_\\n  )\\n    external\\n    onlyOwner\\n  {\\n    _addSupportedToken(token_);\\n  }\\n\\n  /**\\n   * @dev Adds supported tokens\\n   * @param tokens tokens array\\n   */\\n  function addSupportedTokens(\\n    address[] calldata tokens\\n  )\\n    external\\n    onlyOwner\\n  {\\n    uint len = tokens.length;\\n\\n    require(\\n      len != 0,\\n      \\\"MetaheroSwapRouter#3\\\" // tokens list is empty\\n    );\\n\\n    for (uint index; index < len; index++) {\\n      _addSupportedToken(tokens[index]);\\n    }\\n  }\\n\\n  /**\\n   * @dev Removes supported tokens\\n   * @param token_ token address\\n   */\\n  function removeSupportedToken(\\n    address token_\\n  )\\n    external\\n    onlyOwner\\n  {\\n    _removeSupportedToken(token_);\\n  }\\n\\n  /**\\n   * @dev Removes supported tokens\\n   * @param tokens tokens array\\n   */\\n  function removeSupportedTokens(\\n    address[] calldata tokens\\n  )\\n    external\\n    onlyOwner\\n  {\\n    uint len = tokens.length;\\n\\n    require(\\n      len != 0,\\n      \\\"MetaheroSwapRouter#4\\\" // tokens list is empty\\n    );\\n\\n    for (uint index; index < len; index++) {\\n      _removeSupportedToken(tokens[index]);\\n    }\\n  }\\n\\n  function swapSupportedTokens(\\n    address supportedToken,\\n    uint256 amountIn,\\n    uint256 amountOutMin\\n  )\\n    external\\n  {\\n    require(\\n      supportedTokens[supportedToken],\\n      \\\"MetaheroSwapRouter#5\\\" // token is not supported\\n    );\\n\\n    address[] memory path = new address[](3);\\n\\n    path[0] = supportedToken;\\n    path[1] = native;\\n    path[2] = token;\\n\\n    _swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n      amountIn,\\n      amountOutMin,\\n      path,\\n      msg.sender\\n    );\\n  }\\n\\n  // private functions\\n\\n  function _addSupportedToken(\\n    address token_\\n  )\\n    private\\n  {\\n    require(\\n      token_ != address(0),\\n      \\\"MetaheroSwapRouter#6\\\" // token is the zero address\\n    );\\n\\n    require(\\n      !supportedTokens[token_],\\n      \\\"MetaheroSwapRouter#7\\\" // token already supported\\n    );\\n\\n    supportedTokens[token_] = true;\\n\\n    emit SupportedTokenAdded(\\n      token_\\n    );\\n  }\\n\\n  function _removeSupportedToken(\\n    address token_\\n  )\\n    private\\n  {\\n    require(\\n      supportedTokens[token_],\\n      \\\"MetaheroSwapRouter#8\\\" // token is not supported\\n    );\\n\\n    supportedTokens[token_] = false;\\n\\n    emit SupportedTokenRemoved(\\n      token_\\n    );\\n  }\\n\\n  function _swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] memory path,\\n    address to\\n  )\\n    private\\n  {\\n    PancakeTransferHelper.safeTransferFrom(\\n      path[0], msg.sender, _pairFor(path[0], path[1]), amountIn\\n    );\\n\\n    uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\\n\\n    _swapSupportingFeeOnTransferTokens(path, to);\\n\\n    require(\\n      IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,\\n      \\\"MetaheroSwapRouter#9\\\"\\n    );\\n  }\\n\\n  function _swapSupportingFeeOnTransferTokens(\\n    address[] memory path,\\n    address _to\\n  )\\n    private\\n  {\\n    for (uint i; i < path.length - 1; i++) {\\n      (address input, address output) = (path[i], path[i + 1]);\\n\\n      (address token0,) = _sortTokens(input, output);\\n\\n      IUniswapV2Pair pair = IUniswapV2Pair(_pairFor(input, output));\\n\\n      uint amountInput;\\n      uint amountOutput;\\n\\n      {\\n        (uint reserve0, uint reserve1,) = pair.getReserves();\\n        (uint reserveInput, uint reserveOutput) = input == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n        amountInput = IERC20(input).balanceOf(address(pair)).sub(reserveInput);\\n        amountOutput = _getAmountOut(amountInput, reserveInput, reserveOutput);\\n      }\\n\\n      (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOutput) : (amountOutput, uint(0));\\n\\n      address to = i < path.length - 2 ? _pairFor(output, path[i + 2]) : _to;\\n\\n      pair.swap(amount0Out, amount1Out, to, new bytes(0));\\n    }\\n  }\\n\\n  // private functions (views)\\n\\n  function _pairFor(\\n    address tokenA,\\n    address tokenB\\n  )\\n    private\\n    view\\n    returns (address)\\n  {\\n    (address token0, address token1) = _sortTokens(tokenA, tokenB);\\n\\n    return IUniswapV2Factory(factory).getPair(token0, token1);\\n  }\\n\\n  // private functions (pure)\\n\\n  function _sortTokens(\\n    address tokenA,\\n    address tokenB\\n  )\\n    private\\n    pure\\n    returns (address, address)\\n  {\\n    return tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n  }\\n\\n  function _getAmountOut(\\n    uint amountIn,\\n    uint reserveIn,\\n    uint reserveOut\\n  )\\n    private\\n    pure\\n    returns (uint)\\n  {\\n    require(\\n      amountIn > 0,\\n      \\\"MetaheroSwapRouter#10\\\" // insufficient input amount\\n    );\\n\\n    require(\\n      reserveIn > 0 &&\\n      reserveOut > 0,\\n      \\\"MetaheroSwapRouter#11\\\" // insufficient liquidity\\n    );\\n\\n    uint amountInWithFee = amountIn.mul(998);\\n    uint numerator = amountInWithFee.mul(reserveOut);\\n    uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\n\\n    return numerator / denominator;\\n  }\\n}\\n\",\"keccak256\":\"0x8f6346604da6ee4941b2f550965aa0b40f3fc51e818e21bab0986e6d5b03b260\",\"license\":\"MIT\"},\"src/core/access/Owned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Owned\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@metahero.io>\\n */\\ncontract Owned {\\n  /**\\n   * @return owner address\\n   */\\n  address public owner;\\n\\n  // modifiers\\n\\n  /**\\n   * @dev Throws if msg.sender is not the owner\\n   */\\n  modifier onlyOwner() {\\n    require(\\n      msg.sender == owner,\\n      \\\"Owned#1\\\" // msg.sender is not the owner\\n    );\\n\\n    _;\\n  }\\n\\n  // events\\n\\n  /**\\n   * @dev Emitted when the owner is updated\\n   * @param owner new owner address\\n   */\\n  event OwnerUpdated(\\n    address owner\\n  );\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor()\\n    internal\\n  {\\n    owner = msg.sender;\\n  }\\n\\n  // external functions\\n\\n  /**\\n   * @notice Sets a new owner\\n   * @param owner_ owner address\\n   */\\n  function setOwner(\\n    address owner_\\n  )\\n    external\\n    onlyOwner\\n  {\\n    _setOwner(owner_);\\n  }\\n\\n  // internal functions\\n\\n  function _setOwner(\\n    address owner_\\n  )\\n    internal\\n  {\\n    require(\\n      owner_ != address(0),\\n      \\\"Owned#2\\\" // owner is the zero address\\n    );\\n\\n    require(\\n      owner_ != owner,\\n      \\\"Owned#3\\\" // does not update the owner\\n    );\\n\\n    owner = owner_;\\n\\n    emit OwnerUpdated(\\n      owner_\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0xf51e5a9b2810c8dac7bd959f56d334ba9221f0c87dd7d79062188a25f634ca68\",\"license\":\"MIT\"},\"src/core/erc20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title ERC20 token interface\\n *\\n * @notice See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\\n */\\ninterface IERC20 {\\n  // events\\n\\n  event Approval(\\n    address indexed owner,\\n    address indexed spender,\\n    uint256 value\\n  );\\n\\n  event Transfer(\\n    address indexed from,\\n    address indexed to,\\n    uint256 value\\n  );\\n\\n  // external functions\\n\\n  function approve(\\n    address spender,\\n    uint256 value\\n  )\\n    external\\n    returns (bool);\\n\\n  function transfer(\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (bool);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (bool);\\n\\n  // external functions (views)\\n\\n  function totalSupply()\\n    external\\n    view\\n    returns (uint256);\\n\\n  function balanceOf(\\n    address owner\\n  )\\n    external\\n    view\\n    returns (uint256);\\n\\n  function allowance(\\n    address owner,\\n    address spender\\n  )\\n    external\\n    view\\n    returns (uint256);\\n\\n  // external functions (pure)\\n\\n  function name()\\n    external\\n    pure\\n    returns (string memory);\\n\\n  function symbol()\\n    external\\n    pure\\n    returns (string memory);\\n\\n  function decimals()\\n    external\\n    pure\\n    returns (uint8);\\n}\\n\",\"keccak256\":\"0x724e6080597d9117b6b78581bad2dc6faa30bf63e015ec583df6cb10ce7fb7c8\",\"license\":\"MIT\"},\"src/core/lifecycle/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Initializable\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@metahero.io>\\n */\\ncontract Initializable {\\n  address private initializer;\\n\\n  // modifiers\\n\\n  /**\\n   * @dev Throws if msg.sender is not the initializer\\n   */\\n  modifier onlyInitializer() {\\n    require(\\n      initializer != address(0),\\n      \\\"Initializable#1\\\" // already initialized\\n    );\\n\\n    require(\\n      msg.sender == initializer,\\n      \\\"Initializable#2\\\" // msg.sender is not the initializer\\n    );\\n\\n    /// @dev removes initializer\\n    initializer = address(0);\\n\\n    _;\\n  }\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor()\\n    internal\\n  {\\n    initializer = msg.sender;\\n  }\\n\\n  // external functions (views)\\n\\n  /**\\n   * @notice Checks if contract is initialized\\n   * @return true when contract is initialized\\n   */\\n  function initialized()\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return initializer == address(0);\\n  }\\n}\\n\",\"keccak256\":\"0xe4741a154e5f2e6db7ba837b33e3d2f9c32179217de0c13cbda888170be5e24d\",\"license\":\"MIT\"},\"src/core/math/SafeMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Safe math library\\n *\\n * @notice Based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/5fe8f4e93bd1d4f5cc9a6899d7f24f5ffe4c14aa/contracts/math/SafeMath.sol\\n */\\nlibrary SafeMathLib {\\n  // internal functions (pure)\\n\\n  /**\\n   * @notice Calcs a + b\\n   */\\n  function add(\\n    uint256 a,\\n    uint256 b\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    uint256 c = a + b;\\n\\n    require(\\n      c >= a,\\n      \\\"SafeMathLib#1\\\"\\n    );\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @notice Calcs a - b\\n   */\\n  function sub(\\n    uint256 a,\\n    uint256 b\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    require(\\n      b <= a,\\n      \\\"SafeMathLib#2\\\"\\n    );\\n\\n    return a - b;\\n  }\\n\\n  /**\\n   * @notice Calcs a x b\\n   */\\n  function mul(\\n    uint256 a,\\n    uint256 b\\n  )\\n    internal\\n    pure\\n    returns (uint256 result)\\n  {\\n    if (a != 0 && b != 0) {\\n      result = a * b;\\n\\n      require(\\n        result / a == b,\\n        \\\"SafeMathLib#3\\\"\\n      );\\n    }\\n\\n    return result;\\n  }\\n\\n  /**\\n   * @notice Calcs a / b\\n   */\\n  function div(\\n    uint256 a,\\n    uint256 b\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    require(\\n      b != 0,\\n      \\\"SafeMathLib#4\\\"\\n    );\\n\\n    return a / b;\\n  }\\n}\\n\",\"keccak256\":\"0xb4d920f8a4ce97a5cd5a7afe9943be07e05abb3ea267c772473644173f5b71e2\",\"license\":\"MIT\"},\"src/pancakeswap/PancakeTransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n/* solhint-disable */\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Pancake transfer helper library\\n *\\n * @notice Based on https://github.com/pancakeswap/pancake-swap-lib/blob/0c16ece6edc575dc92076245badd62cddead47b3/contracts/utils/TransferHelper.sol\\n */\\nlibrary PancakeTransferHelper {\\n  // internal functions\\n\\n  function safeApprove(\\n    address token,\\n    address to,\\n    uint256 value\\n  )\\n    internal\\n  {\\n    // bytes4(keccak256(bytes('approve(address,uint256)')));\\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n    require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n  }\\n\\n  function safeTransfer(\\n    address token,\\n    address to,\\n    uint256 value\\n  )\\n    internal\\n  {\\n    // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n    require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n  }\\n\\n  function safeTransferFrom(\\n    address token,\\n    address from,\\n    address to,\\n    uint256 value\\n  )\\n    internal\\n  {\\n    // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n    require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n  }\\n\\n  function safeTransferBNB(\\n    address to,\\n    uint256 value\\n  )\\n    internal\\n  {\\n    (bool success,) = to.call{value : value}(new bytes(0));\\n    require(success, 'TransferHelper: BNB_TRANSFER_FAILED');\\n  }\\n}\\n\",\"keccak256\":\"0x6e437065362720070ee3b1d6d5e69ef0bf664a7e7043c38e49ca35ff35f7f10a\",\"license\":\"GPL-3.0\"},\"src/uniswapV2/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Uniswap v2 factory interface\\n *\\n * @notice Based on https://github.com/Uniswap/uniswap-v2-core/blob/4dd59067c76dea4a0e8e4bfdda41877a6b16dedc/contracts/interfaces/IUniswapV2Factory.sol\\n */\\ninterface IUniswapV2Factory {\\n  // events\\n\\n  event PairCreated(\\n    address indexed token0,\\n    address indexed token1,\\n    address pair,\\n    uint256\\n  );\\n\\n  // external functions\\n\\n  function createPair(\\n    address tokenA,\\n    address tokenB\\n  )\\n    external\\n    returns (address);\\n\\n  function setFeeTo(\\n    address\\n  )\\n    external;\\n\\n  function setFeeToSetter(\\n    address\\n  )\\n    external;\\n\\n  // external functions (views)\\n\\n  function feeTo()\\n    external\\n    view\\n    returns (address);\\n\\n  function feeToSetter()\\n    external\\n    view\\n    returns (address);\\n\\n  function getPair(\\n    address tokenA,\\n    address tokenB\\n  )\\n    external\\n    view\\n    returns (address);\\n\\n  function allPairs(\\n    uint256\\n  )\\n    external\\n    view\\n    returns (address);\\n\\n  function allPairsLength()\\n    external\\n    view\\n    returns (uint256);\\n}\\n\\n\",\"keccak256\":\"0x3f4c429ad9f5799a8363772683c58b2f8f46cb99b968af13d4ed126b5097dba6\",\"license\":\"GPL-3.0\"},\"src/uniswapV2/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n/* solhint-disable func-name-mixedcase */\\npragma solidity ^0.6.12;\\n\\nimport \\\"../core/erc20/IERC20.sol\\\";\\n\\n\\n/**\\n * @title Uniswap V2 pair interface\\n *\\n * @notice Based on https://github.com/Uniswap/uniswap-v2-core/blob/4dd59067c76dea4a0e8e4bfdda41877a6b16dedc/contracts/interfaces/IUniswapV2Pair.sol\\n */\\ninterface IUniswapV2Pair is IERC20 {\\n  // events\\n\\n  event Mint(\\n    address indexed sender,\\n    uint256 amount0,\\n    uint256 amount1\\n  );\\n\\n  event Burn(\\n    address indexed sender,\\n    uint256 amount0,\\n    uint256 amount1,\\n    address indexed to\\n  );\\n\\n  event Swap(\\n    address indexed sender,\\n    uint256 amount0In,\\n    uint256 amount1In,\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address indexed to\\n  );\\n\\n  event Sync(\\n    uint112 reserve0,\\n    uint112 reserve1\\n  );\\n\\n  // external functions\\n\\n  function initialize(\\n    address,\\n    address\\n  )\\n    external;\\n\\n  function mint(\\n    address to\\n  )\\n    external\\n    returns (uint256);\\n\\n  function burn(\\n    address to\\n  )\\n    external\\n    returns (uint256, uint256);\\n\\n  function swap(\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address to,\\n    bytes calldata data\\n  )\\n    external;\\n\\n  function skim(\\n    address to\\n  )\\n    external;\\n\\n  function sync()\\n    external;\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  )\\n    external;\\n\\n  // external functions (views)\\n\\n  function DOMAIN_SEPARATOR()\\n    external\\n    view\\n    returns (bytes32);\\n\\n  function nonces(\\n    address owner\\n  )\\n    external\\n    view\\n    returns (uint256);\\n\\n  function factory()\\n    external\\n    view\\n    returns (address);\\n\\n  function token0()\\n    external\\n    view\\n    returns (address);\\n\\n  function token1()\\n    external\\n    view\\n    returns (address);\\n\\n  function getReserves()\\n    external\\n    view\\n    returns (uint112, uint112, uint32);\\n\\n  function price0CumulativeLast()\\n    external\\n    view\\n    returns (uint256);\\n\\n  function price1CumulativeLast()\\n    external\\n    view\\n    returns (uint256);\\n\\n  function kLast()\\n    external\\n    view\\n    returns (uint256);\\n\\n  // external functions (pure)\\n\\n  function PERMIT_TYPEHASH()\\n    external\\n    pure\\n    returns (bytes32);\\n\\n  function MINIMUM_LIQUIDITY()\\n    external\\n    pure\\n    returns (uint256);\\n}\\n\",\"keccak256\":\"0xecc8557d3b3a82b1ce1fd0e98ec27c0759b6ce9c2d5de3c8235e68f4e897dfe2\",\"license\":\"GPL-3.0\"},\"src/uniswapV2/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n/* solhint-disable func-name-mixedcase */\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Uniswap V2 router01 interface\\n *\\n * @notice Based on https://github.com/Uniswap/uniswap-v2-periphery/blob/dda62473e2da448bc9cb8f4514dadda4aeede5f4/contracts/interfaces/IUniswapV2Router01.sol\\n */\\ninterface IUniswapV2Router01 {\\n  // external functions\\n\\n  function addLiquidityETH(\\n    address token,\\n    uint256 amountTokenDesired,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    payable\\n    returns (uint256, uint256, uint256);\\n\\n  function swapExactETHForTokens(\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    payable\\n    returns (uint256[] memory);\\n\\n  function addLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint256 amountADesired,\\n    uint256 amountBDesired,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    returns (uint256, uint256, uint256);\\n\\n  function removeLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint256 liquidity,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    returns (uint256, uint256);\\n\\n  function removeLiquidityETH(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    returns (uint256, uint256);\\n\\n  function removeLiquidityWithPermit(\\n    address tokenA,\\n    address tokenB,\\n    uint256 liquidity,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  )\\n    external\\n    returns (uint256, uint256);\\n\\n  function removeLiquidityETHWithPermit(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  )\\n    external\\n    returns (uint256, uint256);\\n\\n  function swapExactTokensForTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    returns (uint256[] memory);\\n\\n  function swapTokensForExactTokens(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    returns (uint256[] memory);\\n\\n  function swapTokensForExactETH(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    returns (uint256[] memory);\\n\\n  function swapExactTokensForETH(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    returns (uint256[] memory);\\n\\n  function swapETHForExactTokens(\\n    uint256 amountOut,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    payable\\n    returns (uint256[] memory);\\n\\n  // external functions (views)\\n\\n  function getAmountsOut(\\n    uint256 amountIn,\\n    address[] calldata path\\n  )\\n    external\\n    view\\n    returns (uint256[] memory);\\n\\n  function getAmountsIn(\\n    uint256 amountOut,\\n    address[] calldata path\\n  )\\n    external\\n    view\\n    returns (uint256[] memory);\\n\\n  // external functions (pure)\\n\\n  function quote(\\n    uint256 amountA,\\n    uint256 reserveA,\\n    uint256 reserveB\\n  )\\n    external\\n    pure\\n    returns (uint256);\\n\\n  function getAmountOut(\\n    uint256 amountIn,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  )\\n    external\\n    pure\\n    returns (uint256);\\n\\n  function getAmountIn(\\n    uint256 amountOut,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  )\\n    external\\n    pure\\n    returns (uint256);\\n\\n  function factory()\\n    external\\n    pure\\n    returns (address);\\n\\n  function WETH()\\n    external\\n    pure\\n    returns (address);\\n}\\n\",\"keccak256\":\"0xbcce9ccf3cc2454c244a93311daa27415db6d70b52eb6f8b1931a3260d8b0453\",\"license\":\"GPL-3.0\"},\"src/uniswapV2/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.6.12;\\n\\nimport \\\"./IUniswapV2Router01.sol\\\";\\n\\n\\n/**\\n * @title Uniswap V2 router02 interface\\n *\\n * @notice Based on https://github.com/Uniswap/uniswap-v2-periphery/blob/dda62473e2da448bc9cb8f4514dadda4aeede5f4/contracts/interfaces/IUniswapV2Router02.sol\\n */\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n  // external functions\\n\\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    payable;\\n\\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    returns (uint256);\\n\\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  )\\n    external\\n    returns (uint256);\\n\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  )\\n    external;\\n\\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  )\\n    external;\\n}\\n\",\"keccak256\":\"0x4865cf07ff6897744d72b4e4aad523a2cfddf89348e1d8bfc41fdd38e733c937\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Stanisław Głogowski <stan@metahero.io>",
    "events": {
      "Initialized(address,address,address)": {
        "details": "Emitted when the contract is initialized",
        "params": {
          "factory": "factory address",
          "native": "native address",
          "token": "token address"
        }
      },
      "SupportedTokenAdded(address)": {
        "details": "Emitted when supported token is added",
        "params": {
          "token": "token address"
        }
      },
      "SupportedTokenRemoved(address)": {
        "details": "Emitted when supported token is removed",
        "params": {
          "token": "token address"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "addSupportedToken(address)": {
        "details": "Adds supported token",
        "params": {
          "token_": "token address"
        }
      },
      "addSupportedTokens(address[])": {
        "details": "Adds supported tokens",
        "params": {
          "tokens": "tokens array"
        }
      },
      "constructor": {
        "details": "Public constructor"
      },
      "initialize(address,address)": {
        "details": "Initializes the contract",
        "params": {
          "router_": "router address",
          "token_": "token address"
        }
      },
      "initialized()": {
        "returns": {
          "_0": "true when contract is initialized"
        }
      },
      "removeSupportedToken(address)": {
        "details": "Removes supported tokens",
        "params": {
          "token_": "token address"
        }
      },
      "removeSupportedTokens(address[])": {
        "details": "Removes supported tokens",
        "params": {
          "tokens": "tokens array"
        }
      },
      "setOwner(address)": {
        "params": {
          "owner_": "owner address"
        }
      }
    },
    "title": "Metahero swap router",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initialized()": {
        "notice": "Checks if contract is initialized"
      },
      "setOwner(address)": {
        "notice": "Sets a new owner"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6367,
        "contract": "src/MetaheroSwapRouter.sol:MetaheroSwapRouter",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7075,
        "contract": "src/MetaheroSwapRouter.sol:MetaheroSwapRouter",
        "label": "initializer",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2596,
        "contract": "src/MetaheroSwapRouter.sol:MetaheroSwapRouter",
        "label": "token",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2598,
        "contract": "src/MetaheroSwapRouter.sol:MetaheroSwapRouter",
        "label": "factory",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2600,
        "contract": "src/MetaheroSwapRouter.sol:MetaheroSwapRouter",
        "label": "native",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2604,
        "contract": "src/MetaheroSwapRouter.sol:MetaheroSwapRouter",
        "label": "supportedTokens",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}