{
  "address": "0x25FA1836187E3E6f3E6B5fA1e5e83c7a98e8aBa3",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnerUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnLP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        }
      ],
      "name": "canSyncLP",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "enableBurnLPAtValue",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "stableCoin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "uniswapRouter_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "settings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "enableBurnLPAtValue",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "stableCoin",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "syncLP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract HEROToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapFactory",
      "outputs": [
        {
          "internalType": "contract UniswapV2Factory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapRouter",
      "outputs": [
        {
          "internalType": "contract UniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapTokenPair",
      "outputs": [
        {
          "internalType": "contract UniswapV2Pair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xd4b03aa63516bdc8cff3e8de9d7ed0ca51daa0f437cdede0c71f6c12da8c2746",
  "receipt": {
    "to": null,
    "from": "0x2101F46D23b84eEa6a310B1dBa58f66DCE17A0Cf",
    "contractAddress": "0x25FA1836187E3E6f3E6B5fA1e5e83c7a98e8aBa3",
    "transactionIndex": 0,
    "gasUsed": "2232821",
    "logsBloom": "0x
    "blockHash": "0x16a624ca0ec61dc0291ffaafc5173a2cbcad465007889fb0195956bf0b98c3df",
    "transactionHash": "0xd4b03aa63516bdc8cff3e8de9d7ed0ca51daa0f437cdede0c71f6c12da8c2746",
    "logs": [],
    "blockNumber": 9958470,
    "cumulativeGasUsed": "2232821",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "9c597f66d696fe7cac7d8b6303648883",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"canSyncLP\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"enableBurnLPAtValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stableCoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniswapRouter_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"enableBurnLPAtValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stableCoin\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syncLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract HEROToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapFactory\",\"outputs\":[{\"internalType\":\"contract UniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract UniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapTokenPair\",\"outputs\":[{\"internalType\":\"contract UniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Public constructor\"}},\"title\":\"HERO liquidity pool manager for Uniswap V2\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/HEROLPManagerUniswapV2.sol\":\"HEROLPManagerUniswapV2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/HEROLPManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"./access/Owned.sol\\\";\\nimport \\\"./lifecycle/Initializable.sol\\\";\\nimport \\\"./math/MathLib.sol\\\";\\nimport \\\"./HEROToken.sol\\\";\\n\\n\\n/**\\n * @title HERO abstract liquidity pool manager\\n */\\nabstract contract HEROLPManager is Owned, Initializable {\\n  using MathLib for uint256;\\n\\n  HEROToken public token;\\n\\n  bool internal swapLocked;\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor ()\\n    internal\\n    Owned()\\n    Initializable()\\n  {\\n    //\\n  }\\n\\n  // external functions\\n\\n  receive()\\n    external\\n    payable\\n  {\\n    //\\n  }\\n\\n  function syncLP()\\n    external\\n  {\\n    if (!swapLocked) {\\n      swapLocked = true;\\n\\n      _syncLP();\\n\\n      swapLocked = false;\\n    }\\n  }\\n\\n  function burnLP(\\n    uint256 amount\\n  )\\n    external\\n    onlyOwner\\n  {\\n    require(\\n      amount != 0,\\n      \\\"HEROLPManager#1\\\"\\n    );\\n\\n    require(\\n      !swapLocked,\\n      \\\"HEROLPManager#2\\\"\\n    );\\n\\n    swapLocked = true;\\n\\n    _burnLP(amount);\\n\\n    swapLocked = false;\\n  }\\n\\n  // external functions (views)\\n\\n  function canSyncLP(\\n    address participant\\n  )\\n    external\\n    view\\n    virtual\\n    returns (bool);\\n\\n  // internal functions\\n\\n  function _initialize(\\n    address token_\\n  )\\n    internal\\n  {\\n    require(\\n      token_ != address(0),\\n      \\\"HEROLPManager#3\\\"\\n    );\\n\\n    token = HEROToken(token_);\\n  }\\n\\n  function _syncLP()\\n    internal\\n    virtual;\\n\\n  function _burnLP(\\n    uint256 amount\\n  )\\n    internal\\n    virtual;\\n}\\n\",\"keccak256\":\"0xffbc3295272031394669c3b65ac4a1561f943b823dc78e705962a4beb109e53c\",\"license\":\"MIT\"},\"src/HEROLPManagerUniswapV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"./uniswap/UniswapV2Factory.sol\\\";\\nimport \\\"./uniswap/UniswapV2Pair.sol\\\";\\nimport \\\"./uniswap/UniswapV2Router02.sol\\\";\\nimport \\\"./HEROLPManager.sol\\\";\\n\\n\\n/**\\n * @title HERO liquidity pool manager for Uniswap V2\\n */\\ncontract HEROLPManagerUniswapV2 is HEROLPManager {\\n  struct Settings {\\n    uint256 enableBurnLPAtValue;\\n    address stableCoin;\\n  }\\n\\n  Settings public settings;\\n  UniswapV2Factory public uniswapFactory;\\n  UniswapV2Pair public uniswapTokenPair;\\n  UniswapV2Router02 public uniswapRouter;\\n\\n  address private wrappedNative;\\n\\n  /**\\n   * @dev Public constructor\\n   */\\n  constructor ()\\n    public\\n    HEROLPManager()\\n  {\\n    //\\n  }\\n\\n  // external functions\\n\\n  function initialize(\\n    uint256 enableBurnLPAtValue,\\n    address stableCoin,\\n    address token_,\\n    address uniswapRouter_\\n  )\\n    external\\n    onlyInitializer\\n  {\\n    _initialize(token_);\\n\\n    if (enableBurnLPAtValue != 0) {\\n      require(\\n        stableCoin != address(0),\\n        \\\"HEROLPManagerUniswapV2#1\\\"\\n      );\\n\\n      settings.enableBurnLPAtValue = enableBurnLPAtValue;\\n      settings.stableCoin = stableCoin;\\n    }\\n\\n    require(\\n      uniswapRouter_ != address(0),\\n      \\\"HEROLPManagerUniswapV2#2\\\"\\n    );\\n\\n    uniswapRouter = UniswapV2Router02(uniswapRouter_);\\n    uniswapFactory = UniswapV2Factory(uniswapRouter.factory());\\n\\n    wrappedNative = uniswapRouter.WETH();\\n\\n    uniswapTokenPair = UniswapV2Pair(uniswapFactory.createPair(\\n      address(token),\\n      wrappedNative\\n    ));\\n  }\\n\\n  // external functions (views)\\n\\n  function canSyncLP(\\n    address participant\\n  )\\n    external\\n    view\\n    override\\n    returns (bool)\\n  {\\n    return participant != address(uniswapTokenPair);\\n  }\\n\\n  // internal functions\\n\\n  function _syncLP()\\n    internal\\n    override\\n  {\\n    uint256 tokensAmount = token.balanceOf(address(this));\\n\\n    if (tokensAmount != 0) {\\n      uint256 half = tokensAmount.div(2);\\n      uint256 otherHalf = tokensAmount.sub(half);\\n\\n      _swapTokensForNative(half);\\n\\n      _addLiquidity(\\n        otherHalf,\\n        address(this).balance\\n      );\\n    }\\n  }\\n\\n  function _burnLP(\\n    uint256 amount\\n  )\\n    internal\\n    override\\n  {\\n    uint256 tokenAmount;\\n\\n    if (settings.enableBurnLPAtValue != 0) {\\n      (tokenAmount, ) = _getLiquidityReserves();\\n\\n      require(\\n        tokenAmount != 0,\\n        \\\"HEROLPManagerUniswapV2#3\\\"\\n      );\\n\\n      require(\\n        amount <= tokenAmount,\\n        \\\"HEROLPManagerUniswapV2#4\\\"\\n      );\\n\\n      address[] memory path = new address[](3);\\n\\n      path[0] = address(token);\\n      path[1] = wrappedNative;\\n      path[2] = settings.stableCoin;\\n\\n      uint256[] memory amounts = uniswapRouter.getAmountsOut(amount, path);\\n\\n      uint256 tokensValue = amounts[2];\\n\\n      require(\\n        tokensValue > settings.enableBurnLPAtValue,\\n        \\\"HEROLPManagerUniswapV2#5\\\"\\n      );\\n\\n      uint256 amountValue = amount.mul(tokensValue).div(tokenAmount);\\n      uint256 maxValue = tokensValue.div(settings.enableBurnLPAtValue);\\n\\n      require(\\n        maxValue >= amountValue,\\n        \\\"HEROLPManagerUniswapV2#6\\\"\\n      );\\n    }\\n\\n    _removeLiquidity(\\n      uniswapTokenPair.balanceOf(address(this))\\n    );\\n\\n    tokenAmount = token.balanceOf(address(this));\\n\\n    require(\\n      tokenAmount >= amount, // should be at least 1\\n      \\\"HEROLPManagerUniswapV2#7\\\"\\n    );\\n\\n    token.burn(amount);\\n\\n    _addLiquidity(\\n      tokenAmount.sub(amount),\\n      address(this).balance\\n    );\\n  }\\n\\n  function _swapTokensForNative(\\n    uint256 tokenAmount\\n  )\\n    private\\n  {\\n    if (tokenAmount != 0) {\\n      token.approve(\\n        address(uniswapRouter),\\n        tokenAmount\\n      );\\n\\n      address[] memory path = new address[](2);\\n\\n      path[0] = address(token);\\n      path[1] = wrappedNative;\\n\\n      uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        tokenAmount,\\n        0,\\n        path,\\n        address(this),\\n        block.timestamp // solhint-disable-line not-rely-on-time\\n      );\\n    }\\n  }\\n\\n  function _addLiquidity(\\n    uint256 tokenAmount,\\n    uint256 nativeAmount\\n  )\\n    private\\n  {\\n    if (tokenAmount != 0 && nativeAmount != 0) {\\n      token.approve(\\n        address(uniswapRouter),\\n        tokenAmount\\n      );\\n\\n      uniswapRouter.addLiquidityETH{value : nativeAmount}(\\n        address(token),\\n        tokenAmount,\\n        0,\\n        0,\\n        address(this),\\n        block.timestamp // solhint-disable-line not-rely-on-time\\n      );\\n    }\\n  }\\n\\n  function _removeLiquidity(\\n    uint256 liquidity\\n  )\\n    private\\n    returns (\\n      uint256 tokenAmount,\\n      uint256 nativeAmount\\n    )\\n  {\\n    uniswapTokenPair.approve(\\n      address(uniswapRouter),\\n      liquidity\\n    );\\n\\n    return uniswapRouter.removeLiquidityETH(\\n      address(token),\\n      liquidity,\\n      0,\\n      0,\\n      address(this),\\n      block.timestamp // solhint-disable-line not-rely-on-time\\n    );\\n  }\\n\\n  // private functions (views)\\n\\n  function _getLiquidityReserves()\\n    private\\n    view\\n    returns (\\n      uint256 tokenAmount,\\n      uint256 nativeAmount\\n    )\\n  {\\n    (\\n      uint112 reserve0,\\n      uint112 reserve1,\\n    )= uniswapTokenPair.getReserves();\\n\\n    (tokenAmount, nativeAmount) = address(token) < wrappedNative\\n      ? (reserve0, reserve1)\\n      : (reserve1, reserve0);\\n\\n    return (tokenAmount, nativeAmount);\\n  }\\n}\\n\",\"keccak256\":\"0x5ec84e0b7777757cb425adc63da924ee447197ead1440c7938528bd2e284726f\",\"license\":\"MIT\"},\"src/HEROToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./access/Controlled.sol\\\";\\nimport \\\"./access/Owned.sol\\\";\\nimport \\\"./erc20/ERC20.sol\\\";\\nimport \\\"./lifecycle/Initializable.sol\\\";\\nimport \\\"./math/MathLib.sol\\\";\\nimport \\\"./HEROLPManager.sol\\\";\\n\\n\\n/**\\n * @title HERO token\\n */\\ncontract HEROToken is Controlled, Owned, ERC20, Initializable {\\n  using MathLib for uint256;\\n\\n  struct Fees {\\n    uint256 sender; // percent\\n    uint256 recipient; // percent\\n  }\\n\\n  struct Settings {\\n    Fees burnFees;\\n    Fees lpFees;\\n    Fees rewardsFees;\\n  }\\n\\n  struct Summary {\\n    uint256 totalExcluded;\\n    uint256 totalHolding;\\n    uint256 totalRewards;\\n    uint256 totalSupply;\\n  }\\n\\n  struct ExcludedAccount {\\n    bool exists;\\n    bool excludeSenderFromFee;\\n    bool excludeRecipientFromFee;\\n  }\\n\\n  // metadata\\n\\n  string private constant TOKEN_NAME = \\\"Metahero\\\";\\n  string private constant TOKEN_SYMBOL = \\\"HERO\\\";\\n  uint8 private constant TOKEN_DECIMALS = 18; // 0.000000000000000000\\n\\n  HEROLPManager public lpManager;\\n  Settings public settings;\\n  Summary public summary;\\n  bool public presaleFinished;\\n\\n  mapping (address => uint256) private accountBalances;\\n  mapping (address => mapping (address => uint256)) private accountAllowances;\\n  mapping (address => ExcludedAccount) private excludedAccounts;\\n\\n  // events\\n\\n  event PresaleFinished();\\n\\n  event AccountExcluded(\\n    address indexed account,\\n    bool excludeSenderFromFee,\\n    bool excludeRecipientFromFee\\n  );\\n\\n  event TotalRewardsUpdated(\\n    uint256 totalRewards\\n  );\\n\\n  /**\\n   * @dev Public constructor\\n   */\\n  constructor ()\\n    public\\n    Controlled()\\n    Owned()\\n    ERC20(TOKEN_NAME, TOKEN_SYMBOL, TOKEN_DECIMALS)\\n    Initializable()\\n  {\\n    //\\n  }\\n\\n  // external functions\\n\\n  function initialize(\\n    Fees memory burnFees,\\n    Fees memory lpFees,\\n    Fees memory rewardsFees,\\n    address payable lpManager_,\\n    address controller_,\\n    uint256 totalSupply_,\\n    address[] calldata excludedAccounts_\\n  )\\n    external\\n    onlyInitializer\\n  {\\n    settings.burnFees = burnFees;\\n    settings.lpFees = lpFees;\\n    settings.rewardsFees = rewardsFees;\\n\\n    if (\\n      lpFees.sender != 0 ||\\n      lpFees.recipient != 0\\n    ) {\\n      require(\\n        lpManager_ != address(0),\\n        \\\"HEROToken#1\\\"\\n      );\\n\\n      lpManager = HEROLPManager(lpManager_);\\n\\n      _excludeAccount(lpManager_, false, false);\\n    }\\n\\n    _initializeController(controller_);\\n\\n    if (totalSupply_ != 0) {\\n      _excludeAccount(msg.sender, true, true);\\n\\n      _mint(\\n        msg.sender,\\n        totalSupply_\\n      );\\n    }\\n\\n    uint256 excludedAccountsLen = excludedAccounts_.length;\\n\\n    for (uint256 index; index < excludedAccountsLen; index++) {\\n      _excludeAccount(excludedAccounts_[index], false, false);\\n    }\\n  }\\n\\n  function finishPresale()\\n    external\\n    onlyOwner\\n  {\\n    require(\\n      !presaleFinished,\\n      \\\"HEROToken#2\\\"\\n    );\\n\\n    presaleFinished = true;\\n\\n    emit PresaleFinished();\\n  }\\n\\n  function excludeAccount(\\n    address account,\\n    bool excludeSenderFromFee,\\n    bool excludeRecipientFromFee\\n  )\\n    external\\n    onlyOwner\\n  {\\n    _excludeAccount(\\n      account,\\n      excludeSenderFromFee,\\n      excludeRecipientFromFee\\n    );\\n  }\\n\\n  function approve(\\n    address spender,\\n    uint256 amount\\n  )\\n    external\\n    override\\n    returns (bool)\\n  {\\n    _approve(\\n      msg.sender,\\n      spender,\\n      amount\\n    );\\n\\n    return true;\\n  }\\n\\n  function mint(\\n    address account,\\n    uint256 amount\\n  )\\n    external\\n    onlyController\\n  {\\n    _mint(\\n      account,\\n      amount\\n    );\\n  }\\n\\n  function burn(\\n    uint256 amount\\n  )\\n    external\\n  {\\n    _burn(\\n      msg.sender,\\n      amount\\n    );\\n  }\\n\\n  function transfer(\\n    address recipient,\\n    uint256 amount\\n  )\\n    external\\n    override\\n    returns (bool)\\n  {\\n    _transfer(\\n      msg.sender,\\n      recipient,\\n      amount\\n    );\\n\\n    return true;\\n  }\\n\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    external\\n    override\\n    returns (bool)\\n  {\\n    _transfer(\\n      sender,\\n      recipient,\\n      amount\\n    );\\n\\n    uint256 allowance = accountAllowances[sender][msg.sender];\\n\\n    require(\\n      allowance >= amount,\\n      \\\"HEROToken#3\\\"\\n    );\\n\\n    _approve(\\n      sender,\\n      msg.sender,\\n      allowance.sub(amount)\\n    );\\n\\n    return true;\\n  }\\n\\n  // external functions (views)\\n\\n  function totalSupply()\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return summary.totalSupply;\\n  }\\n\\n  function allowance(\\n    address owner,\\n    address spender\\n  )\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return accountAllowances[owner][spender];\\n  }\\n\\n  function balanceOf(\\n    address account\\n  )\\n    external\\n    view\\n    override\\n    returns (uint256 result)\\n  {\\n    result = accountBalances[account].add(\\n      _calcRewards(account)\\n    );\\n\\n    return result;\\n  }\\n\\n  function getBalanceSummary(\\n    address account\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 totalBalance,\\n      uint256 holdingBalance,\\n      uint256 totalRewards\\n    )\\n  {\\n    holdingBalance = accountBalances[account];\\n    totalRewards = _calcRewards(account);\\n    totalBalance = holdingBalance.add(totalRewards);\\n\\n    return (totalBalance, holdingBalance, totalRewards);\\n  }\\n\\n  // private functions\\n\\n  function _excludeAccount(\\n    address account,\\n    bool excludeSenderFromFee,\\n    bool excludeRecipientFromFee\\n  )\\n    private\\n  {\\n    require(\\n      account != address(0),\\n      \\\"HEROToken#4\\\"\\n    );\\n\\n    if (excludedAccounts[account].exists) {\\n      require(\\n        excludedAccounts[account].excludeSenderFromFee != excludeSenderFromFee ||\\n        excludedAccounts[account].excludeRecipientFromFee != excludeRecipientFromFee,\\n        \\\"HEROToken#5\\\"\\n      );\\n\\n      excludedAccounts[account].excludeSenderFromFee = excludeSenderFromFee;\\n      excludedAccounts[account].excludeRecipientFromFee = excludeRecipientFromFee;\\n    } else {\\n      require(\\n        accountBalances[account] == 0,\\n        \\\"HEROToken#6\\\"\\n      );\\n\\n      excludedAccounts[account].exists = true;\\n      excludedAccounts[account].excludeSenderFromFee = excludeSenderFromFee;\\n      excludedAccounts[account].excludeRecipientFromFee = excludeRecipientFromFee;\\n    }\\n\\n    emit AccountExcluded(\\n      account,\\n      excludeSenderFromFee,\\n      excludeRecipientFromFee\\n    );\\n  }\\n\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    require(\\n      owner != address(0),\\n      \\\"HEROToken#7\\\"\\n    );\\n\\n    require(\\n      spender != address(0),\\n      \\\"HEROToken#8\\\"\\n    );\\n\\n    accountAllowances[owner][spender] = amount;\\n\\n    emit Approval(\\n      owner,\\n      spender,\\n      amount\\n    );\\n  }\\n\\n  function _mint(\\n    address account,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    require(\\n      account != address(0),\\n      \\\"HEROToken#9\\\"\\n    );\\n\\n    require(\\n      amount != 0,\\n      \\\"HEROToken#10\\\"\\n    );\\n\\n    require(\\n      excludedAccounts[account].exists,\\n      \\\"HEROToken#11\\\"\\n    );\\n\\n    summary.totalSupply = summary.totalSupply.add(amount);\\n    summary.totalExcluded = summary.totalExcluded.add(amount);\\n\\n    accountBalances[account] = accountBalances[account].add(amount);\\n\\n    _emitTransfer(\\n      address(0),\\n      account,\\n      amount\\n    );\\n  }\\n\\n  function _burn(\\n    address account,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    require(\\n      account != address(0),\\n      \\\"HEROToken#12\\\"\\n    );\\n\\n    require(\\n      amount != 0,\\n      \\\"HEROToken#13\\\"\\n    );\\n\\n    require(\\n      accountBalances[account] >= amount,\\n      \\\"HEROToken#14\\\"\\n    );\\n\\n    require(\\n      excludedAccounts[account].exists,\\n      \\\"HEROToken#15\\\"\\n    );\\n\\n    accountBalances[account] = accountBalances[account].sub(amount);\\n\\n    summary.totalSupply = summary.totalSupply.sub(amount);\\n    summary.totalExcluded = summary.totalExcluded.sub(amount);\\n\\n    _emitTransfer(\\n      account,\\n      address(0),\\n      amount\\n    );\\n  }\\n\\n  function _transfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    require(\\n      sender != address(0),\\n      \\\"HEROToken#16\\\"\\n    );\\n\\n    require(\\n      recipient != address(0),\\n      \\\"HEROToken#17\\\"\\n    );\\n\\n    require(\\n      sender != recipient,\\n      \\\"HEROToken#18\\\"\\n    );\\n\\n    require(\\n      amount != 0,\\n      \\\"HEROToken#19\\\"\\n    );\\n\\n    require(\\n      excludedAccounts[sender].exists ||\\n      presaleFinished,\\n      \\\"HEROToken#20\\\"\\n    );\\n\\n    if (\\n      !excludedAccounts[sender].exists &&\\n      !excludedAccounts[recipient].exists\\n    ) {\\n      _transferBetweenHolderAccounts(\\n        sender,\\n        recipient,\\n        amount\\n      );\\n    } else if (\\n      excludedAccounts[sender].exists &&\\n      !excludedAccounts[recipient].exists\\n    ) {\\n      _transferFromExcludedAccount(\\n        sender,\\n        recipient,\\n        amount\\n      );\\n    } else if (\\n      !excludedAccounts[sender].exists &&\\n      excludedAccounts[recipient].exists\\n    ) {\\n      _transferToExcludedAccount(\\n        sender,\\n        recipient,\\n        amount\\n      );\\n    } else {\\n      _transferBetweenExcludedAccounts(\\n        sender,\\n        recipient,\\n        amount\\n      );\\n    }\\n  }\\n\\n  function _transferBetweenHolderAccounts(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    uint256 senderAmount;\\n    uint256 senderBurnFee;\\n    uint256 senderLpFee;\\n\\n    uint256 recipientAmount;\\n    uint256 recipientBurnFee;\\n    uint256 recipientLpFee;\\n\\n    uint256 totalFee;\\n    uint256 totalLP;\\n\\n    {\\n      uint256 senderTotalFee;\\n      uint256 recipientTotalFee;\\n\\n      (\\n        senderTotalFee,\\n        senderBurnFee,\\n        senderLpFee\\n      ) = _calcTransferSenderFees(amount);\\n\\n      (\\n        recipientTotalFee,\\n        recipientBurnFee,\\n        recipientLpFee\\n      ) = _calcTransferRecipientFees(amount);\\n\\n      totalFee = senderTotalFee.add(recipientTotalFee);\\n      totalLP = senderLpFee.add(recipientLpFee);\\n      senderAmount = amount.add(senderTotalFee);\\n      recipientAmount = amount.sub(recipientTotalFee);\\n    }\\n\\n    if (summary.totalRewards != 0) {\\n      uint256 totalHoldingWithRewards = summary.totalHolding.add(\\n        summary.totalRewards\\n      );\\n\\n      senderAmount = senderAmount.mul(summary.totalHolding).div(\\n        totalHoldingWithRewards\\n      );\\n      recipientAmount = recipientAmount.mul(summary.totalHolding).div(\\n        totalHoldingWithRewards\\n      );\\n      totalFee = totalFee.mul(summary.totalHolding).div(\\n        totalHoldingWithRewards\\n      );\\n    }\\n\\n    require(\\n      accountBalances[sender] >= senderAmount,\\n      \\\"HEROToken#21\\\"\\n    );\\n\\n    accountBalances[sender] = accountBalances[sender].sub(senderAmount);\\n    accountBalances[recipient] = accountBalances[recipient].add(recipientAmount);\\n\\n    _emitTransfer(\\n      sender,\\n      recipient,\\n      amount\\n    );\\n\\n    _emitTransfer(\\n      sender,\\n      address(0),\\n      senderBurnFee\\n    );\\n\\n    _emitTransfer(\\n      sender,\\n      address(lpManager),\\n      senderLpFee\\n    );\\n\\n    _emitTransfer(\\n      recipient,\\n      address(0),\\n      recipientBurnFee\\n    );\\n\\n    _emitTransfer(\\n      recipient,\\n      address(lpManager),\\n      recipientLpFee\\n    );\\n\\n    summary.totalSupply = summary.totalSupply.sub(senderBurnFee).sub(recipientBurnFee);\\n    summary.totalHolding = summary.totalHolding.sub(totalFee);\\n\\n    _increaseTotalLP(totalLP);\\n\\n    _updateTotalRewards();\\n\\n    _syncLP(address(0), totalLP);\\n  }\\n\\n  function _transferFromExcludedAccount(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    require(\\n      accountBalances[sender] >= amount,\\n      \\\"HEROToken#22\\\"\\n    );\\n\\n    uint256 recipientTotalFee;\\n    uint256 recipientBurnFee;\\n    uint256 recipientLPFee;\\n\\n    if (!excludedAccounts[sender].excludeRecipientFromFee) {\\n      (\\n        recipientTotalFee,\\n        recipientBurnFee,\\n        recipientLPFee\\n      ) = _calcTransferRecipientFees(amount);\\n    }\\n\\n    uint256 recipientAmount = amount.sub(recipientTotalFee);\\n\\n    accountBalances[sender] = accountBalances[sender].sub(amount);\\n    accountBalances[recipient] = accountBalances[recipient].add(recipientAmount);\\n\\n    _emitTransfer(\\n      sender,\\n      recipient,\\n      amount\\n    );\\n\\n    _emitTransfer(\\n      recipient,\\n      address(0),\\n      recipientBurnFee\\n    );\\n\\n    _emitTransfer(\\n      recipient,\\n      address(lpManager),\\n      recipientLPFee\\n    );\\n\\n    summary.totalSupply = summary.totalSupply.sub(recipientBurnFee);\\n    summary.totalExcluded = summary.totalExcluded.sub(amount);\\n    summary.totalHolding = summary.totalHolding.add(recipientAmount);\\n\\n    _increaseTotalLP(recipientLPFee);\\n\\n    _updateTotalRewards();\\n\\n    _syncLP(sender, recipientLPFee);\\n  }\\n\\n  function _transferToExcludedAccount(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    uint256 senderTotalFee;\\n    uint256 senderBurnFee;\\n    uint256 senderLpFee;\\n\\n    if (!excludedAccounts[recipient].excludeSenderFromFee) {\\n      (\\n        senderTotalFee,\\n        senderBurnFee,\\n        senderLpFee\\n      ) = _calcTransferSenderFees(amount);\\n    }\\n\\n    uint256 senderAmount = amount.add(senderTotalFee);\\n\\n    if (summary.totalRewards != 0) {\\n      uint256 totalHoldingWithRewards = summary.totalHolding.add(\\n        summary.totalRewards\\n      );\\n\\n      senderAmount = senderAmount.mul(summary.totalHolding).div(\\n        totalHoldingWithRewards\\n      );\\n    }\\n\\n    require(\\n      accountBalances[sender] >= senderAmount,\\n      \\\"HEROToken#23\\\"\\n    );\\n\\n    accountBalances[sender] = accountBalances[sender].sub(senderAmount);\\n    accountBalances[recipient] = accountBalances[recipient].add(amount);\\n\\n    _emitTransfer(\\n      sender,\\n      recipient,\\n      amount\\n    );\\n\\n    _emitTransfer(\\n      sender,\\n      address(0),\\n      senderBurnFee\\n    );\\n\\n    _emitTransfer(\\n      sender,\\n      address(lpManager),\\n      senderLpFee\\n    );\\n\\n    summary.totalSupply = summary.totalSupply.sub(senderBurnFee);\\n    summary.totalExcluded = summary.totalExcluded.add(amount);\\n    summary.totalHolding = summary.totalHolding.sub(senderAmount);\\n\\n    _increaseTotalLP(senderLpFee);\\n\\n    _updateTotalRewards();\\n\\n    _syncLP(recipient, senderLpFee);\\n  }\\n\\n  function _transferBetweenExcludedAccounts(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    require(\\n      accountBalances[sender] >= amount,\\n      \\\"HEROToken#24\\\"\\n    );\\n\\n    accountBalances[sender] = accountBalances[sender].sub(amount);\\n    accountBalances[recipient] = accountBalances[recipient].add(amount);\\n\\n    _emitTransfer(\\n      sender,\\n      recipient,\\n      amount\\n    );\\n  }\\n\\n  function _emitTransfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    if (amount != 0) {\\n      emit Transfer(\\n        sender,\\n        recipient,\\n        amount\\n      );\\n    }\\n  }\\n\\n  function _increaseTotalLP(\\n    uint256 amount\\n  )\\n    private\\n  {\\n    if (amount != 0) {\\n      accountBalances[address(lpManager)] = accountBalances[address(lpManager)].add(amount);\\n\\n      summary.totalExcluded = summary.totalExcluded.add(amount);\\n    }\\n  }\\n\\n  function _syncLP(\\n    address participant,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    if (\\n      amount != 0 && (\\n        participant == address(0) ||\\n        lpManager.canSyncLP(participant)\\n      )\\n    ) {\\n      lpManager.syncLP();\\n    }\\n  }\\n\\n  function _updateTotalRewards()\\n    private\\n  {\\n    uint256 totalRewards = summary.totalSupply\\n    .sub(summary.totalExcluded)\\n    .sub(summary.totalHolding);\\n\\n    if (totalRewards != summary.totalRewards) {\\n      summary.totalRewards = totalRewards;\\n\\n      emit TotalRewardsUpdated(\\n        totalRewards\\n      );\\n    }\\n  }\\n\\n  // private functions (views)\\n\\n  function _calcRewards(\\n    address account\\n  )\\n    private\\n    view\\n    returns (uint256 result)\\n  {\\n    if (\\n      !excludedAccounts[account].exists &&\\n      summary.totalRewards != 0\\n    ) {\\n      result = summary.totalRewards\\n        .mul(accountBalances[account])\\n        .div(summary.totalHolding);\\n    }\\n\\n    return result;\\n  }\\n\\n  function _calcTransferSenderFees(\\n    uint256 amount\\n  )\\n    private\\n    view\\n    returns (\\n      uint256 totalFee,\\n      uint256 burnFee,\\n      uint256 lpFee\\n    )\\n  {\\n    uint256 rewardsFee = amount.percent(settings.rewardsFees.sender);\\n\\n    lpFee = amount.percent(settings.lpFees.sender);\\n    burnFee = amount.percent(settings.burnFees.sender);\\n\\n    totalFee = lpFee.add(rewardsFee).add(burnFee);\\n\\n    return (totalFee, burnFee, lpFee);\\n  }\\n\\n  function _calcTransferRecipientFees(\\n    uint256 amount\\n  )\\n    private\\n    view\\n    returns (\\n      uint256 totalFee,\\n      uint256 burnFee,\\n      uint256 lpFee\\n    )\\n  {\\n    uint256 rewardsFee = amount.percent(settings.rewardsFees.recipient);\\n\\n    lpFee = amount.percent(settings.lpFees.recipient);\\n    burnFee = amount.percent(settings.burnFees.recipient);\\n\\n    totalFee = lpFee.add(rewardsFee).add(burnFee);\\n\\n    return (totalFee, burnFee, lpFee);\\n  }\\n}\\n\",\"keccak256\":\"0xbb8a6b6c347a16abd50dbaa2af296ba5557a3104097bbdcea388cbe4e73fa164\",\"license\":\"MIT\"},\"src/access/Controlled.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Controlled\\n */\\ncontract Controlled {\\n  address public controller;\\n\\n  // modifiers\\n\\n  modifier onlyController() {\\n    require(\\n      msg.sender == controller,\\n      \\\"Controlled#1\\\"\\n    );\\n\\n    _;\\n  }\\n\\n  // events\\n\\n  event ControllerUpdated(\\n    address controller\\n  );\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor()\\n    internal\\n  {\\n    //\\n  }\\n\\n  // internal functions\\n\\n  function _initializeController(\\n    address controller_\\n  )\\n    internal\\n  {\\n    controller = controller_;\\n  }\\n\\n  function _setController(\\n    address controller_\\n  )\\n    internal\\n  {\\n    require(\\n      controller_ != address(0),\\n      \\\"Controlled#2\\\"\\n    );\\n\\n    require(\\n      controller_ != controller,\\n      \\\"Controlled#3\\\"\\n    );\\n\\n    controller = controller_;\\n\\n    emit ControllerUpdated(\\n      controller_\\n    );\\n  }\\n\\n  function _removeController()\\n    internal\\n  {\\n    require(\\n      controller != address(0),\\n      \\\"Controlled#4\\\"\\n    );\\n\\n    controller = address(0);\\n\\n    emit ControllerUpdated(\\n      address(0)\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x7a17852153173274f8335812747b2b9872b740569e5b64ac241b586f48de17db\",\"license\":\"MIT\"},\"src/access/Owned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Owned\\n */\\ncontract Owned {\\n  address public owner;\\n\\n  // modifiers\\n\\n  modifier onlyOwner() {\\n    require(\\n      msg.sender == owner,\\n      \\\"Owned#1\\\"\\n    );\\n\\n    _;\\n  }\\n\\n  // events\\n\\n  event OwnerUpdated(\\n    address owner\\n  );\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor()\\n    internal\\n  {\\n    owner = msg.sender;\\n  }\\n\\n  // external functions\\n\\n  function setOwner(\\n    address owner_\\n  )\\n    external\\n    onlyOwner\\n  {\\n    require(\\n      owner_ != address(0),\\n      \\\"Owned#2\\\"\\n    );\\n\\n    require(\\n      owner_ != owner,\\n      \\\"Owned#3\\\"\\n    );\\n\\n    owner = owner_;\\n\\n    emit OwnerUpdated(\\n      owner_\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0xfc994d9233a8e6a1581dc1511d97e29d7d45fb33dc24ce1f146f5b55e62e8d58\",\"license\":\"MIT\"},\"src/erc20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"./ERC20Metadata.sol\\\";\\nimport \\\"./ERC20Standard.sol\\\";\\n\\n\\nabstract contract ERC20 is ERC20Metadata, ERC20Standard {\\n  string public override name;\\n  string public override symbol;\\n  uint8 public override decimals;\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor (\\n    string memory name_,\\n    string memory symbol_,\\n    uint8 decimals_\\n  )\\n    internal\\n  {\\n    name = name_;\\n    symbol = symbol_;\\n    decimals = decimals_;\\n  }\\n}\\n\",\"keccak256\":\"0x263e909b5aacdfe0efbb513c92a36909d7ec7bb29310a56366e4006e893f077b\",\"license\":\"MIT\"},\"src/erc20/ERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\ninterface ERC20Metadata {\\n  // external functions (pure)\\n\\n  function name()\\n    external\\n    pure\\n    returns (string memory);\\n\\n  function symbol()\\n    external\\n    pure\\n    returns (string memory);\\n\\n  function decimals()\\n    external\\n    pure\\n    returns (uint8);\\n}\\n\",\"keccak256\":\"0xb9f2b7768748bb9daef7fb378aa85e04ce735a3577aa7c99b2c46c3d09301ca2\",\"license\":\"MIT\"},\"src/erc20/ERC20Standard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\ninterface ERC20Standard {\\n  // events\\n\\n  event Approval(\\n    address indexed owner,\\n    address indexed spender,\\n    uint256 value\\n  );\\n\\n  event Transfer(\\n    address indexed from,\\n    address indexed to,\\n    uint256 value\\n  );\\n\\n  // external functions\\n\\n  function approve(\\n    address spender,\\n    uint256 value\\n  )\\n    external\\n    returns (bool);\\n\\n  function transfer(\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (bool);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (bool);\\n\\n  // external functions (views)\\n\\n  function totalSupply()\\n    external\\n    view\\n    returns (uint256);\\n\\n  function balanceOf(\\n    address owner\\n  )\\n    external\\n    view\\n    returns (uint256);\\n\\n  function allowance(\\n    address owner,\\n    address spender\\n  )\\n    external\\n    view\\n    returns (uint256);\\n}\\n\",\"keccak256\":\"0x97bfb18accd6fac80fc5c560cdf3b15b55be42dead5488f10db8aa9fffa34f56\",\"license\":\"MIT\"},\"src/lifecycle/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Initializable\\n */\\ncontract Initializable {\\n  address private initializer;\\n\\n  // events\\n\\n  event Initialized();\\n\\n  // modifiers\\n\\n  modifier onlyInitializer() {\\n    require(\\n      initializer != address(0),\\n      \\\"Initializable#1\\\"\\n    );\\n\\n    require(\\n      msg.sender == initializer,\\n      \\\"Initializable#2\\\"\\n    );\\n\\n    initializer = address(0);\\n\\n    _;\\n\\n    emit Initialized();\\n  }\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor()\\n    internal\\n  {\\n    initializer = msg.sender;\\n  }\\n\\n  // external functions (views)\\n\\n  function initialized()\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return initializer == address(0);\\n  }\\n}\\n\",\"keccak256\":\"0xe69c4567bd1e4564e316eaf1a36387a29dae6babc31ed4c21f0306e4b0ea1750\",\"license\":\"MIT\"},\"src/math/MathLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Math library\\n */\\nlibrary MathLib {\\n  function add(\\n    uint256 a,\\n    uint256 b\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    uint256 c = a + b;\\n\\n    require(\\n      c >= a,\\n      \\\"MathLib#1\\\"\\n    );\\n\\n    return c;\\n  }\\n\\n  function sub(\\n    uint256 a,\\n    uint256 b\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    require(\\n      b <= a,\\n      \\\"MathLib#2\\\"\\n    );\\n\\n    return a - b;\\n  }\\n\\n  function mul(\\n    uint256 a,\\n    uint256 b\\n  )\\n    internal\\n    pure\\n    returns (uint256 result)\\n  {\\n    if (a != 0 && b != 0) {\\n      result = a * b;\\n\\n      require(\\n        result / a == b,\\n        \\\"MathLib#3\\\"\\n      );\\n    }\\n\\n    return result;\\n  }\\n\\n  function div(\\n    uint256 a,\\n    uint256 b\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    require(\\n      b != 0,\\n      \\\"MathLib#4\\\"\\n    );\\n\\n    return a / b;\\n  }\\n\\n  function percent(\\n    uint256 a,\\n    uint256 p\\n  )\\n    internal\\n    pure\\n    returns (uint256 result)\\n  {\\n    if (a != 0 && p != 0) {\\n      result = div(mul(a, p), 100);\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0xe95188bae28c1dcdff8bb625bb6be7fcfb346186a5af3d92cffcb72402f8415f\",\"license\":\"MIT\"},\"src/uniswap/UniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\ninterface UniswapV2Factory {\\n  // events\\n\\n  event PairCreated(\\n    address indexed token0,\\n    address indexed token1,\\n    address pair,\\n    uint256\\n  );\\n\\n  // external functions\\n\\n  function createPair(\\n    address tokenA,\\n    address tokenB\\n  )\\n    external\\n    returns (address);\\n\\n  function setFeeTo(\\n    address\\n  )\\n    external;\\n\\n  function setFeeToSetter(\\n    address\\n  )\\n    external;\\n\\n  // external functions (views)\\n\\n  function feeTo()\\n    external\\n    view\\n    returns (address);\\n\\n  function feeToSetter()\\n    external\\n    view\\n    returns (address);\\n\\n  function getPair(\\n    address tokenA,\\n    address tokenB\\n  )\\n    external\\n    view\\n    returns (address);\\n\\n  function allPairs(\\n    uint256\\n  )\\n    external\\n    view\\n    returns (address);\\n\\n  function allPairsLength()\\n    external\\n    view\\n    returns (uint256);\\n}\\n\\n\",\"keccak256\":\"0x11c1c1d08fe44e59afcb84d55cbe36594091a8997c14a5c27a32d72708614f7f\",\"license\":\"MIT\"},\"src/uniswap/UniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable func-name-mixedcase */\\npragma solidity ^0.6.12;\\n\\nimport \\\"../erc20/ERC20Metadata.sol\\\";\\nimport \\\"../erc20/ERC20Standard.sol\\\";\\n\\n\\ninterface UniswapV2Pair is ERC20Metadata, ERC20Standard {\\n  // events\\n\\n  event Mint(\\n    address indexed sender,\\n    uint amount0,\\n    uint amount1\\n  );\\n\\n  event Burn(\\n    address indexed sender,\\n    uint amount0,\\n    uint amount1,\\n    address indexed to\\n  );\\n\\n  event Swap(\\n    address indexed sender,\\n    uint amount0In,\\n    uint amount1In,\\n    uint amount0Out,\\n    uint amount1Out,\\n    address indexed to\\n  );\\n\\n  event Sync(\\n    uint112 reserve0,\\n    uint112 reserve1\\n  );\\n\\n  // external functions\\n\\n  function initialize(\\n    address,\\n    address\\n  )\\n    external;\\n\\n  function mint(\\n    address to\\n  )\\n    external\\n    returns (uint);\\n\\n  function burn(\\n    address to\\n  )\\n    external\\n    returns (uint, uint);\\n\\n  function swap(\\n    uint amount0Out,\\n    uint amount1Out,\\n    address to,\\n    bytes calldata data\\n  )\\n    external;\\n\\n  function skim(\\n    address to\\n  )\\n    external;\\n\\n  function sync()\\n    external;\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint value,\\n    uint deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  )\\n    external;\\n\\n  // external functions (views)\\n\\n  function DOMAIN_SEPARATOR()\\n    external\\n    view\\n    returns (bytes32);\\n\\n  function nonces(\\n    address owner\\n  )\\n    external\\n    view\\n    returns (uint);\\n\\n  function factory()\\n    external\\n    view\\n    returns (address);\\n\\n  function token0()\\n    external\\n    view\\n    returns (address);\\n\\n  function token1()\\n    external\\n    view\\n    returns (address);\\n\\n  function getReserves()\\n    external\\n    view\\n    returns (uint112, uint112, uint32);\\n\\n  function price0CumulativeLast()\\n    external\\n    view\\n    returns (uint);\\n\\n  function price1CumulativeLast()\\n    external\\n    view\\n    returns (uint);\\n\\n  function kLast()\\n    external\\n    view\\n    returns (uint);\\n\\n  // external functions (pure)\\n\\n  function PERMIT_TYPEHASH()\\n    external\\n    pure\\n    returns (bytes32);\\n\\n  function MINIMUM_LIQUIDITY()\\n    external\\n    pure\\n    returns (uint);\\n}\\n\",\"keccak256\":\"0xcda21dfb5c82e67f78a7398118ff23005cb9c21878230c66c10756e3b1f75b92\",\"license\":\"MIT\"},\"src/uniswap/UniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable func-name-mixedcase */\\npragma solidity ^0.6.12;\\n\\ninterface UniswapV2Router01 {\\n  // external functions\\n\\n  function addLiquidityETH(\\n    address token,\\n    uint amountTokenDesired,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    payable\\n    returns (uint, uint, uint);\\n\\n  function swapExactETHForTokens(\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    payable\\n    returns (uint[] memory);\\n\\n  function addLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint amountADesired,\\n    uint amountBDesired,\\n    uint amountAMin,\\n    uint amountBMin,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    returns (uint, uint, uint);\\n\\n  function removeLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint liquidity,\\n    uint amountAMin,\\n    uint amountBMin,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    returns (uint, uint);\\n\\n  function removeLiquidityETH(\\n    address token,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    returns (uint, uint);\\n\\n  function removeLiquidityWithPermit(\\n    address tokenA,\\n    address tokenB,\\n    uint liquidity,\\n    uint amountAMin,\\n    uint amountBMin,\\n    address to,\\n    uint deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  )\\n    external\\n    returns (uint, uint);\\n\\n  function removeLiquidityETHWithPermit(\\n    address token,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  )\\n    external\\n    returns (uint, uint);\\n\\n  function swapExactTokensForTokens(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    returns (uint[] memory);\\n\\n  function swapTokensForExactTokens(\\n    uint amountOut,\\n    uint amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    returns (uint[] memory);\\n\\n  function swapTokensForExactETH(\\n    uint amountOut,\\n    uint amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    returns (uint[] memory);\\n\\n  function swapExactTokensForETH(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    returns (uint[] memory);\\n\\n  function swapETHForExactTokens(\\n    uint amountOut,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    payable\\n    returns (uint[] memory);\\n\\n  // external functions (views)\\n\\n  function getAmountsOut(\\n    uint amountIn,\\n    address[] calldata path\\n  )\\n    external\\n    view\\n    returns (uint[] memory);\\n\\n  function getAmountsIn(\\n    uint amountOut,\\n    address[] calldata path\\n  )\\n    external\\n    view\\n    returns (uint[] memory);\\n\\n  // external functions (pure)\\n\\n  function quote(\\n    uint amountA,\\n    uint reserveA,\\n    uint reserveB\\n  )\\n    external\\n    pure\\n    returns (uint);\\n\\n  function getAmountOut(\\n    uint amountIn,\\n    uint reserveIn,\\n    uint reserveOut\\n  )\\n    external\\n    pure\\n    returns (uint);\\n\\n  function getAmountIn(\\n    uint amountOut,\\n    uint reserveIn,\\n    uint reserveOut\\n  )\\n    external\\n    pure\\n    returns (uint);\\n\\n  function factory()\\n    external\\n    pure\\n    returns (address);\\n\\n  function WETH()\\n    external\\n    pure\\n    returns (address);\\n}\\n\",\"keccak256\":\"0xecdb5963ce8e60866ec31ccf38cc6c68008e39c3fb21d1db3d84a6bab6553d50\",\"license\":\"MIT\"},\"src/uniswap/UniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"./UniswapV2Router01.sol\\\";\\n\\n\\ninterface UniswapV2Router02 is UniswapV2Router01 {\\n  // external functions\\n\\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    payable;\\n\\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\\n    address token,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    returns (uint);\\n\\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n    address token,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  )\\n    external\\n    returns (uint);\\n\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  )\\n    external;\\n\\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  )\\n    external;\\n}\\n\",\"keccak256\":\"0xf8cb5b32e986653e77ff25081fed569f0d2120e691cc91e116dadb7c6a9346a8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506126d3806100a16000396000f3fe6080604052600436106100ab5760003560e01c80638da5cb5b116100645780638da5cb5b14610269578063c6ef2061146102aa578063d7236943146102e5578063e06174e414610326578063fc0c546a1461036e578063fc11c9c5146103af576100b2565b806313af4035146100b7578063158ef93e1461010857806339071c9e14610135578063735de9f71461014c578063754d1d541461018d5780638bdb2afa14610228576100b2565b366100b257005b600080fd5b3480156100c357600080fd5b50610106600480360360208110156100da57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610416565b005b34801561011457600080fd5b5061011d6106cc565b60405180821515815260200191505060405180910390f35b34801561014157600080fd5b5061014a610724565b005b34801561015857600080fd5b50610161610779565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561019957600080fd5b50610226600480360360808110156101b057600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061079f565b005b34801561023457600080fd5b5061023d610eb0565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561027557600080fd5b5061027e610ed6565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102b657600080fd5b506102e3600480360360208110156102cd57600080fd5b8101908080359060200190929190505050610efa565b005b3480156102f157600080fd5b506102fa6110f7565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561033257600080fd5b5061033b61111d565b604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390f35b34801561037a57600080fd5b5061038361114f565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103bb57600080fd5b506103fe600480360360208110156103d257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611175565b60405180821515815260200191505060405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260078152602001807f4f776e656423310000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561057a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260078152602001807f4f776e656423320000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561063c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260078152602001807f4f776e656423330000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f4ffd725fc4a22075e9ec71c59edf9c38cdeb588a91b24fc5b61388c5be41282b81604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b60008073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905090565b600260149054906101000a900460ff16610777576001600260146101000a81548160ff02191690831515021790555061075b6111d0565b6000600260146101000a81548160ff0219169083151502179055505b565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610864576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f496e697469616c697a61626c652331000000000000000000000000000000000081525060200191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610927576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f496e697469616c697a61626c652332000000000000000000000000000000000081525060200191505060405180910390fd5b6000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610972826112e8565b60008414610a6c57600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a1d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f4845524f4c504d616e61676572556e697377617056322331000000000000000081525060200191505060405180910390fd5b8360036000018190555082600360010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610b0f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f4845524f4c504d616e61676572556e697377617056322332000000000000000081525060200191505060405180910390fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015610bb857600080fd5b505afa158015610bcc573d6000803e3d6000fd5b505050506040513d6020811015610be257600080fd5b8101908080519060200190929190505050600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b158015610c9b57600080fd5b505afa158015610caf573d6000803e3d6000fd5b505050506040513d6020811015610cc557600080fd5b8101908080519060200190929190505050600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c9c65396600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b158015610e0357600080fd5b505af1158015610e17573d6000803e3d6000fd5b505050506040513d6020811015610e2d57600080fd5b8101908080519060200190929190505050600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f5daa87a0e9463431830481fd4b6e3403442dfb9a12b9c07597e9f61d50b633c860405160405180910390a150505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610fbb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260078152602001807f4f776e656423310000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b6000811415611032576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f4845524f4c504d616e616765722331000000000000000000000000000000000081525060200191505060405180910390fd5b600260149054906101000a900460ff16156110b5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f4845524f4c504d616e616765722332000000000000000000000000000000000081525060200191505060405180910390fd5b6001600260146101000a81548160ff0219169083151502179055506110d9816113cf565b6000600260146101000a81548160ff02191690831515021790555050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60038060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614159050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561125b57600080fd5b505afa15801561126f573d6000803e3d6000fd5b505050506040513d602081101561128557600080fd5b81019080805190602001909291905050509050600081146112e55760006112b6600283611c0490919063ffffffff16565b905060006112cd8284611c8e90919063ffffffff16565b90506112d882611d11565b6112e28147612034565b50505b50565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561138b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f4845524f4c504d616e616765722333000000000000000000000000000000000081525060200191505060405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806003600001541461194d576113e5612280565b50809150506000811415611461576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f4845524f4c504d616e61676572556e697377617056322333000000000000000081525060200191505060405180910390fd5b808211156114d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f4845524f4c504d616e61676572556e697377617056322334000000000000000081525060200191505060405180910390fd5b6060600367ffffffffffffffff811180156114f157600080fd5b506040519080825280602002602001820160405280156115205781602001602082028036833780820191505090505b509050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160008151811061155357fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16816001815181106115bd57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160028151811061162a57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506060600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d06ca61f85846040518363ffffffff1660e01b81526004018083815260200180602001828103825283818151815260200191508051906020019060200280838360005b838110156116fe5780820151818401526020810190506116e3565b50505050905001935050505060006040518083038186803b15801561172257600080fd5b505afa158015611736573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561176057600080fd5b810190808051604051939291908464010000000082111561178057600080fd5b8382019150602082018581111561179657600080fd5b82518660208202830111640100000000821117156117b357600080fd5b8083526020830192505050908051906020019060200280838360005b838110156117ea5780820151818401526020810190506117cf565b50505050905001604052505050905060008160028151811061180857fe5b60200260200101519050600360000154811161188c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f4845524f4c504d616e61676572556e697377617056322335000000000000000081525060200191505060405180910390fd5b60006118b3856118a584896123f790919063ffffffff16565b611c0490919063ffffffff16565b905060006118cf60036000015484611c0490919063ffffffff16565b905081811015611947576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f4845524f4c504d616e61676572556e697377617056322336000000000000000081525060200191505060405180910390fd5b50505050505b611a19600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156119d957600080fd5b505afa1580156119ed573d6000803e3d6000fd5b505050506040513d6020811015611a0357600080fd5b8101908080519060200190929190505050612499565b5050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611aa457600080fd5b505afa158015611ab8573d6000803e3d6000fd5b505050506040513d6020811015611ace57600080fd5b8101908080519060200190929190505050905081811015611b57576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f4845524f4c504d616e61676572556e697377617056322337000000000000000081525060200191505060405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342966c68836040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015611bcc57600080fd5b505af1158015611be0573d6000803e3d6000fd5b50505050611c00611bfa8383611c8e90919063ffffffff16565b47612034565b5050565b600080821415611c7c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f4d6174684c69622334000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b818381611c8557fe5b04905092915050565b600082821115611d06576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f4d6174684c69622332000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b818303905092915050565b6000811461203157600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611dce57600080fd5b505af1158015611de2573d6000803e3d6000fd5b505050506040513d6020811015611df857600080fd5b8101908080519060200190929190505050506060600267ffffffffffffffff81118015611e2457600080fd5b50604051908082528060200260200182016040528015611e535781602001602082028036833780820191505090505b509050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600081518110611e8657fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600181518110611ef057fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663791ac9478360008430426040518663ffffffff1660e01b815260040180868152602001858152602001806020018473ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b83811015611fee578082015181840152602081019050611fd3565b505050509050019650505050505050600060405180830381600087803b15801561201757600080fd5b505af115801561202b573d6000803e3d6000fd5b50505050505b50565b60008214158015612046575060008114155b1561227c57600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561210057600080fd5b505af1158015612114573d6000803e3d6000fd5b505050506040513d602081101561212a57600080fd5b810190808051906020019092919050505050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f305d71982600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168560008030426040518863ffffffff1660e01b8152600401808773ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200196505050505050506060604051808303818588803b15801561222857600080fd5b505af115801561223c573d6000803e3d6000fd5b50505050506040513d606081101561225357600080fd5b810190808051906020019092919080519060200190929190805190602001909291905050505050505b5050565b600080600080600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156122ee57600080fd5b505afa158015612302573d6000803e3d6000fd5b505050506040513d606081101561231857600080fd5b810190808051906020019092919080519060200190929190805190602001909291905050505091509150600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16106123c05780826123c3565b81815b816dffffffffffffffffffffffffffff169150806dffffffffffffffffffffffffffff169050809450819550505050509091565b600080831415801561240a575060008214155b156124935781830290508183828161241e57fe5b0414612492576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f4d6174684c69622333000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b5b92915050565b600080600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561255157600080fd5b505af1158015612565573d6000803e3d6000fd5b505050506040513d602081101561257b57600080fd5b810190808051906020019092919050505050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302751cec600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168560008030426040518763ffffffff1660e01b8152600401808773ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200196505050505050506040805180830381600087803b15801561267857600080fd5b505af115801561268c573d6000803e3d6000fd5b505050506040513d60408110156126a257600080fd5b8101908080519060200190929190805190602001909291905050509150915091509156fea164736f6c634300060c000a",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Public constructor"
      }
    },
    "title": "HERO liquidity pool manager for Uniswap V2",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3167,
        "contract": "src/HEROLPManagerUniswapV2.sol:HEROLPManagerUniswapV2",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3385,
        "contract": "src/HEROLPManagerUniswapV2.sol:HEROLPManagerUniswapV2",
        "label": "initializer",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 15,
        "contract": "src/HEROLPManagerUniswapV2.sol:HEROLPManagerUniswapV2",
        "label": "token",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(HEROToken)3014"
      },
      {
        "astId": 17,
        "contract": "src/HEROLPManagerUniswapV2.sol:HEROLPManagerUniswapV2",
        "label": "swapLocked",
        "offset": 20,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 220,
        "contract": "src/HEROLPManagerUniswapV2.sol:HEROLPManagerUniswapV2",
        "label": "settings",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(Settings)218_storage"
      },
      {
        "astId": 222,
        "contract": "src/HEROLPManagerUniswapV2.sol:HEROLPManagerUniswapV2",
        "label": "uniswapFactory",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(UniswapV2Factory)3752"
      },
      {
        "astId": 224,
        "contract": "src/HEROLPManagerUniswapV2.sol:HEROLPManagerUniswapV2",
        "label": "uniswapTokenPair",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(UniswapV2Pair)3919"
      },
      {
        "astId": 226,
        "contract": "src/HEROLPManagerUniswapV2.sol:HEROLPManagerUniswapV2",
        "label": "uniswapRouter",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(UniswapV2Router02)4315"
      },
      {
        "astId": 228,
        "contract": "src/HEROLPManagerUniswapV2.sol:HEROLPManagerUniswapV2",
        "label": "wrappedNative",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(HEROToken)3014": {
        "encoding": "inplace",
        "label": "contract HEROToken",
        "numberOfBytes": "20"
      },
      "t_contract(UniswapV2Factory)3752": {
        "encoding": "inplace",
        "label": "contract UniswapV2Factory",
        "numberOfBytes": "20"
      },
      "t_contract(UniswapV2Pair)3919": {
        "encoding": "inplace",
        "label": "contract UniswapV2Pair",
        "numberOfBytes": "20"
      },
      "t_contract(UniswapV2Router02)4315": {
        "encoding": "inplace",
        "label": "contract UniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_struct(Settings)218_storage": {
        "encoding": "inplace",
        "label": "struct HEROLPManagerUniswapV2.Settings",
        "members": [
          {
            "astId": 215,
            "contract": "src/HEROLPManagerUniswapV2.sol:HEROLPManagerUniswapV2",
            "label": "enableBurnLPAtValue",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 217,
            "contract": "src/HEROLPManagerUniswapV2.sol:HEROLPManagerUniswapV2",
            "label": "stableCoin",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}