{
  "address": "0x0935c48F8c6e330EcCb690418e7E51D29F935F95",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "excludeSenderFromFee",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "excludeRecipientFromFee",
          "type": "bool"
        }
      ],
      "name": "AccountExcluded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "ControllerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "PresaleFinished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalRewards",
          "type": "uint256"
        }
      ],
      "name": "TotalRewardsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "excludeSenderFromFee",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "excludeRecipientFromFee",
          "type": "bool"
        }
      ],
      "name": "excludeAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finishPresale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getBalanceSummary",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "holdingBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sender",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "recipient",
              "type": "uint256"
            }
          ],
          "internalType": "struct HEROToken.Fees",
          "name": "burnFees",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sender",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "recipient",
              "type": "uint256"
            }
          ],
          "internalType": "struct HEROToken.Fees",
          "name": "lpFees",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sender",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "recipient",
              "type": "uint256"
            }
          ],
          "internalType": "struct HEROToken.Fees",
          "name": "rewardsFees",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "minTotalSupply",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "lpManager_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "controller_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalSupply_",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "excludedAccounts_",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpManager",
      "outputs": [
        {
          "internalType": "contract HEROLPManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "presaleFinished",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "settings",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sender",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "recipient",
              "type": "uint256"
            }
          ],
          "internalType": "struct HEROToken.Fees",
          "name": "burnFees",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sender",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "recipient",
              "type": "uint256"
            }
          ],
          "internalType": "struct HEROToken.Fees",
          "name": "lpFees",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sender",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "recipient",
              "type": "uint256"
            }
          ],
          "internalType": "struct HEROToken.Fees",
          "name": "rewardsFees",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "minTotalSupply",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "summary",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalExcluded",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalHolding",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9d94b9246a6f10a5214235e168506eed3e860a5a31327dcf6f69f276c8aad1de",
  "receipt": {
    "to": null,
    "from": "0x2101F46D23b84eEa6a310B1dBa58f66DCE17A0Cf",
    "contractAddress": "0x0935c48F8c6e330EcCb690418e7E51D29F935F95",
    "transactionIndex": 0,
    "gasUsed": "4389506",
    "logsBloom": "0x
    "blockHash": "0xdeda8020233bbc3a51f08bf7e31bc036dd4b3a7e2e5771adff107355a6e5f2c2",
    "transactionHash": "0x9d94b9246a6f10a5214235e168506eed3e860a5a31327dcf6f69f276c8aad1de",
    "logs": [],
    "blockNumber": 9988274,
    "cumulativeGasUsed": "4389506",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "415bd6a30a9a2fce18c0e78473559816",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"excludeSenderFromFee\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"excludeRecipientFromFee\",\"type\":\"bool\"}],\"name\":\"AccountExcluded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"ControllerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PresaleFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"}],\"name\":\"TotalRewardsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excludeSenderFromFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"excludeRecipientFromFee\",\"type\":\"bool\"}],\"name\":\"excludeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBalanceSummary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holdingBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sender\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recipient\",\"type\":\"uint256\"}],\"internalType\":\"struct HEROToken.Fees\",\"name\":\"burnFees\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sender\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recipient\",\"type\":\"uint256\"}],\"internalType\":\"struct HEROToken.Fees\",\"name\":\"lpFees\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sender\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recipient\",\"type\":\"uint256\"}],\"internalType\":\"struct HEROToken.Fees\",\"name\":\"rewardsFees\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"minTotalSupply\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"lpManager_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"controller_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"excludedAccounts_\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpManager\",\"outputs\":[{\"internalType\":\"contract HEROLPManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settings\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sender\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recipient\",\"type\":\"uint256\"}],\"internalType\":\"struct HEROToken.Fees\",\"name\":\"burnFees\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sender\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recipient\",\"type\":\"uint256\"}],\"internalType\":\"struct HEROToken.Fees\",\"name\":\"lpFees\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sender\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recipient\",\"type\":\"uint256\"}],\"internalType\":\"struct HEROToken.Fees\",\"name\":\"rewardsFees\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"minTotalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"summary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalExcluded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalHolding\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Stanis\\u0142aw G\\u0142ogowski <stan@metahero.io>\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Public constructor\"}},\"title\":\"HERO token\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/HEROToken.sol\":\"HEROToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/HEROLPManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"./access/Lockable.sol\\\";\\nimport \\\"./access/Owned.sol\\\";\\nimport \\\"./lifecycle/Initializable.sol\\\";\\nimport \\\"./math/SafeMathLib.sol\\\";\\nimport \\\"./HEROToken.sol\\\";\\n\\n\\n/**\\n * @title HERO abstract liquidity pool manager\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@metahero.io>\\n */\\nabstract contract HEROLPManager is Lockable, Owned, Initializable {\\n  using SafeMathLib for uint256;\\n\\n  HEROToken public token;\\n\\n  // modifiers\\n\\n  modifier onlyToken() {\\n    require(\\n      msg.sender == address(token),\\n      \\\"HEROLPManager#1\\\"\\n    );\\n\\n    _;\\n  }\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor ()\\n    internal\\n    Lockable()\\n    Owned()\\n    Initializable()\\n  {\\n    //\\n  }\\n\\n  // external functions\\n\\n  function syncLP()\\n    external\\n    onlyToken\\n    lock\\n  {\\n    _syncLP();\\n  }\\n\\n  function burnLP(\\n    uint256 amount\\n  )\\n    external\\n    onlyOwner\\n    lockOrThrowError\\n  {\\n    require(\\n      amount != 0,\\n      \\\"HEROLPManager#2\\\"\\n    );\\n\\n    _burnLP(amount);\\n  }\\n\\n  // external functions (views)\\n\\n  function canSyncLP(\\n    address sender,\\n    address recipient\\n  )\\n    external\\n    view\\n    virtual\\n    returns (\\n      bool shouldSyncLPBefore,\\n      bool shouldSyncLPAfter\\n    );\\n\\n  // internal functions\\n\\n  function _initialize(\\n    address token_\\n  )\\n    internal\\n  {\\n    require(\\n      token_ != address(0),\\n      \\\"HEROLPManager#3\\\"\\n    );\\n\\n    token = HEROToken(token_);\\n  }\\n\\n  function _syncLP()\\n    internal\\n    virtual;\\n\\n  function _burnLP(\\n    uint256 amount\\n  )\\n    internal\\n    virtual;\\n}\\n\",\"keccak256\":\"0xdd9d863b68f97ee4199287041a55cc90a39477fcd208735b7195c6cf13fddf9a\",\"license\":\"MIT\"},\"src/HEROToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./access/Controlled.sol\\\";\\nimport \\\"./access/Owned.sol\\\";\\nimport \\\"./erc20/ERC20.sol\\\";\\nimport \\\"./lifecycle/Initializable.sol\\\";\\nimport \\\"./math/MathLib.sol\\\";\\nimport \\\"./math/SafeMathLib.sol\\\";\\nimport \\\"./HEROLPManager.sol\\\";\\n\\n\\n/**\\n * @title HERO token\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@metahero.io>\\n */\\ncontract HEROToken is Controlled, Owned, ERC20, Initializable {\\n  using MathLib for uint256;\\n  using SafeMathLib for uint256;\\n\\n  struct Fees {\\n    uint256 sender; // percent\\n    uint256 recipient; // percent\\n  }\\n\\n  struct Settings {\\n    Fees burnFees;\\n    Fees lpFees;\\n    Fees rewardsFees;\\n    uint256 minTotalSupply;\\n  }\\n\\n  struct Summary {\\n    uint256 totalExcluded;\\n    uint256 totalHolding;\\n    uint256 totalRewards;\\n    uint256 totalSupply;\\n  }\\n\\n  struct ExcludedAccount {\\n    bool exists;\\n    bool excludeSenderFromFee;\\n    bool excludeRecipientFromFee;\\n  }\\n\\n  // metadata\\n\\n  string private constant TOKEN_NAME = \\\"Metahero\\\";\\n  string private constant TOKEN_SYMBOL = \\\"HERO\\\";\\n  uint8 private constant TOKEN_DECIMALS = 18; // 0.000000000000000000\\n\\n  HEROLPManager public lpManager;\\n  Settings public settings;\\n  Summary public summary;\\n  bool public presaleFinished;\\n\\n  mapping (address => uint256) private accountBalances;\\n  mapping (address => mapping (address => uint256)) private accountAllowances;\\n  mapping (address => ExcludedAccount) private excludedAccounts;\\n\\n  // events\\n\\n  event PresaleFinished();\\n\\n  event AccountExcluded(\\n    address indexed account,\\n    bool excludeSenderFromFee,\\n    bool excludeRecipientFromFee\\n  );\\n\\n  event TotalRewardsUpdated(\\n    uint256 totalRewards\\n  );\\n\\n  /**\\n   * @dev Public constructor\\n   */\\n  constructor ()\\n    public\\n    Controlled()\\n    Owned()\\n    ERC20(TOKEN_NAME, TOKEN_SYMBOL, TOKEN_DECIMALS)\\n    Initializable()\\n  {\\n    //\\n  }\\n\\n  // external functions\\n\\n  function initialize(\\n    Fees memory burnFees,\\n    Fees memory lpFees,\\n    Fees memory rewardsFees,\\n    uint256 minTotalSupply,\\n    address payable lpManager_,\\n    address controller_,\\n    uint256 totalSupply_,\\n    address[] calldata excludedAccounts_\\n  )\\n    external\\n    onlyInitializer\\n  {\\n    settings.burnFees = burnFees;\\n    settings.lpFees = lpFees;\\n    settings.rewardsFees = rewardsFees;\\n    settings.minTotalSupply = minTotalSupply;\\n\\n    if (\\n      lpFees.sender != 0 ||\\n      lpFees.recipient != 0\\n    ) {\\n      require(\\n        lpManager_ != address(0),\\n        \\\"HEROToken#1\\\"\\n      );\\n\\n      lpManager = HEROLPManager(lpManager_);\\n\\n      _excludeAccount(lpManager_, false, false);\\n    }\\n\\n    _initializeController(controller_);\\n\\n    if (totalSupply_ != 0) {\\n      _excludeAccount(msg.sender, true, true);\\n\\n      _mint(\\n        msg.sender,\\n        totalSupply_\\n      );\\n    }\\n\\n    uint256 excludedAccountsLen = excludedAccounts_.length;\\n\\n    for (uint256 index; index < excludedAccountsLen; index++) {\\n      _excludeAccount(excludedAccounts_[index], false, false);\\n    }\\n  }\\n\\n  function finishPresale()\\n    external\\n    onlyOwner\\n  {\\n    require(\\n      !presaleFinished,\\n      \\\"HEROToken#2\\\"\\n    );\\n\\n    presaleFinished = true;\\n\\n    emit PresaleFinished();\\n  }\\n\\n  function excludeAccount(\\n    address account,\\n    bool excludeSenderFromFee,\\n    bool excludeRecipientFromFee\\n  )\\n    external\\n    onlyOwner\\n  {\\n    _excludeAccount(\\n      account,\\n      excludeSenderFromFee,\\n      excludeRecipientFromFee\\n    );\\n  }\\n\\n  function approve(\\n    address spender,\\n    uint256 amount\\n  )\\n    external\\n    override\\n    returns (bool)\\n  {\\n    _approve(\\n      msg.sender,\\n      spender,\\n      amount\\n    );\\n\\n    return true;\\n  }\\n\\n  function mint(\\n    address account,\\n    uint256 amount\\n  )\\n    external\\n    onlyController\\n  {\\n    _mint(\\n      account,\\n      amount\\n    );\\n  }\\n\\n  function burn(\\n    uint256 amount\\n  )\\n    external\\n  {\\n    _burn(\\n      msg.sender,\\n      amount\\n    );\\n  }\\n\\n  function transfer(\\n    address recipient,\\n    uint256 amount\\n  )\\n    external\\n    override\\n    returns (bool)\\n  {\\n    _transfer(\\n      msg.sender,\\n      recipient,\\n      amount\\n    );\\n\\n    return true;\\n  }\\n\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    external\\n    override\\n    returns (bool)\\n  {\\n    _transfer(\\n      sender,\\n      recipient,\\n      amount\\n    );\\n\\n    uint256 allowance = accountAllowances[sender][msg.sender];\\n\\n    require(\\n      allowance >= amount,\\n      \\\"HEROToken#3\\\"\\n    );\\n\\n    _approve(\\n      sender,\\n      msg.sender,\\n      allowance.sub(amount)\\n    );\\n\\n    return true;\\n  }\\n\\n  // external functions (views)\\n\\n  function totalSupply()\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return summary.totalSupply;\\n  }\\n\\n  function allowance(\\n    address owner,\\n    address spender\\n  )\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return accountAllowances[owner][spender];\\n  }\\n\\n  function balanceOf(\\n    address account\\n  )\\n    external\\n    view\\n    override\\n    returns (uint256 result)\\n  {\\n    result = accountBalances[account].add(\\n      _calcRewards(account)\\n    );\\n\\n    return result;\\n  }\\n\\n  function getBalanceSummary(\\n    address account\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 totalBalance,\\n      uint256 holdingBalance,\\n      uint256 totalRewards\\n    )\\n  {\\n    holdingBalance = accountBalances[account];\\n    totalRewards = _calcRewards(account);\\n    totalBalance = holdingBalance.add(totalRewards);\\n\\n    return (totalBalance, holdingBalance, totalRewards);\\n  }\\n\\n  // private functions\\n\\n  function _excludeAccount(\\n    address account,\\n    bool excludeSenderFromFee,\\n    bool excludeRecipientFromFee\\n  )\\n    private\\n  {\\n    require(\\n      account != address(0),\\n      \\\"HEROToken#4\\\"\\n    );\\n\\n    if (excludedAccounts[account].exists) {\\n      require(\\n        excludedAccounts[account].excludeSenderFromFee != excludeSenderFromFee ||\\n        excludedAccounts[account].excludeRecipientFromFee != excludeRecipientFromFee,\\n        \\\"HEROToken#5\\\"\\n      );\\n\\n      excludedAccounts[account].excludeSenderFromFee = excludeSenderFromFee;\\n      excludedAccounts[account].excludeRecipientFromFee = excludeRecipientFromFee;\\n    } else {\\n      require(\\n        accountBalances[account] == 0,\\n        \\\"HEROToken#6\\\"\\n      );\\n\\n      excludedAccounts[account].exists = true;\\n      excludedAccounts[account].excludeSenderFromFee = excludeSenderFromFee;\\n      excludedAccounts[account].excludeRecipientFromFee = excludeRecipientFromFee;\\n    }\\n\\n    emit AccountExcluded(\\n      account,\\n      excludeSenderFromFee,\\n      excludeRecipientFromFee\\n    );\\n  }\\n\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    require(\\n      owner != address(0),\\n      \\\"HEROToken#7\\\"\\n    );\\n\\n    require(\\n      spender != address(0),\\n      \\\"HEROToken#8\\\"\\n    );\\n\\n    accountAllowances[owner][spender] = amount;\\n\\n    emit Approval(\\n      owner,\\n      spender,\\n      amount\\n    );\\n  }\\n\\n  function _mint(\\n    address account,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    require(\\n      account != address(0),\\n      \\\"HEROToken#9\\\"\\n    );\\n\\n    require(\\n      amount != 0,\\n      \\\"HEROToken#10\\\"\\n    );\\n\\n    require(\\n      excludedAccounts[account].exists,\\n      \\\"HEROToken#11\\\"\\n    );\\n\\n    summary.totalSupply = summary.totalSupply.add(amount);\\n    summary.totalExcluded = summary.totalExcluded.add(amount);\\n\\n    accountBalances[account] = accountBalances[account].add(amount);\\n\\n    _emitTransfer(\\n      address(0),\\n      account,\\n      amount\\n    );\\n  }\\n\\n  function _burn(\\n    address account,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    require(\\n      account != address(0),\\n      \\\"HEROToken#12\\\"\\n    );\\n\\n    require(\\n      amount != 0,\\n      \\\"HEROToken#13\\\"\\n    );\\n\\n    require(\\n      accountBalances[account] >= amount,\\n      \\\"HEROToken#14\\\"\\n    );\\n\\n    require(\\n      excludedAccounts[account].exists,\\n      \\\"HEROToken#15\\\"\\n    );\\n\\n    uint256 totalSupply_ = summary.totalSupply.sub(amount);\\n\\n    if (settings.minTotalSupply != 0) {\\n      require(\\n        totalSupply_ >= settings.minTotalSupply,\\n        \\\"HEROToken#16\\\"\\n      );\\n    }\\n\\n    accountBalances[account] = accountBalances[account].sub(amount);\\n\\n    summary.totalSupply = totalSupply_;\\n    summary.totalExcluded = summary.totalExcluded.sub(amount);\\n\\n    _emitTransfer(\\n      account,\\n      address(0),\\n      amount\\n    );\\n  }\\n\\n  function _transfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    require(\\n      sender != address(0),\\n      \\\"HEROToken#17\\\"\\n    );\\n\\n    require(\\n      recipient != address(0),\\n      \\\"HEROToken#18\\\"\\n    );\\n\\n    require(\\n      amount != 0,\\n      \\\"HEROToken#19\\\"\\n    );\\n\\n    require(\\n      excludedAccounts[sender].exists ||\\n      presaleFinished,\\n      \\\"HEROToken#20\\\"\\n    );\\n\\n    if (sender == recipient) {\\n      _syncLP();\\n\\n      _emitTransfer(\\n        sender,\\n        recipient,\\n        0\\n      );\\n    } else if (\\n      !excludedAccounts[sender].exists &&\\n      !excludedAccounts[recipient].exists\\n    ) {\\n      _transferBetweenHolderAccounts(\\n        sender,\\n        recipient,\\n        amount\\n      );\\n    } else if (\\n      excludedAccounts[sender].exists &&\\n      !excludedAccounts[recipient].exists\\n    ) {\\n      _transferFromExcludedAccount(\\n        sender,\\n        recipient,\\n        amount\\n      );\\n    } else if (\\n      !excludedAccounts[sender].exists &&\\n      excludedAccounts[recipient].exists\\n    ) {\\n      _transferToExcludedAccount(\\n        sender,\\n        recipient,\\n        amount\\n      );\\n    } else {\\n      _transferBetweenExcludedAccounts(\\n        sender,\\n        recipient,\\n        amount\\n      );\\n    }\\n  }\\n\\n  function _transferBetweenHolderAccounts(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    uint256 senderAmount;\\n    uint256 senderBurnFee;\\n    uint256 senderLpFee;\\n\\n    uint256 recipientAmount;\\n    uint256 recipientBurnFee;\\n    uint256 recipientLpFee;\\n\\n    uint256 totalSupply_ = summary.totalSupply;\\n    uint256 totalFee;\\n\\n    {\\n      uint256 senderTotalFee;\\n      uint256 recipientTotalFee;\\n\\n      (\\n        senderTotalFee,\\n        senderBurnFee,\\n        senderLpFee\\n      ) = _calcTransferSenderFees(amount);\\n\\n      (\\n        totalSupply_,\\n        senderTotalFee,\\n        senderBurnFee\\n      ) = _matchTotalSupplyWithFees(totalSupply_, senderTotalFee, senderBurnFee);\\n\\n      (\\n        recipientTotalFee,\\n        recipientBurnFee,\\n        recipientLpFee\\n      ) = _calcTransferRecipientFees(amount);\\n\\n      (\\n        totalSupply_,\\n        recipientTotalFee,\\n        recipientBurnFee\\n      ) = _matchTotalSupplyWithFees(totalSupply_, recipientTotalFee, recipientBurnFee);\\n\\n      totalFee = senderTotalFee.add(recipientTotalFee);\\n      senderAmount = amount.add(senderTotalFee);\\n      recipientAmount = amount.sub(recipientTotalFee);\\n    }\\n\\n    if (summary.totalRewards != 0) {\\n      uint256 totalHoldingWithRewards = summary.totalHolding.add(\\n        summary.totalRewards\\n      );\\n\\n      senderAmount = senderAmount.mul(summary.totalHolding).div(\\n        totalHoldingWithRewards\\n      );\\n      recipientAmount = recipientAmount.mul(summary.totalHolding).div(\\n        totalHoldingWithRewards\\n      );\\n      totalFee = totalFee.mul(summary.totalHolding).div(\\n        totalHoldingWithRewards\\n      );\\n    }\\n\\n    require(\\n      accountBalances[sender] >= senderAmount,\\n      \\\"HEROToken#21\\\"\\n    );\\n\\n    accountBalances[sender] = accountBalances[sender].sub(senderAmount);\\n    accountBalances[recipient] = accountBalances[recipient].add(recipientAmount);\\n\\n    summary.totalSupply = totalSupply_;\\n    summary.totalHolding = summary.totalHolding.sub(totalFee);\\n\\n    _increaseTotalLP(senderLpFee.add(recipientLpFee));\\n\\n    // emits events\\n\\n    _emitTransfer(\\n      sender,\\n      recipient,\\n      amount\\n    );\\n\\n    _emitTransfer(\\n      sender,\\n      address(0),\\n      senderBurnFee\\n    );\\n\\n    _emitTransfer(\\n      sender,\\n      address(lpManager),\\n      senderLpFee\\n    );\\n\\n    _emitTransfer(\\n      recipient,\\n      address(0),\\n      recipientBurnFee\\n    );\\n\\n    _emitTransfer(\\n      recipient,\\n      address(lpManager),\\n      recipientLpFee\\n    );\\n\\n    _updateTotalRewards();\\n\\n    _syncLP();\\n  }\\n\\n  function _transferFromExcludedAccount(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    require(\\n      accountBalances[sender] >= amount,\\n      \\\"HEROToken#22\\\"\\n    );\\n\\n    (\\n      bool shouldSyncLPBefore,\\n      bool shouldSyncLPAfter\\n    ) = _canSyncLP(\\n      sender,\\n      address(0)\\n    );\\n\\n    if (shouldSyncLPBefore) {\\n      lpManager.syncLP();\\n    }\\n\\n    uint256 recipientTotalFee;\\n    uint256 recipientBurnFee;\\n    uint256 recipientLPFee;\\n\\n    uint256 totalSupply_ = summary.totalSupply;\\n\\n    if (!excludedAccounts[sender].excludeRecipientFromFee) {\\n      (\\n        recipientTotalFee,\\n        recipientBurnFee,\\n        recipientLPFee\\n      ) = _calcTransferRecipientFees(amount);\\n\\n      (\\n        totalSupply_,\\n        recipientTotalFee,\\n        recipientBurnFee\\n      ) = _matchTotalSupplyWithFees(totalSupply_, recipientTotalFee, recipientBurnFee);\\n    }\\n\\n    uint256 recipientAmount = amount.sub(recipientTotalFee);\\n\\n    accountBalances[sender] = accountBalances[sender].sub(amount);\\n    accountBalances[recipient] = accountBalances[recipient].add(recipientAmount);\\n\\n    summary.totalSupply = totalSupply_;\\n    summary.totalExcluded = summary.totalExcluded.sub(amount);\\n    summary.totalHolding = summary.totalHolding.add(recipientAmount);\\n\\n    _increaseTotalLP(recipientLPFee);\\n\\n    // emits events\\n\\n    _emitTransfer(\\n      sender,\\n      recipient,\\n      amount\\n    );\\n\\n    _emitTransfer(\\n      recipient,\\n      address(0),\\n      recipientBurnFee\\n    );\\n\\n    _emitTransfer(\\n      recipient,\\n      address(lpManager),\\n      recipientLPFee\\n    );\\n\\n    _updateTotalRewards();\\n\\n    if (shouldSyncLPAfter) {\\n      lpManager.syncLP();\\n    }\\n  }\\n\\n  function _transferToExcludedAccount(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    (\\n      bool shouldSyncLPBefore,\\n      bool shouldSyncLPAfter\\n    ) = _canSyncLP(\\n      address(0),\\n      recipient\\n    );\\n\\n    if (shouldSyncLPBefore) {\\n      lpManager.syncLP();\\n    }\\n\\n    uint256 senderTotalFee;\\n    uint256 senderBurnFee;\\n    uint256 senderLpFee;\\n\\n    uint256 totalSupply_ = summary.totalSupply;\\n\\n    if (!excludedAccounts[recipient].excludeSenderFromFee) {\\n      (\\n        senderTotalFee,\\n        senderBurnFee,\\n        senderLpFee\\n      ) = _calcTransferSenderFees(amount);\\n\\n      (\\n        totalSupply_,\\n        senderTotalFee,\\n        senderBurnFee\\n      ) = _matchTotalSupplyWithFees(totalSupply_, senderTotalFee, senderBurnFee);\\n    }\\n\\n    uint256 senderAmount = amount.add(senderTotalFee);\\n\\n    if (summary.totalRewards != 0) {\\n      uint256 totalHoldingWithRewards = summary.totalHolding.add(\\n        summary.totalRewards\\n      );\\n\\n      senderAmount = senderAmount.mul(summary.totalHolding).div(\\n        totalHoldingWithRewards\\n      );\\n    }\\n\\n    require(\\n      accountBalances[sender] >= senderAmount,\\n      \\\"HEROToken#23\\\"\\n    );\\n\\n    accountBalances[sender] = accountBalances[sender].sub(senderAmount);\\n    accountBalances[recipient] = accountBalances[recipient].add(amount);\\n\\n    summary.totalSupply = totalSupply_;\\n    summary.totalExcluded = summary.totalExcluded.add(amount);\\n    summary.totalHolding = summary.totalHolding.sub(senderAmount);\\n\\n    _increaseTotalLP(senderLpFee);\\n\\n    // emits events\\n\\n    _emitTransfer(\\n      sender,\\n      recipient,\\n      amount\\n    );\\n\\n    _emitTransfer(\\n      sender,\\n      address(0),\\n      senderBurnFee\\n    );\\n\\n    _emitTransfer(\\n      sender,\\n      address(lpManager),\\n      senderLpFee\\n    );\\n\\n    _updateTotalRewards();\\n\\n    if (shouldSyncLPAfter) {\\n      lpManager.syncLP();\\n    }\\n  }\\n\\n  function _transferBetweenExcludedAccounts(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    require(\\n      accountBalances[sender] >= amount,\\n      \\\"HEROToken#24\\\"\\n    );\\n\\n    (\\n      bool shouldSyncLPBefore,\\n      bool shouldSyncLPAfter\\n    ) = _canSyncLP(\\n      address(0),\\n      recipient\\n    );\\n\\n    if (shouldSyncLPBefore) {\\n      lpManager.syncLP();\\n    }\\n\\n    accountBalances[sender] = accountBalances[sender].sub(amount);\\n    accountBalances[recipient] = accountBalances[recipient].add(amount);\\n\\n    _emitTransfer(\\n      sender,\\n      recipient,\\n      amount\\n    );\\n\\n    if (shouldSyncLPAfter) {\\n      lpManager.syncLP();\\n    }\\n  }\\n\\n  function _emitTransfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    if (amount != 0) {\\n      emit Transfer(\\n        sender,\\n        recipient,\\n        amount\\n      );\\n    }\\n  }\\n\\n  function _increaseTotalLP(\\n    uint256 amount\\n  )\\n    private\\n  {\\n    if (amount != 0) {\\n      accountBalances[address(lpManager)] = accountBalances[address(lpManager)].add(amount);\\n\\n      summary.totalExcluded = summary.totalExcluded.add(amount);\\n    }\\n  }\\n\\n  function _syncLP()\\n    private\\n  {\\n    if (address(lpManager) != address(0)) {\\n      lpManager.syncLP();\\n    }\\n  }\\n\\n  function _updateTotalRewards()\\n    private\\n  {\\n    uint256 totalRewards = summary.totalSupply\\n    .sub(summary.totalExcluded)\\n    .sub(summary.totalHolding);\\n\\n    if (totalRewards != summary.totalRewards) {\\n      summary.totalRewards = totalRewards;\\n\\n      emit TotalRewardsUpdated(\\n        totalRewards\\n      );\\n    }\\n  }\\n\\n  // private functions (views)\\n\\n  function _matchTotalSupplyWithFees(\\n    uint256 totalSupply_,\\n    uint256 totalFee,\\n    uint256 burnFee\\n  )\\n    private\\n    view\\n    returns (uint256, uint256, uint256)\\n  {\\n    if (burnFee != 0 && settings.minTotalSupply != 0) {\\n      uint256 newTotalSupply = totalSupply_.sub(burnFee);\\n\\n      if (newTotalSupply >= settings.minTotalSupply) {\\n        totalSupply_ = newTotalSupply;\\n      } else  {\\n        totalFee = totalFee.sub(burnFee);\\n        burnFee = 0;\\n      }\\n    }\\n\\n    return (totalSupply_, totalFee, burnFee);\\n  }\\n\\n  function _canSyncLP(\\n    address sender,\\n    address recipient\\n  )\\n    private\\n    view\\n    returns (\\n      bool shouldSyncLPBefore,\\n      bool shouldSyncLPAfter\\n    )\\n  {\\n    if (address(lpManager) != address(0)) {\\n      (shouldSyncLPBefore, shouldSyncLPAfter) = lpManager.canSyncLP(\\n        sender,\\n        recipient\\n      );\\n    }\\n\\n    return (shouldSyncLPBefore, shouldSyncLPAfter);\\n  }\\n\\n  function _calcRewards(\\n    address account\\n  )\\n    private\\n    view\\n    returns (uint256 result)\\n  {\\n    if (\\n      !excludedAccounts[account].exists &&\\n      summary.totalRewards != 0\\n    ) {\\n      result = summary.totalRewards\\n        .mul(accountBalances[account])\\n        .div(summary.totalHolding);\\n    }\\n\\n    return result;\\n  }\\n\\n  function _calcTransferSenderFees(\\n    uint256 amount\\n  )\\n    private\\n    view\\n    returns (\\n      uint256 totalFee,\\n      uint256 burnFee,\\n      uint256 lpFee\\n    )\\n  {\\n    uint256 rewardsFee = amount.percent(settings.rewardsFees.sender);\\n\\n    lpFee = amount.percent(settings.lpFees.sender);\\n    burnFee = amount.percent(settings.burnFees.sender);\\n\\n    totalFee = lpFee.add(rewardsFee).add(burnFee);\\n\\n    return (totalFee, burnFee, lpFee);\\n  }\\n\\n  function _calcTransferRecipientFees(\\n    uint256 amount\\n  )\\n    private\\n    view\\n    returns (\\n      uint256 totalFee,\\n      uint256 burnFee,\\n      uint256 lpFee\\n    )\\n  {\\n    uint256 rewardsFee = amount.percent(settings.rewardsFees.recipient);\\n\\n    lpFee = amount.percent(settings.lpFees.recipient);\\n    burnFee = amount.percent(settings.burnFees.recipient);\\n\\n    totalFee = lpFee.add(rewardsFee).add(burnFee);\\n\\n    return (totalFee, burnFee, lpFee);\\n  }\\n}\\n\",\"keccak256\":\"0xd6b8281a30c1db59236ae20233320af3051876bdb354cce321d9ca68941f7648\",\"license\":\"MIT\"},\"src/access/Controlled.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Controlled\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@metahero.io>\\n */\\ncontract Controlled {\\n  address public controller;\\n\\n  // modifiers\\n\\n  modifier onlyController() {\\n    require(\\n      msg.sender == controller,\\n      \\\"Controlled#1\\\"\\n    );\\n\\n    _;\\n  }\\n\\n  // events\\n\\n  event ControllerUpdated(\\n    address controller\\n  );\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor()\\n    internal\\n  {\\n    //\\n  }\\n\\n  // internal functions\\n\\n  function _initializeController(\\n    address controller_\\n  )\\n    internal\\n  {\\n    controller = controller_;\\n  }\\n\\n  function _setController(\\n    address controller_\\n  )\\n    internal\\n  {\\n    require(\\n      controller_ != address(0),\\n      \\\"Controlled#2\\\"\\n    );\\n\\n    require(\\n      controller_ != controller,\\n      \\\"Controlled#3\\\"\\n    );\\n\\n    controller = controller_;\\n\\n    emit ControllerUpdated(\\n      controller_\\n    );\\n  }\\n\\n  function _removeController()\\n    internal\\n  {\\n    require(\\n      controller != address(0),\\n      \\\"Controlled#4\\\"\\n    );\\n\\n    controller = address(0);\\n\\n    emit ControllerUpdated(\\n      address(0)\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x847abca17987a075fead347b7b238a770aa26426c181331d652268fea2c154d6\",\"license\":\"MIT\"},\"src/access/Lockable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Lockable\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@metahero.io>\\n */\\ncontract Lockable {\\n  bool public locked;\\n\\n  // modifiers\\n\\n  modifier lock() {\\n    if (!locked) {\\n      locked = true;\\n\\n      _;\\n\\n      locked = false;\\n    }\\n  }\\n\\n  modifier lockOrThrowError() {\\n    require(\\n      !locked,\\n      \\\"Lockable#1\\\"\\n    );\\n\\n    locked = true;\\n\\n    _;\\n\\n    locked = false;\\n  }\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor()\\n    internal\\n  {\\n    //\\n  }\\n}\\n\",\"keccak256\":\"0x940fa3797298f1a0438c84fa56882b36ccf4e6296a87cf34298457fba57e58eb\",\"license\":\"MIT\"},\"src/access/Owned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Owned\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@metahero.io>\\n */\\ncontract Owned {\\n  address public owner;\\n\\n  // modifiers\\n\\n  modifier onlyOwner() {\\n    require(\\n      msg.sender == owner,\\n      \\\"Owned#1\\\"\\n    );\\n\\n    _;\\n  }\\n\\n  // events\\n\\n  event OwnerUpdated(\\n    address owner\\n  );\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor()\\n    internal\\n  {\\n    owner = msg.sender;\\n  }\\n\\n  // external functions\\n\\n  function setOwner(\\n    address owner_\\n  )\\n    external\\n    onlyOwner\\n  {\\n    require(\\n      owner_ != address(0),\\n      \\\"Owned#2\\\"\\n    );\\n\\n    require(\\n      owner_ != owner,\\n      \\\"Owned#3\\\"\\n    );\\n\\n    owner = owner_;\\n\\n    emit OwnerUpdated(\\n      owner_\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x37e541efbd245eb36ef199ec219bfacad3d08e3346e314c63adba23d74c6d677\",\"license\":\"MIT\"},\"src/erc20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"./ERC20Standard.sol\\\";\\n\\n\\n/**\\n * @title ERC20 abstract token\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@metahero.io>\\n */\\nabstract contract ERC20 is ERC20Standard {\\n  string public override name;\\n  string public override symbol;\\n  uint8 public override decimals;\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor (\\n    string memory name_,\\n    string memory symbol_,\\n    uint8 decimals_\\n  )\\n    internal\\n  {\\n    name = name_;\\n    symbol = symbol_;\\n    decimals = decimals_;\\n  }\\n}\\n\",\"keccak256\":\"0x2cbb9759631c4a0d545c7fed3e2d62613a55c7f26e4a67c9eeea27376a359c84\",\"license\":\"MIT\"},\"src/erc20/ERC20Standard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title ERC20 standard interface\\n *\\n * @notice See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\\n */\\ninterface ERC20Standard {\\n  // events\\n\\n  event Approval(\\n    address indexed owner,\\n    address indexed spender,\\n    uint256 value\\n  );\\n\\n  event Transfer(\\n    address indexed from,\\n    address indexed to,\\n    uint256 value\\n  );\\n\\n  // external functions\\n\\n  function approve(\\n    address spender,\\n    uint256 value\\n  )\\n    external\\n    returns (bool);\\n\\n  function transfer(\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (bool);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (bool);\\n\\n  // external functions (views)\\n\\n  function totalSupply()\\n    external\\n    view\\n    returns (uint256);\\n\\n  function balanceOf(\\n    address owner\\n  )\\n    external\\n    view\\n    returns (uint256);\\n\\n  function allowance(\\n    address owner,\\n    address spender\\n  )\\n    external\\n    view\\n    returns (uint256);\\n\\n  // external functions (pure)\\n\\n  function name()\\n    external\\n    pure\\n    returns (string memory);\\n\\n  function symbol()\\n    external\\n    pure\\n    returns (string memory);\\n\\n  function decimals()\\n    external\\n    pure\\n    returns (uint8);\\n}\\n\",\"keccak256\":\"0x51ed5fe8916ffb76d9d81861e15898c67f3af47d6c307dec1b511e06cfcd1865\",\"license\":\"MIT\"},\"src/lifecycle/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Initializable\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@metahero.io>\\n */\\ncontract Initializable {\\n  address private initializer;\\n\\n  // events\\n\\n  event Initialized();\\n\\n  // modifiers\\n\\n  modifier onlyInitializer() {\\n    require(\\n      initializer != address(0),\\n      \\\"Initializable#1\\\"\\n    );\\n\\n    require(\\n      msg.sender == initializer,\\n      \\\"Initializable#2\\\"\\n    );\\n\\n    initializer = address(0);\\n\\n    _;\\n\\n    emit Initialized();\\n  }\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor()\\n    internal\\n  {\\n    initializer = msg.sender;\\n  }\\n\\n  // external functions (views)\\n\\n  function initialized()\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return initializer == address(0);\\n  }\\n}\\n\",\"keccak256\":\"0x6ba4ff91c02ce6a58b4aa6673f896c0ec1faab07a263297361a726d212ec2059\",\"license\":\"MIT\"},\"src/math/MathLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"./SafeMathLib.sol\\\";\\n\\n\\n/**\\n * @title Math library\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@metahero.io>\\n */\\nlibrary MathLib {\\n  using SafeMathLib for uint256;\\n\\n  // internal functions (pure)\\n\\n  function percent(\\n    uint256 a,\\n    uint256 p\\n  )\\n    internal\\n    pure\\n    returns (uint256 result)\\n  {\\n    if (a != 0 && p != 0) {\\n      result = a.mul(p).div(100);\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0xb8838413f9d69571df8d35a7e1e12c266e6df425caeae7adfbfcf023e3c9d383\",\"license\":\"MIT\"},\"src/math/SafeMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Safe math library\\n *\\n * @notice Based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/5fe8f4e93bd1d4f5cc9a6899d7f24f5ffe4c14aa/contracts/math/SafeMath.sol\\n */\\nlibrary SafeMathLib {\\n  // internal functions (pure)\\n\\n  function add(\\n    uint256 a,\\n    uint256 b\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    uint256 c = a + b;\\n\\n    require(\\n      c >= a,\\n      \\\"SafeMathLib#1\\\"\\n    );\\n\\n    return c;\\n  }\\n\\n  function sub(\\n    uint256 a,\\n    uint256 b\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    require(\\n      b <= a,\\n      \\\"SafeMathLib#2\\\"\\n    );\\n\\n    return a - b;\\n  }\\n\\n  function mul(\\n    uint256 a,\\n    uint256 b\\n  )\\n    internal\\n    pure\\n    returns (uint256 result)\\n  {\\n    if (a != 0 && b != 0) {\\n      result = a * b;\\n\\n      require(\\n        result / a == b,\\n        \\\"SafeMathLib#3\\\"\\n      );\\n    }\\n\\n    return result;\\n  }\\n\\n  function div(\\n    uint256 a,\\n    uint256 b\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    require(\\n      b != 0,\\n      \\\"SafeMathLib#4\\\"\\n    );\\n\\n    return a / b;\\n  }\\n}\\n\",\"keccak256\":\"0x1669c67eeadba2bf08c07f91e0f8e40106cbf3c3171bc5cdd0b2a07dcb63e0b4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040518060400160405280600881526020017f4d6574616865726f0000000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f4845524f00000000000000000000000000000000000000000000000000000000815250601233600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260029080519060200190620000d992919062000158565b508160039080519060200190620000f292919062000158565b5080600460006101000a81548160ff021916908360ff16021790555050505033600460016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620001fe565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200019b57805160ff1916838001178555620001cc565b82800160010185558215620001cc579182015b82811115620001cb578251825591602001919060010190620001ae565b5b509050620001db9190620001df565b5090565b5b80821115620001fa576000816000905550600101620001e0565b5090565b614d2a806200020e6000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c806370a08231116100c3578063a9059cbb1161007c578063a9059cbb1461037c578063b16a867c146103ac578063b906f15a146103cd578063dd62ed3e146103eb578063e06174e41461041b578063f77c47911461043c5761014d565b806370a08231146102cc5780638578e3e9146102fc5780638da5cb5b1461031857806390b5e6d91461033657806395d89b4114610354578063974654c6146103725761014d565b80632197fb25116101155780632197fb25146101f857806323b872dd146102145780632d38031514610244578063313ce5671461027657806340c10f191461029457806342966c68146102b05761014d565b806306fdde0314610152578063095ea7b31461017057806313af4035146101a0578063158ef93e146101bc57806318160ddd146101da575b600080fd5b61015a61045a565b6040516101679190614650565b60405180910390f35b61018a60048036038101906101859190613af9565b6104f8565b60405161019791906145f1565b60405180910390f35b6101ba60048036038101906101b591906139f6565b61050f565b005b6101c461071b565b6040516101d191906145f1565b60405180910390f35b6101e2610773565b6040516101ef9190614af7565b60405180910390f35b610212600480360381019061020d9190613aaa565b610780565b005b61022e60048036038101906102299190613a5b565b610820565b60405161023b91906145f1565b60405180910390f35b61025e600480360381019061025991906139f6565b61091a565b60405161026d93929190614b12565b60405180910390f35b61027e610988565b60405161028b9190614b8e565b60405180910390f35b6102ae60048036038101906102a99190613af9565b61099b565b005b6102ca60048036038101906102c59190613c42565b610a37565b005b6102e660048036038101906102e191906139f6565b610a44565b6040516102f39190614af7565b60405180910390f35b61031660048036038101906103119190613b71565b610aa7565b005b610320610df4565b60405161032d91906145ad565b60405180910390f35b61033e610e1a565b60405161034b91906145f1565b60405180910390f35b61035c610e2d565b6040516103699190614650565b60405180910390f35b61037a610ecb565b005b61039660048036038101906103919190613af9565b610ff4565b6040516103a391906145f1565b60405180910390f35b6103b461100b565b6040516103c49493929190614b49565b60405180910390f35b6103d5611029565b6040516103e29190614635565b60405180910390f35b61040560048036038101906104009190613a1f565b61104f565b6040516104129190614af7565b60405180910390f35b6104236110d6565b6040516104339493929190614ab2565b60405180910390f35b61044461114e565b60405161045191906145ad565b60405180910390f35b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104f05780601f106104c5576101008083540402835291602001916104f0565b820191906000526020600020905b8154815290600101906020018083116104d357829003601f168201915b505050505081565b6000610505338484611172565b6001905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461059f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059690614a32565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561060f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610606906149b2565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156106a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069790614952565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f4ffd725fc4a22075e9ec71c59edf9c38cdeb588a91b24fc5b61388c5be41282b8160405161071091906145ad565b60405180910390a150565b60008073ffffffffffffffffffffffffffffffffffffffff16600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905090565b6000600d60030154905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610810576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080790614a32565b60405180910390fd5b61081b83838361133d565b505050565b600061082d848484611796565b6000601360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828110156108f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e890614912565b60405180910390fd5b61090e85336109098685611bfc90919063ffffffff16565b611172565b60019150509392505050565b6000806000601260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915061096a84611c4c565b905061097f8183611d2c90919063ffffffff16565b92509193909250565b600460009054906101000a900460ff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a20906149d2565b60405180910390fd5b610a338282611d81565b5050565b610a413382611fab565b50565b6000610aa0610a5283611c4c565b601260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d2c90919063ffffffff16565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff16600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610b39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b30906148d2565b60405180910390fd5b600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610bc9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc090614892565b60405180910390fd5b6000600460016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555088600660000160008201518160000155602082015181600101559050508760066002016000820151816000015560208201518160010155905050866006600401600082015181600001556020820151816001015590505085600680018190555060008860000151141580610c8457506000886020015114155b15610d4757600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415610cf9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf090614a12565b60405180910390fd5b84600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610d468560008061133d565b5b610d50846122b1565b60008314610d6f57610d643360018061133d565b610d6e3384611d81565b5b600082829050905060005b81811015610dbb57610dae848483818110610d9157fe5b9050602002016020810190610da691906139f6565b60008061133d565b8080600101915050610d7a565b50507f5daa87a0e9463431830481fd4b6e3403442dfb9a12b9c07597e9f61d50b633c860405160405180910390a1505050505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b601160009054906101000a900460ff1681565b60038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ec35780601f10610e9857610100808354040283529160200191610ec3565b820191906000526020600020905b815481529060010190602001808311610ea657829003601f168201915b505050505081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5290614a32565b60405180910390fd5b601160009054906101000a900460ff1615610fab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fa2906147b2565b60405180910390fd5b6001601160006101000a81548160ff0219169083151502179055507f0b5ca8ee9a23a12c9bb341511e83987d73bee14e96dc855aeaea8840c54ea0bd60405160405180910390a1565b6000611001338484611796565b6001905092915050565b600d8060000154908060010154908060020154908060030154905084565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000601360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60068060000160405180604001604052908160008201548152602001600182015481525050908060020160405180604001604052908160008201548152602001600182015481525050908060040160405180604001604052908160008201548152602001600182015481525050908060060154905084565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156111e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d990614992565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611252576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124990614772565b60405180910390fd5b80601360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516113309190614af7565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156113ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113a490614792565b60405180910390fd5b601460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16156115af57811515601460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff1615151415806114b75750801515601460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160029054906101000a900460ff16151514155b6114f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ed906146d2565b60405180910390fd5b81601460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160016101000a81548160ff02191690831515021790555080601460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160026101000a81548160ff021916908315150217905550611741565b6000601260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414611631576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162890614972565b60405180910390fd5b6001601460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff02191690831515021790555081601460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160016101000a81548160ff02191690831515021790555080601460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160026101000a81548160ff0219169083151502179055505b8273ffffffffffffffffffffffffffffffffffffffff167f32007f1d99093107aa587b30e94adbad373aaa061b0ed208485221eecf52ac21838360405161178992919061460c565b60405180910390a2505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611806576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117fd906148b2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611876576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161186d906148f2565b60405180910390fd5b60008114156118ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118b190614832565b60405180910390fd5b601460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16806119215750601160009054906101000a900460ff165b611960576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195790614a52565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156119ad5761199c6122f4565b6119a8838360006123cf565b611bf7565b601460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16158015611a575750601460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16155b15611a6c57611a67838383612442565b611bf6565b601460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff168015611b155750601460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16155b15611b2a57611b25838383612833565b611bf5565b601460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16158015611bd35750601460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff165b15611be857611be3838383612c56565b611bf4565b611bf38383836130d5565b5b5b5b5b505050565b600082821115611c41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c38906147d2565b60405180910390fd5b818303905092915050565b6000601460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16158015611cb157506000600d6002015414155b15611d2757611d24600d60010154611d16601260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600d600201546133b790919063ffffffff16565b61342690919063ffffffff16565b90505b919050565b600080828401905083811015611d77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d6e906146f2565b60405180910390fd5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611df1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611de890614872565b60405180910390fd5b6000811415611e35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e2c90614812565b60405180910390fd5b601460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16611ec4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ebb90614732565b60405180910390fd5b611edc81600d60030154611d2c90919063ffffffff16565b600d60030181905550611efd81600d60000154611d2c90919063ffffffff16565b600d60000181905550611f5881601260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d2c90919063ffffffff16565b601260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611fa7600083836123cf565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561201b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161201290614692565b60405180910390fd5b600081141561205f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612056906149f2565b60405180910390fd5b80601260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156120e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120d890614a92565b60405180910390fd5b601460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16612170576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161216790614712565b60405180910390fd5b600061218a82600d60030154611bfc90919063ffffffff16565b905060006006800154146121e05760068001548110156121df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121d690614932565b60405180910390fd5b5b61223282601260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611bfc90919063ffffffff16565b601260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600d6003018190555061229782600d60000154611bfc90919063ffffffff16565b600d600001819055506122ac836000846123cf565b505050565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146123cd57600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166339071c9e6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156123b457600080fd5b505af11580156123c8573d6000803e3d6000fd5b505050505b565b6000811461243d578173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516124349190614af7565b60405180910390a35b505050565b6000806000806000806000600d60030154905060008060006124638b61347d565b809a50819b5082945050505061247a84838b613509565b809b5081945082965050505061248f8b613580565b8097508198508293505050506124a6848288613509565b8098508193508296505050506124c58183611d2c90919063ffffffff16565b92506124da828c611d2c90919063ffffffff16565b99506124ef818c611bfc90919063ffffffff16565b965050506000600d60020154146125a757600061251f600d60020154600d60010154611d2c90919063ffffffff16565b905061254b8161253d600d600101548c6133b790919063ffffffff16565b61342690919063ffffffff16565b985061257781612569600d60010154896133b790919063ffffffff16565b61342690919063ffffffff16565b95506125a381612595600d60010154856133b790919063ffffffff16565b61342690919063ffffffff16565b9150505b87601260008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015612629576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612620906147f2565b60405180910390fd5b61267b88601260008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611bfc90919063ffffffff16565b601260008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061271085601260008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d2c90919063ffffffff16565b601260008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600d6003018190555061277581600d60010154611bfc90919063ffffffff16565b600d600101819055506127996127948488611d2c90919063ffffffff16565b61360c565b6127a48b8b8b6123cf565b6127b08b6000896123cf565b6127dd8b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16886123cf565b6127e98a6000866123cf565b6128168a600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856123cf565b61281e613712565b6128266122f4565b5050505050505050505050565b80601260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156128b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128ac90614752565b60405180910390fd5b6000806128c385600061379b565b91509150811561295057600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166339071c9e6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561293757600080fd5b505af115801561294b573d6000803e3d6000fd5b505050505b600080600080600d600301549050601460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160029054906101000a900460ff166129df576129bb87613580565b8094508195508296505050506129d2818585613509565b8095508196508293505050505b60006129f48589611bfc90919063ffffffff16565b9050612a4888601260008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611bfc90919063ffffffff16565b601260008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612add81601260008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d2c90919063ffffffff16565b601260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600d60030181905550612b4288600d60000154611bfc90919063ffffffff16565b600d60000181905550612b6381600d60010154611d2c90919063ffffffff16565b600d60010181905550612b758361360c565b612b808a8a8a6123cf565b612b8c896000866123cf565b612bb989600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856123cf565b612bc1613712565b8515612c4a57600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166339071c9e6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612c3157600080fd5b505af1158015612c45573d6000803e3d6000fd5b505050505b50505050505050505050565b600080612c6460008561379b565b915091508115612cf157600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166339071c9e6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612cd857600080fd5b505af1158015612cec573d6000803e3d6000fd5b505050505b600080600080600d600301549050601460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff16612d8057612d5c8761347d565b809450819550829650505050612d73818585613509565b8095508196508293505050505b6000612d958589611d2c90919063ffffffff16565b90506000600d6002015414612df3576000612dc3600d60020154600d60010154611d2c90919063ffffffff16565b9050612def81612de1600d60010154856133b790919063ffffffff16565b61342690919063ffffffff16565b9150505b80601260008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015612e75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e6c90614672565b60405180910390fd5b612ec781601260008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611bfc90919063ffffffff16565b601260008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612f5c88601260008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d2c90919063ffffffff16565b601260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600d60030181905550612fc188600d60000154611d2c90919063ffffffff16565b600d60000181905550612fe281600d60010154611bfc90919063ffffffff16565b600d60010181905550612ff48361360c565b612fff8a8a8a6123cf565b61300b8a6000866123cf565b6130388a600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856123cf565b613040613712565b85156130c957600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166339071c9e6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156130b057600080fd5b505af11580156130c4573d6000803e3d6000fd5b505050505b50505050505050505050565b80601260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015613157576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161314e90614852565b60405180910390fd5b60008061316560008561379b565b9150915081156131f257600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166339071c9e6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156131d957600080fd5b505af11580156131ed573d6000803e3d6000fd5b505050505b61324483601260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611bfc90919063ffffffff16565b601260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506132d983601260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d2c90919063ffffffff16565b601260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506133278585856123cf565b80156133b057600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166339071c9e6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561339757600080fd5b505af11580156133ab573d6000803e3d6000fd5b505050505b5050505050565b60008083141580156133ca575060008214155b15613420578183029050818382816133de57fe5b041461341f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161341690614a72565b60405180910390fd5b5b92915050565b60008082141561346b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613462906146b2565b60405180910390fd5b81838161347457fe5b04905092915050565b60008060008061349e600660040160000154866138b090919063ffffffff16565b90506134bb600660020160000154866138b090919063ffffffff16565b91506134d8600660000160000154866138b090919063ffffffff16565b92506134ff836134f18385611d2c90919063ffffffff16565b611d2c90919063ffffffff16565b9350509193909250565b600080600080841415801561352357506000600680015414155b1561356e57600061353d8588611bfc90919063ffffffff16565b9050600680015481106135525780965061356c565b6135658587611bfc90919063ffffffff16565b9550600094505b505b85858592509250925093509350939050565b6000806000806135a1600660040160010154866138b090919063ffffffff16565b90506135be600660020160010154866138b090919063ffffffff16565b91506135db600660000160010154866138b090919063ffffffff16565b9250613602836135f48385611d2c90919063ffffffff16565b611d2c90919063ffffffff16565b9350509193909250565b6000811461370f576136888160126000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d2c90919063ffffffff16565b60126000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061370581600d60000154611d2c90919063ffffffff16565b600d600001819055505b50565b6000613748600d6001015461373a600d60000154600d60030154611bfc90919063ffffffff16565b611bfc90919063ffffffff16565b9050600d6002015481146137985780600d600201819055507f8629690313970e9e42939fc905246bd1ff3a69dae5efc961f8b40a91a838dffe8160405161378f9190614af7565b60405180910390a15b50565b600080600073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146138a957600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632070e9ea85856040518363ffffffff1660e01b81526004016138519291906145c8565b604080518083038186803b15801561386857600080fd5b505afa15801561387c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138a09190613b35565b80925081935050505b9250929050565b60008083141580156138c3575060008214155b156138f1576138ee60646138e084866133b790919063ffffffff16565b61342690919063ffffffff16565b90505b92915050565b60008135905061390681614cc1565b92915050565b60008135905061391b81614cd8565b92915050565b60008083601f84011261393357600080fd5b8235905067ffffffffffffffff81111561394c57600080fd5b60208301915083602082028301111561396457600080fd5b9250929050565b60008135905061397a81614cef565b92915050565b60008151905061398f81614cef565b92915050565b6000604082840312156139a757600080fd5b6139b16040614ba9565b905060006139c1848285016139e1565b60008301525060206139d5848285016139e1565b60208301525092915050565b6000813590506139f081614d06565b92915050565b600060208284031215613a0857600080fd5b6000613a16848285016138f7565b91505092915050565b60008060408385031215613a3257600080fd5b6000613a40858286016138f7565b9250506020613a51858286016138f7565b9150509250929050565b600080600060608486031215613a7057600080fd5b6000613a7e868287016138f7565b9350506020613a8f868287016138f7565b9250506040613aa0868287016139e1565b9150509250925092565b600080600060608486031215613abf57600080fd5b6000613acd868287016138f7565b9350506020613ade8682870161396b565b9250506040613aef8682870161396b565b9150509250925092565b60008060408385031215613b0c57600080fd5b6000613b1a858286016138f7565b9250506020613b2b858286016139e1565b9150509250929050565b60008060408385031215613b4857600080fd5b6000613b5685828601613980565b9250506020613b6785828601613980565b9150509250929050565b60008060008060008060008060006101608a8c031215613b9057600080fd5b6000613b9e8c828d01613995565b9950506040613baf8c828d01613995565b9850506080613bc08c828d01613995565b97505060c0613bd18c828d016139e1565b96505060e0613be28c828d0161390c565b955050610100613bf48c828d016138f7565b945050610120613c068c828d016139e1565b9350506101408a013567ffffffffffffffff811115613c2457600080fd5b613c308c828d01613921565b92509250509295985092959850929598565b600060208284031215613c5457600080fd5b6000613c62848285016139e1565b91505092915050565b613c7481614bf2565b82525050565b613c8381614c16565b82525050565b613c9281614c59565b82525050565b6000613ca382614bd6565b613cad8185614be1565b9350613cbd818560208601614c7d565b613cc681614cb0565b840191505092915050565b6000613cde600c83614be1565b91507f4845524f546f6b656e23323300000000000000000000000000000000000000006000830152602082019050919050565b6000613d1e600c83614be1565b91507f4845524f546f6b656e23313200000000000000000000000000000000000000006000830152602082019050919050565b6000613d5e600d83614be1565b91507f536166654d6174684c69622334000000000000000000000000000000000000006000830152602082019050919050565b6000613d9e600b83614be1565b91507f4845524f546f6b656e23350000000000000000000000000000000000000000006000830152602082019050919050565b6000613dde600d83614be1565b91507f536166654d6174684c69622331000000000000000000000000000000000000006000830152602082019050919050565b6000613e1e600c83614be1565b91507f4845524f546f6b656e23313500000000000000000000000000000000000000006000830152602082019050919050565b6000613e5e600c83614be1565b91507f4845524f546f6b656e23313100000000000000000000000000000000000000006000830152602082019050919050565b6000613e9e600c83614be1565b91507f4845524f546f6b656e23323200000000000000000000000000000000000000006000830152602082019050919050565b6000613ede600b83614be1565b91507f4845524f546f6b656e23380000000000000000000000000000000000000000006000830152602082019050919050565b6000613f1e600b83614be1565b91507f4845524f546f6b656e23340000000000000000000000000000000000000000006000830152602082019050919050565b6000613f5e600b83614be1565b91507f4845524f546f6b656e23320000000000000000000000000000000000000000006000830152602082019050919050565b6000613f9e600d83614be1565b91507f536166654d6174684c69622332000000000000000000000000000000000000006000830152602082019050919050565b6000613fde600c83614be1565b91507f4845524f546f6b656e23323100000000000000000000000000000000000000006000830152602082019050919050565b600061401e600c83614be1565b91507f4845524f546f6b656e23313000000000000000000000000000000000000000006000830152602082019050919050565b600061405e600c83614be1565b91507f4845524f546f6b656e23313900000000000000000000000000000000000000006000830152602082019050919050565b600061409e600c83614be1565b91507f4845524f546f6b656e23323400000000000000000000000000000000000000006000830152602082019050919050565b60006140de600b83614be1565b91507f4845524f546f6b656e23390000000000000000000000000000000000000000006000830152602082019050919050565b600061411e600f83614be1565b91507f496e697469616c697a61626c65233200000000000000000000000000000000006000830152602082019050919050565b600061415e600c83614be1565b91507f4845524f546f6b656e23313700000000000000000000000000000000000000006000830152602082019050919050565b600061419e600f83614be1565b91507f496e697469616c697a61626c65233100000000000000000000000000000000006000830152602082019050919050565b60006141de600c83614be1565b91507f4845524f546f6b656e23313800000000000000000000000000000000000000006000830152602082019050919050565b600061421e600b83614be1565b91507f4845524f546f6b656e23330000000000000000000000000000000000000000006000830152602082019050919050565b600061425e600c83614be1565b91507f4845524f546f6b656e23313600000000000000000000000000000000000000006000830152602082019050919050565b600061429e600783614be1565b91507f4f776e65642333000000000000000000000000000000000000000000000000006000830152602082019050919050565b60006142de600b83614be1565b91507f4845524f546f6b656e23360000000000000000000000000000000000000000006000830152602082019050919050565b600061431e600b83614be1565b91507f4845524f546f6b656e23370000000000000000000000000000000000000000006000830152602082019050919050565b600061435e600783614be1565b91507f4f776e65642332000000000000000000000000000000000000000000000000006000830152602082019050919050565b600061439e600c83614be1565b91507f436f6e74726f6c6c6564233100000000000000000000000000000000000000006000830152602082019050919050565b60006143de600c83614be1565b91507f4845524f546f6b656e23313300000000000000000000000000000000000000006000830152602082019050919050565b600061441e600b83614be1565b91507f4845524f546f6b656e23310000000000000000000000000000000000000000006000830152602082019050919050565b600061445e600783614be1565b91507f4f776e65642331000000000000000000000000000000000000000000000000006000830152602082019050919050565b600061449e600c83614be1565b91507f4845524f546f6b656e23323000000000000000000000000000000000000000006000830152602082019050919050565b60006144de600d83614be1565b91507f536166654d6174684c69622333000000000000000000000000000000000000006000830152602082019050919050565b600061451e600c83614be1565b91507f4845524f546f6b656e23313400000000000000000000000000000000000000006000830152602082019050919050565b6040820160008201516145676000850182614580565b50602082015161457a6020850182614580565b50505050565b61458981614c42565b82525050565b61459881614c42565b82525050565b6145a781614c4c565b82525050565b60006020820190506145c26000830184613c6b565b92915050565b60006040820190506145dd6000830185613c6b565b6145ea6020830184613c6b565b9392505050565b60006020820190506146066000830184613c7a565b92915050565b60006040820190506146216000830185613c7a565b61462e6020830184613c7a565b9392505050565b600060208201905061464a6000830184613c89565b92915050565b6000602082019050818103600083015261466a8184613c98565b905092915050565b6000602082019050818103600083015261468b81613cd1565b9050919050565b600060208201905081810360008301526146ab81613d11565b9050919050565b600060208201905081810360008301526146cb81613d51565b9050919050565b600060208201905081810360008301526146eb81613d91565b9050919050565b6000602082019050818103600083015261470b81613dd1565b9050919050565b6000602082019050818103600083015261472b81613e11565b9050919050565b6000602082019050818103600083015261474b81613e51565b9050919050565b6000602082019050818103600083015261476b81613e91565b9050919050565b6000602082019050818103600083015261478b81613ed1565b9050919050565b600060208201905081810360008301526147ab81613f11565b9050919050565b600060208201905081810360008301526147cb81613f51565b9050919050565b600060208201905081810360008301526147eb81613f91565b9050919050565b6000602082019050818103600083015261480b81613fd1565b9050919050565b6000602082019050818103600083015261482b81614011565b9050919050565b6000602082019050818103600083015261484b81614051565b9050919050565b6000602082019050818103600083015261486b81614091565b9050919050565b6000602082019050818103600083015261488b816140d1565b9050919050565b600060208201905081810360008301526148ab81614111565b9050919050565b600060208201905081810360008301526148cb81614151565b9050919050565b600060208201905081810360008301526148eb81614191565b9050919050565b6000602082019050818103600083015261490b816141d1565b9050919050565b6000602082019050818103600083015261492b81614211565b9050919050565b6000602082019050818103600083015261494b81614251565b9050919050565b6000602082019050818103600083015261496b81614291565b9050919050565b6000602082019050818103600083015261498b816142d1565b9050919050565b600060208201905081810360008301526149ab81614311565b9050919050565b600060208201905081810360008301526149cb81614351565b9050919050565b600060208201905081810360008301526149eb81614391565b9050919050565b60006020820190508181036000830152614a0b816143d1565b9050919050565b60006020820190508181036000830152614a2b81614411565b9050919050565b60006020820190508181036000830152614a4b81614451565b9050919050565b60006020820190508181036000830152614a6b81614491565b9050919050565b60006020820190508181036000830152614a8b816144d1565b9050919050565b60006020820190508181036000830152614aab81614511565b9050919050565b600060e082019050614ac76000830187614551565b614ad46040830186614551565b614ae16080830185614551565b614aee60c083018461458f565b95945050505050565b6000602082019050614b0c600083018461458f565b92915050565b6000606082019050614b27600083018661458f565b614b34602083018561458f565b614b41604083018461458f565b949350505050565b6000608082019050614b5e600083018761458f565b614b6b602083018661458f565b614b78604083018561458f565b614b85606083018461458f565b95945050505050565b6000602082019050614ba3600083018461459e565b92915050565b6000604051905081810181811067ffffffffffffffff82111715614bcc57600080fd5b8060405250919050565b600081519050919050565b600082825260208201905092915050565b6000614bfd82614c22565b9050919050565b6000614c0f82614c22565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000614c6482614c6b565b9050919050565b6000614c7682614c22565b9050919050565b60005b83811015614c9b578082015181840152602081019050614c80565b83811115614caa576000848401525b50505050565b6000601f19601f8301169050919050565b614cca81614bf2565b8114614cd557600080fd5b50565b614ce181614c04565b8114614cec57600080fd5b50565b614cf881614c16565b8114614d0357600080fd5b50565b614d0f81614c42565b8114614d1a57600080fd5b5056fea164736f6c634300060c000a",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Stanisław Głogowski <stan@metahero.io>",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Public constructor"
      }
    },
    "title": "HERO token",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3395,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "controller",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3536,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3605,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 3608,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 3611,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "decimals",
        "offset": 0,
        "slot": "4",
        "type": "t_uint8"
      },
      {
        "astId": 3740,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "initializer",
        "offset": 1,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 1487,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "lpManager",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(HEROLPManager)118"
      },
      {
        "astId": 1489,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "settings",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(Settings)1460_storage"
      },
      {
        "astId": 1491,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "summary",
        "offset": 0,
        "slot": "13",
        "type": "t_struct(Summary)1469_storage"
      },
      {
        "astId": 1493,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "presaleFinished",
        "offset": 0,
        "slot": "17",
        "type": "t_bool"
      },
      {
        "astId": 1497,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "accountBalances",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1503,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "accountAllowances",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1507,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "excludedAccounts",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_struct(ExcludedAccount)1476_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(HEROLPManager)118": {
        "encoding": "inplace",
        "label": "contract HEROLPManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(ExcludedAccount)1476_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct HEROToken.ExcludedAccount)",
        "numberOfBytes": "32",
        "value": "t_struct(ExcludedAccount)1476_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ExcludedAccount)1476_storage": {
        "encoding": "inplace",
        "label": "struct HEROToken.ExcludedAccount",
        "members": [
          {
            "astId": 1471,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "exists",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1473,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "excludeSenderFromFee",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1475,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "excludeRecipientFromFee",
            "offset": 2,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Fees)1451_storage": {
        "encoding": "inplace",
        "label": "struct HEROToken.Fees",
        "members": [
          {
            "astId": 1448,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "sender",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1450,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "recipient",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Settings)1460_storage": {
        "encoding": "inplace",
        "label": "struct HEROToken.Settings",
        "members": [
          {
            "astId": 1453,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "burnFees",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Fees)1451_storage"
          },
          {
            "astId": 1455,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "lpFees",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(Fees)1451_storage"
          },
          {
            "astId": 1457,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "rewardsFees",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(Fees)1451_storage"
          },
          {
            "astId": 1459,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "minTotalSupply",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Summary)1469_storage": {
        "encoding": "inplace",
        "label": "struct HEROToken.Summary",
        "members": [
          {
            "astId": 1462,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "totalExcluded",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1464,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "totalHolding",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1466,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "totalRewards",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1468,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "totalSupply",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}