{
  "address": "0x9639C98B1F315C3bA5A6A8F6a36F95675342ed9d",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Excluded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sender",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "recipient",
              "type": "uint256"
            }
          ],
          "internalType": "struct HEROTokenEconomy.Fees",
          "name": "lpFees",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sender",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "recipient",
              "type": "uint256"
            }
          ],
          "internalType": "struct HEROTokenEconomy.Fees",
          "name": "rewardsFees",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "totalSupply_",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "excluded_",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "swapRouter_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "settings",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sender",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "recipient",
              "type": "uint256"
            }
          ],
          "internalType": "struct HEROTokenEconomy.Fees",
          "name": "lpFees",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sender",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "recipient",
              "type": "uint256"
            }
          ],
          "internalType": "struct HEROTokenEconomy.Fees",
          "name": "rewardsFees",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "summary",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalExcluded",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalHolding",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalLP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapRouter",
      "outputs": [
        {
          "internalType": "contract UniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x2d05aa418ee6a2121c3b01b0947857f5d3add17a943e2bc26b57826144bdbb4f",
  "receipt": {
    "to": null,
    "from": "0x2101F46D23b84eEa6a310B1dBa58f66DCE17A0Cf",
    "contractAddress": "0x9639C98B1F315C3bA5A6A8F6a36F95675342ed9d",
    "transactionIndex": 0,
    "gasUsed": "3638713",
    "logsBloom": "0x
    "blockHash": "0x6a6b51a5d76d3b46156a90bee74b6f628ea83697718f31cfceb0497aeef49b60",
    "transactionHash": "0x2d05aa418ee6a2121c3b01b0947857f5d3add17a943e2bc26b57826144bdbb4f",
    "logs": [],
    "blockNumber": 9709309,
    "cumulativeGasUsed": "3638713",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "27c2304287050a55ea092e37349ac198",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Excluded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sender\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recipient\",\"type\":\"uint256\"}],\"internalType\":\"struct HEROTokenEconomy.Fees\",\"name\":\"lpFees\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sender\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recipient\",\"type\":\"uint256\"}],\"internalType\":\"struct HEROTokenEconomy.Fees\",\"name\":\"rewardsFees\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"excluded_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"swapRouter_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settings\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sender\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recipient\",\"type\":\"uint256\"}],\"internalType\":\"struct HEROTokenEconomy.Fees\",\"name\":\"lpFees\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sender\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recipient\",\"type\":\"uint256\"}],\"internalType\":\"struct HEROTokenEconomy.Fees\",\"name\":\"rewardsFees\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"summary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalExcluded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalHolding\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract UniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Public constructor\"}},\"title\":\"HERO token\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/HEROToken.sol\":\"HEROToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/HEROToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./components/erc20/ERC20Metadata.sol\\\";\\nimport \\\"./components/Initializable.sol\\\";\\nimport \\\"./HEROTokenLP.sol\\\";\\n\\n\\n/**\\n * @title HERO token\\n */\\ncontract HEROToken is ERC20Metadata, Initializable, HEROTokenLP {\\n  // metadata\\n  string private constant TOKEN_NAME = \\\"METAHERO\\\";\\n  string private constant TOKEN_SYMBOL = \\\"HERO\\\";\\n  uint8 private constant TOKEN_DECIMALS = 9; // 0.000000000\\n\\n  /**\\n   * @dev Public constructor\\n   */\\n  constructor ()\\n    public\\n    Initializable()\\n    ERC20Metadata(\\n      Metadata(TOKEN_NAME, TOKEN_SYMBOL, TOKEN_DECIMALS)\\n    )\\n  {\\n    //\\n  }\\n\\n  // external functions\\n\\n  function initialize(\\n    Fees calldata lpFees,\\n    Fees calldata rewardsFees,\\n    uint256 totalSupply_,\\n    address[] calldata excluded_,\\n    address swapRouter_\\n  )\\n    external\\n    onlyInitializer\\n  {\\n    _initializeEconomy(\\n      lpFees,\\n      rewardsFees,\\n      totalSupply_,\\n      excluded_\\n    );\\n\\n    _initializeLP(\\n      swapRouter_\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x444eb6bb1df98da054bccdbd461b3f9804ce0dbcce8f0e141a4ca1418265fd4e\",\"license\":\"MIT\"},\"src/HEROTokenEconomy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./components/erc20/ERC20.sol\\\";\\nimport \\\"./components/Lockable.sol\\\";\\nimport \\\"./components/Lockable.sol\\\";\\nimport \\\"./libs/MathLib.sol\\\";\\n\\n\\n/**\\n * @title HERO token economy module\\n */\\ncontract HEROTokenEconomy is ERC20, Lockable {\\n  using MathLib for uint256;\\n\\n  struct Fees {\\n    uint256 sender; // percent\\n    uint256 recipient; // percent\\n  }\\n\\n  struct Settings {\\n    Fees lpFees;\\n    Fees rewardsFees;\\n  }\\n\\n  struct Summary {\\n    uint256 totalExcluded;\\n    uint256 totalHolding;\\n    uint256 totalLP;\\n    uint256 totalRewards;\\n    uint256 totalSupply;\\n  }\\n\\n  // defaults\\n  uint256 private constant DEFAULT_TOTAL_SUPPLY = 10000000000 * 10 ** 9; // 10,000,000,000.000000000\\n\\n  Settings public settings;\\n  Summary public summary;\\n\\n  mapping (address => uint256) internal balances;\\n  mapping (address => mapping (address => uint256)) private allowances;\\n  mapping (address => bool) private excluded;\\n\\n  // events\\n\\n  event Excluded(\\n    address indexed account\\n  );\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor ()\\n    internal\\n  {\\n    //\\n  }\\n\\n  // external functions\\n\\n  function transfer(\\n    address recipient,\\n    uint256 amount\\n  )\\n    external\\n    override\\n    returns (bool)\\n  {\\n    _transfer(\\n      msg.sender,\\n      recipient,\\n      amount\\n    );\\n\\n    return true;\\n  }\\n\\n  function burn(\\n    uint256 amount\\n  )\\n    external\\n    returns (bool)\\n  {\\n    _burn(\\n      msg.sender,\\n      amount\\n    );\\n\\n    return true;\\n  }\\n\\n  function approve(\\n    address spender,\\n    uint256 amount\\n  )\\n    external\\n    override\\n    returns (bool)\\n  {\\n    _approve(\\n      msg.sender,\\n      spender,\\n      amount\\n    );\\n\\n    return true;\\n  }\\n\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    external\\n    override\\n    returns (bool)\\n  {\\n    _transfer(\\n      sender,\\n      recipient,\\n      amount\\n    );\\n\\n    uint256 currentAllowance = allowances[sender][msg.sender];\\n\\n    require(\\n      currentAllowance >= amount,\\n      \\\"HEROTokenEconomy: amount exceeds allowance\\\"\\n    );\\n\\n    _approve(\\n      sender,\\n      msg.sender,\\n      currentAllowance.sub(amount)\\n    );\\n\\n    return true;\\n  }\\n\\n  // external functions (views)\\n\\n  function totalSupply()\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return summary.totalSupply;\\n  }\\n\\n  function allowance(\\n    address owner,\\n    address spender\\n  )\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return allowances[owner][spender];\\n  }\\n\\n  function balanceOf(\\n    address account\\n  )\\n    external\\n    view\\n    override\\n    returns (uint256 result)\\n  {\\n    result = balances[account];\\n\\n    if (\\n      !excluded[account] &&\\n      summary.totalRewards != 0\\n    ) {\\n      result = result.add(\\n        summary.totalRewards\\n        .mul(result)\\n        .div(summary.totalHolding)\\n      );\\n    }\\n\\n\\n    return result;\\n  }\\n\\n  // internal functions\\n\\n  function _initializeEconomy(\\n    Fees memory lpFees,\\n    Fees memory rewardsFees,\\n    uint256 totalSupply_,\\n    address[] calldata excluded_\\n  )\\n    internal\\n  {\\n    settings = Settings(\\n      lpFees,\\n      rewardsFees\\n    );\\n\\n    _mint(\\n      msg.sender,\\n      totalSupply_ == 0\\n      ? DEFAULT_TOTAL_SUPPLY\\n      : totalSupply_\\n    );\\n\\n    {\\n      uint256 excludedLen = excluded_.length;\\n\\n      for (uint256 index = 0; index < excludedLen; index += 1) {\\n        _exclude(excluded_[index]);\\n      }\\n    }\\n  }\\n\\n  function _exclude(\\n    address account\\n  )\\n    internal\\n  {\\n    require(\\n      account != address(0),\\n      \\\"HEROTokenEconomy: account is the zero address\\\"\\n    );\\n\\n    require(\\n      !excluded[account],\\n      \\\"HEROTokenEconomy: account already excluded\\\"\\n    );\\n\\n    require(\\n      balances[account] == 0,\\n      \\\"HEROTokenEconomy: can not exclude holder account\\\"\\n    );\\n\\n    excluded[account] = true;\\n\\n    emit Excluded(\\n      account\\n    );\\n  }\\n\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  )\\n    internal\\n  {\\n    require(\\n      owner != address(0),\\n      \\\"HEROTokenEconomy: owner is the zero address\\\"\\n    );\\n\\n    require(\\n      spender != address(0),\\n      \\\"HEROTokenEconomy: spender is the zero address\\\"\\n    );\\n\\n    allowances[owner][spender] = amount;\\n\\n    emit Approval(\\n      owner,\\n      spender,\\n      amount\\n    );\\n  }\\n\\n  function _mint(\\n    address account,\\n    uint256 amount\\n  )\\n    internal\\n    lock\\n  {\\n    require(\\n      account != address(0),\\n      \\\"HEROTokenEconomy: account is the zero address\\\"\\n    );\\n\\n    require(\\n      amount != 0,\\n      \\\"HEROTokenEconomy: invalid amount\\\"\\n    );\\n\\n    summary.totalSupply = summary.totalSupply.add(amount);\\n    summary.totalExcluded = summary.totalExcluded.add(amount);\\n\\n    _exclude(account);\\n\\n    balances[account] = balances[account].add(amount);\\n\\n    emit Transfer(\\n      address(0),\\n      account,\\n      amount\\n    );\\n  }\\n\\n  function _burn(\\n    address account,\\n    uint256 amount\\n  )\\n    internal\\n    lock\\n  {\\n    require(\\n      account != address(0),\\n      \\\"HEROTokenEconomy: account is the zero address\\\"\\n    );\\n\\n    require(\\n      amount != 0,\\n      \\\"HEROTokenEconomy: invalid amount\\\"\\n    );\\n\\n    require(\\n      balances[account] >= amount,\\n      \\\"HEROTokenEconomy: amount exceeds balance\\\"\\n    );\\n\\n    require(\\n      excluded[account],\\n      \\\"HEROTokenEconomy: can not burn from holder account\\\"\\n    );\\n\\n    summary.totalSupply = summary.totalSupply.sub(amount);\\n    summary.totalExcluded = summary.totalExcluded.sub(amount);\\n\\n    balances[account] = balances[account].sub(amount);\\n\\n    emit Transfer(\\n      account,\\n      address(0),\\n      amount\\n    );\\n  }\\n\\n  function _transfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    internal\\n    lock\\n  {\\n    require(\\n      sender != address(0),\\n      \\\"HEROTokenEconomy: sender is the zero address\\\"\\n    );\\n\\n    require(\\n      recipient != address(0),\\n      \\\"HEROTokenEconomy: recipient is the zero address\\\"\\n    );\\n\\n    require(\\n      sender != recipient,\\n      \\\"HEROTokenEconomy: invalid recipient\\\"\\n    );\\n\\n    require(\\n      amount != 0,\\n      \\\"HEROTokenEconomy: invalid amount\\\"\\n    );\\n\\n    if (\\n      !excluded[sender] && !excluded[recipient]\\n    ) {\\n      _transferBetweenHolders(\\n        sender,\\n        recipient,\\n        amount\\n      );\\n    } else if (\\n      excluded[sender] && !excluded[recipient]\\n    ) {\\n      _transferFromExcluded(\\n        sender,\\n        recipient,\\n        amount\\n      );\\n    } else if (\\n      !excluded[sender] && excluded[recipient]\\n    ) {\\n      _transferToExcluded(\\n        sender,\\n        recipient,\\n        amount\\n      );\\n    } else {\\n      _transferBetweenExcluded(\\n        sender,\\n        recipient,\\n        amount\\n      );\\n    }\\n\\n    emit Transfer(\\n      sender,\\n      recipient,\\n      amount\\n    );\\n  }\\n\\n  function _transferBetweenHolders(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    internal\\n  {\\n    (\\n      uint256 senderFee,\\n      uint256 lpFee\\n    ) = _calcTransferSenderFees(amount);\\n\\n    uint256 recipientFee;\\n    uint256 totalFee = senderFee;\\n\\n    {\\n      uint256 recipientLPFee;\\n\\n      (\\n        recipientFee,\\n        recipientLPFee\\n      ) = _calcTransferRecipientFees(amount);\\n\\n      lpFee = lpFee.add(recipientLPFee);\\n      totalFee = totalFee.add(recipientFee);\\n    }\\n\\n    uint256 senderAmount = amount.add(senderFee);\\n    uint256 recipientAmount = amount.sub(recipientFee);\\n\\n    if (summary.totalRewards != 0) {\\n      uint256 totalHoldingWithRewards = summary.totalHolding.add(\\n        summary.totalRewards\\n      );\\n\\n      senderAmount = senderAmount.mul(summary.totalHolding).div(\\n        totalHoldingWithRewards\\n      );\\n      recipientAmount = recipientAmount.mul(summary.totalHolding).div(\\n        totalHoldingWithRewards\\n      );\\n      totalFee = totalFee.mul(summary.totalHolding).div(\\n        totalHoldingWithRewards\\n      );\\n    }\\n\\n    require(\\n      balances[sender] >= senderAmount,\\n      \\\"HEROTokenEconomy: amount exceeds balance\\\"\\n    );\\n\\n    balances[sender] = balances[sender].sub(senderAmount);\\n    balances[recipient] = balances[recipient].add(recipientAmount);\\n\\n    summary.totalHolding = summary.totalHolding.sub(totalFee);\\n\\n    _increaseTotalLP(lpFee);\\n    _updateTotalRewards();\\n  }\\n\\n  function _transferFromExcluded(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    internal\\n  {\\n    require(\\n      balances[sender] >= amount,\\n      \\\"HEROTokenEconomy: amount exceeds balance\\\"\\n    );\\n\\n    (\\n      uint256 recipientFee,\\n      uint256 lpFee\\n    ) = _calcTransferSenderFees(amount);\\n\\n    uint256 recipientAmount = amount.sub(recipientFee);\\n\\n    balances[sender] = balances[sender].sub(amount);\\n    balances[recipient] = balances[recipient].add(recipientAmount);\\n\\n    summary.totalExcluded = summary.totalExcluded.sub(amount);\\n    summary.totalHolding = summary.totalHolding.add(recipientAmount);\\n\\n    _increaseTotalLP(lpFee);\\n    _updateTotalRewards();\\n  }\\n\\n  function _transferToExcluded(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    internal\\n  {\\n    (\\n      uint256 senderFee,\\n      uint256 lpFee\\n    ) = _calcTransferSenderFees(amount);\\n\\n    uint256 senderAmount = amount.add(senderFee);\\n\\n    if (summary.totalRewards != 0) {\\n      uint256 totalHoldingWithRewards = summary.totalHolding.add(\\n        summary.totalRewards\\n      );\\n\\n      senderAmount = senderAmount.mul(summary.totalHolding).div(\\n        totalHoldingWithRewards\\n      );\\n    }\\n\\n    require(\\n      balances[sender] >= senderAmount,\\n      \\\"HEROTokenEconomy: amount exceeds balance\\\"\\n    );\\n\\n    balances[sender] = balances[sender].sub(senderAmount);\\n    balances[recipient] = balances[recipient].add(amount);\\n\\n    summary.totalExcluded = summary.totalExcluded.add(amount);\\n    summary.totalHolding = summary.totalHolding.sub(senderAmount);\\n\\n    _increaseTotalLP(lpFee);\\n    _updateTotalRewards();\\n  }\\n\\n  function _transferBetweenExcluded(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    internal\\n  {\\n    require(\\n      balances[sender] >= amount,\\n      \\\"HEROTokenEconomy: amount exceeds balance\\\"\\n    );\\n\\n    balances[sender] = balances[sender].sub(amount);\\n    balances[recipient] = balances[recipient].add(amount);\\n  }\\n\\n  function _increaseTotalLP(\\n    uint256 amount\\n  )\\n    internal\\n    virtual\\n  {\\n    summary.totalLP = summary.totalLP.add(amount);\\n  }\\n\\n  // private functions\\n\\n  function _updateTotalRewards()\\n    private\\n  {\\n    summary.totalRewards = summary.totalSupply\\n    .sub(summary.totalExcluded)\\n    .sub(summary.totalHolding)\\n    .sub(summary.totalLP);\\n  }\\n\\n  // private functions (views)\\n\\n  function _calcTransferSenderFees(\\n    uint256 amount\\n  )\\n    private\\n    view\\n    returns (\\n      uint256 totalFee,\\n      uint256 lpFee\\n    )\\n  {\\n    uint256 rewardsFee = amount.percent(settings.rewardsFees.sender);\\n\\n    lpFee = amount.percent(settings.lpFees.sender);\\n    totalFee = lpFee.add(rewardsFee);\\n\\n    return (totalFee, lpFee);\\n  }\\n\\n  function _calcTransferRecipientFees(\\n    uint256 amount\\n  )\\n    private\\n    view\\n    returns (\\n      uint256 totalFee,\\n      uint256 lpFee\\n    )\\n  {\\n    uint256 rewardsFee = amount.percent(settings.rewardsFees.recipient);\\n\\n    lpFee = amount.percent(settings.lpFees.recipient);\\n    totalFee = lpFee.add(rewardsFee);\\n\\n    return (totalFee, lpFee);\\n  }\\n}\\n\",\"keccak256\":\"0xa8e2412d842375419d7df00e3a18d03844de56a4f789383ecce801d4c542a6de\",\"license\":\"MIT\"},\"src/HEROTokenLP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"./external/UniswapV2Factory.sol\\\";\\nimport \\\"./external/UniswapV2Router02.sol\\\";\\nimport \\\"./HEROTokenEconomy.sol\\\";\\n\\n\\n/**\\n * @title HERO token liquidity pool module\\n */\\ncontract HEROTokenLP is HEROTokenEconomy {\\n  UniswapV2Router02 public swapRouter;\\n  address public swapPair;\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor ()\\n    internal\\n  {\\n    //\\n  }\\n\\n  // external functions\\n\\n  receive()\\n    external\\n    payable\\n  {\\n    //\\n  }\\n\\n  // internal functions\\n\\n  function _initializeLP(\\n    address swapRouter_\\n  )\\n    internal\\n  {\\n    swapRouter = UniswapV2Router02(swapRouter_);\\n\\n    swapPair = UniswapV2Factory(swapRouter.factory())\\n    .createPair(\\n      address(this),\\n        swapRouter.WETH()\\n    );\\n\\n    _exclude(address(this));\\n    _exclude(address(swapRouter));\\n    _exclude(swapPair);\\n  }\\n\\n  function _increaseTotalLP(\\n    uint256 amount\\n  )\\n    internal\\n    override\\n  {\\n    balances[address(this)] = balances[address(this)].add(amount);\\n    summary.totalLP = summary.totalLP.add(amount);\\n\\n    swapAndLiquify(amount);\\n  }\\n\\n  // private functions\\n\\n  function swapAndLiquify(\\n    uint256 amount\\n  )\\n    private\\n  {\\n    uint256 half = amount.div(2);\\n    uint256 otherHalf = amount.sub(half);\\n\\n    uint256 initialBalance = address(this).balance;\\n\\n    swapTokensForEth(half);\\n\\n    uint256 newBalance = address(this).balance.sub(initialBalance);\\n\\n    addLiquidity(otherHalf, newBalance);\\n  }\\n\\n  function swapTokensForEth(\\n    uint256 tokenAmount\\n  )\\n    private\\n  {\\n    address[] memory path = new address[](2);\\n\\n    path[0] = address(this);\\n    path[1] = swapRouter.WETH();\\n\\n    _approve(\\n      address(this),\\n      address(swapRouter),\\n      tokenAmount\\n    );\\n\\n    swapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n      tokenAmount,\\n      0,\\n      path,\\n      address(this),\\n      block.timestamp // solhint-disable-line not-rely-on-time\\n    );\\n  }\\n\\n  function addLiquidity(\\n    uint256 tokenAmount,\\n    uint256 ethAmount\\n  )\\n    private\\n  {\\n    _approve(\\n      address(this),\\n      address(swapRouter),\\n      tokenAmount\\n    );\\n\\n    swapRouter.addLiquidityETH{value : ethAmount}(\\n      address(this),\\n      tokenAmount,\\n      0, // slippage is unavoidable\\n      0, // slippage is unavoidable\\n      address(this),\\n      block.timestamp // solhint-disable-line not-rely-on-time\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0xbd3b85fb10cd3b23c93d0f22c4f7e10f1f1efee0e898ab5ce7bc8325f1500f01\",\"license\":\"MIT\"},\"src/components/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Initializable\\n */\\ncontract Initializable {\\n  address private initializer;\\n\\n  // events\\n\\n  event Initialized();\\n\\n  // modifiers\\n\\n  modifier onlyInitializer() {\\n    require(\\n      initializer != address(0),\\n      \\\"Initializable: already initialized\\\"\\n    );\\n\\n    require(\\n      msg.sender == initializer,\\n      \\\"Initializable: msg.sender is not the initializer\\\"\\n    );\\n\\n    initializer = address(0);\\n\\n    _;\\n\\n    emit Initialized();\\n  }\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor()\\n    internal\\n  {\\n    initializer = msg.sender;\\n  }\\n\\n  // external functions (views)\\n\\n  function initialized()\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return initializer == address(0);\\n  }\\n}\\n\",\"keccak256\":\"0xa468170351bac18be81cbd4871f1aa46b16b48f8832d12ee97e36ba0bc7a07a2\",\"license\":\"MIT\"},\"src/components/Lockable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Lockable\\n */\\ncontract Lockable {\\n  bool private locked;\\n\\n  // modifiers\\n\\n  modifier lock() {\\n    require(\\n      !locked,\\n      \\\"Lockable: locked\\\"\\n    );\\n\\n    locked = true;\\n\\n    _;\\n\\n    locked = false;\\n  }\\n}\\n\",\"keccak256\":\"0x9de56095556f83f35d828ca9f057460496de83ae98697ec6fe8ed31d2872ad19\",\"license\":\"MIT\"},\"src/components/erc20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nabstract contract ERC20 {\\n  // events\\n\\n  event Approval(\\n    address indexed owner,\\n    address indexed spender,\\n    uint256 value\\n  );\\n\\n  event Transfer(\\n    address indexed from,\\n    address indexed to,\\n    uint256 value\\n  );\\n\\n  // external functions\\n\\n  function approve(\\n    address spender,\\n    uint256 value\\n  )\\n    external\\n    virtual\\n    returns (bool);\\n\\n  function transfer(\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    virtual\\n    returns (bool);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    virtual\\n    returns (bool);\\n\\n  // external functions (views)\\n\\n  function totalSupply()\\n    external\\n    view\\n    virtual\\n    returns (uint256);\\n\\n  function balanceOf(\\n    address owner\\n  )\\n    external\\n    view\\n    virtual\\n    returns (uint256);\\n\\n  function allowance(\\n    address owner,\\n    address spender\\n  )\\n    external\\n    view\\n    virtual\\n    returns (uint256);\\n}\\n\",\"keccak256\":\"0xb1e86d26abd67b1299f800f22f520ebce49e7b0f9112cd94312fdabbfce1b82b\",\"license\":\"MIT\"},\"src/components/erc20/ERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\ncontract ERC20Metadata {\\n  struct Metadata {\\n    string name;\\n    string symbol;\\n    uint8 decimals;\\n  }\\n\\n  Metadata private metadata;\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor (\\n    Metadata memory metadata_\\n  )\\n    internal\\n  {\\n    metadata = metadata_;\\n  }\\n\\n  // external functions (views)\\n\\n  function name()\\n    external\\n    view\\n    virtual\\n    returns (string memory)\\n  {\\n    return metadata.name;\\n  }\\n\\n  function symbol()\\n    external\\n    view\\n    virtual\\n    returns (string memory)\\n  {\\n    return metadata.symbol;\\n  }\\n\\n  function decimals()\\n    external\\n    view\\n    virtual\\n    returns (uint8)\\n  {\\n    return metadata.decimals;\\n  }\\n}\\n\",\"keccak256\":\"0x838409846512446e0bdd4a6e49167895280ea0a63645318e0811cae8947cede9\",\"license\":\"MIT\"},\"src/external/UniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\ninterface UniswapV2Factory {\\n  // events\\n\\n  event PairCreated(\\n    address indexed token0,\\n    address indexed token1,\\n    address pair,\\n    uint256\\n  );\\n\\n  // external functions\\n\\n  function createPair(\\n    address tokenA,\\n    address tokenB\\n  )\\n    external\\n    returns (address);\\n\\n  function setFeeTo(\\n    address\\n  )\\n    external;\\n\\n  function setFeeToSetter(\\n    address\\n  )\\n    external;\\n\\n  // external functions (views)\\n\\n  function feeTo()\\n    external\\n    view\\n    returns (address);\\n\\n  function feeToSetter()\\n    external\\n    view\\n    returns (address);\\n\\n  function getPair(\\n    address tokenA,\\n    address tokenB\\n  )\\n    external\\n    view\\n    returns (address);\\n\\n  function allPairs(\\n    uint256\\n  )\\n    external\\n    view\\n    returns (address);\\n\\n  function allPairsLength()\\n    external\\n    view\\n    returns (uint256);\\n}\\n\\n\",\"keccak256\":\"0x11c1c1d08fe44e59afcb84d55cbe36594091a8997c14a5c27a32d72708614f7f\",\"license\":\"MIT\"},\"src/external/UniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable func-name-mixedcase */\\npragma solidity ^0.6.12;\\n\\ninterface UniswapV2Router01 {\\n  // external functions (payable)\\n\\n  function addLiquidityETH(\\n    address token,\\n    uint amountTokenDesired,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    payable\\n    returns (uint, uint, uint);\\n\\n  function swapExactETHForTokens(\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    payable\\n    returns (uint[] memory);\\n\\n  // external functions\\n\\n  function addLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint amountADesired,\\n    uint amountBDesired,\\n    uint amountAMin,\\n    uint amountBMin,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    returns (uint, uint, uint);\\n\\n  function removeLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint liquidity,\\n    uint amountAMin,\\n    uint amountBMin,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    returns (uint, uint);\\n\\n  function removeLiquidityETH(\\n    address token,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    returns (uint, uint);\\n\\n  function removeLiquidityWithPermit(\\n    address tokenA,\\n    address tokenB,\\n    uint liquidity,\\n    uint amountAMin,\\n    uint amountBMin,\\n    address to,\\n    uint deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  )\\n    external\\n    returns (uint, uint);\\n\\n  function removeLiquidityETHWithPermit(\\n    address token,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  )\\n    external\\n    returns (uint, uint);\\n\\n  function swapExactTokensForTokens(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    returns (uint[] memory);\\n\\n  function swapTokensForExactTokens(\\n    uint amountOut,\\n    uint amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    returns (uint[] memory);\\n\\n  function swapTokensForExactETH(\\n    uint amountOut,\\n    uint amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    returns (uint[] memory);\\n\\n  function swapExactTokensForETH(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    returns (uint[] memory);\\n\\n  function swapETHForExactTokens(\\n    uint amountOut,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    payable\\n    returns (uint[] memory);\\n\\n  // external functions (views)\\n\\n  function getAmountsOut(\\n    uint amountIn,\\n    address[] calldata path\\n  )\\n    external\\n    view\\n    returns (uint[] memory);\\n\\n  function getAmountsIn(\\n    uint amountOut,\\n    address[] calldata path\\n  )\\n    external\\n    view\\n    returns (uint[] memory);\\n\\n  // external functions (pure)\\n\\n  function quote(\\n    uint amountA,\\n    uint reserveA,\\n    uint reserveB\\n  )\\n    external\\n    pure\\n    returns (uint);\\n\\n  function getAmountOut(\\n    uint amountIn,\\n    uint reserveIn,\\n    uint reserveOut\\n  )\\n    external\\n    pure\\n    returns (uint);\\n\\n  function getAmountIn(\\n    uint amountOut,\\n    uint reserveIn,\\n    uint reserveOut\\n  )\\n    external\\n    pure\\n    returns (uint);\\n\\n  function factory()\\n    external\\n    pure\\n    returns (address);\\n\\n  function WETH()\\n    external\\n    pure\\n    returns (address);\\n}\\n\",\"keccak256\":\"0x827cd49c4f131ebcb5081aa0daca47cfcfadd24d9a8359cfc79103782b53d9b7\",\"license\":\"MIT\"},\"src/external/UniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"./UniswapV2Router01.sol\\\";\\n\\n\\ninterface UniswapV2Router02 is UniswapV2Router01 {\\n  // external functions (payable)\\n\\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    payable;\\n\\n  // external functions\\n\\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\\n    address token,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    returns (uint);\\n\\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n    address token,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  )\\n    external\\n    returns (uint);\\n\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  )\\n    external;\\n\\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  )\\n    external;\\n}\\n\",\"keccak256\":\"0xd01e20c440b0763163e211898a2881a45b3dca347fc76f8137767fef4bbd8a0b\",\"license\":\"MIT\"},\"src/libs/MathLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Math library\\n */\\nlibrary MathLib {\\n  function add(\\n    uint256 a,\\n    uint256 b\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    uint256 c = a + b;\\n\\n    require(c >= a, \\\"MathLib: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  function sub(\\n    uint256 a,\\n    uint256 b\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    require(b <= a, \\\"MathLib: subtraction overflow\\\");\\n\\n    return a - b;\\n  }\\n\\n  function mul(\\n    uint256 a,\\n    uint256 b\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n\\n    require(c / a == b, \\\"MathLib: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  function div(\\n    uint256 a,\\n    uint256 b\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    require(b != 0, \\\"MathLib: division by zero\\\");\\n\\n    return a / b;\\n  }\\n\\n  function percent(\\n    uint256 a,\\n    uint256 p\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    uint256 result;\\n\\n    if (a != 0 && p != 0) {\\n      result = div(mul(a, p), 100);\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x9c6aa4510ae1773258be1a36de4428fefd5555d797f0f907f4160dd8ec853377\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405180606001604052806040518060400160405280600881526020017f4d4554414845524f00000000000000000000000000000000000000000000000081525081526020016040518060400160405280600481526020017f4845524f000000000000000000000000000000000000000000000000000000008152508152602001600960ff1681525080600080820151816000019080519060200190620000bb92919062000147565b506020820151816001019080519060200190620000da92919062000147565b5060408201518160020160006101000a81548160ff021916908360ff1602179055509050505033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620001ed565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200018a57805160ff1916838001178555620001bb565b82800160010185558215620001bb579182015b82811115620001ba5782518255916020019190600101906200019d565b5b509050620001ca9190620001ce565b5090565b5b80821115620001e9576000816000905550600101620001cf565b5090565b613f7a80620001fd6000396000f3fe6080604052600436106100f75760003560e01c806370a082311161008a578063c31c9c0711610059578063c31c9c0714610365578063dd62ed3e14610390578063dfe78231146103cd578063e06174e4146103f6576100fe565b806370a082311461029157806395d89b41146102ce578063a9059cbb146102f9578063b16a867c14610336576100fe565b806323b872dd116100c657806323b872dd146101c157806326991cc8146101fe578063313ce5671461022957806342966c6814610254576100fe565b806306fdde0314610103578063095ea7b31461012e578063158ef93e1461016b57806318160ddd14610196576100fe565b366100fe57005b600080fd5b34801561010f57600080fd5b50610118610422565b6040516101259190613a2a565b60405180910390f35b34801561013a57600080fd5b5061015560048036038101906101509190612fcd565b6104c6565b60405161016291906139f4565b60405180910390f35b34801561017757600080fd5b506101806104dd565b60405161018d91906139f4565b60405180910390f35b3480156101a257600080fd5b506101ab610535565b6040516101b89190613cd5565b60405180910390f35b3480156101cd57600080fd5b506101e860048036038101906101e39190612f7e565b610542565b6040516101f591906139f4565b60405180910390f35b34801561020a57600080fd5b5061021361063c565b604051610220919061394f565b60405180910390f35b34801561023557600080fd5b5061023e610662565b60405161024b9190613d9d565b60405180910390f35b34801561026057600080fd5b5061027b600480360381019061027691906130c4565b61067b565b60405161028891906139f4565b60405180910390f35b34801561029d57600080fd5b506102b860048036038101906102b39190612ef0565b610690565b6040516102c59190613cd5565b60405180910390f35b3480156102da57600080fd5b506102e3610782565b6040516102f09190613a2a565b60405180910390f35b34801561030557600080fd5b50610320600480360381019061031b9190612fcd565b610827565b60405161032d91906139f4565b60405180910390f35b34801561034257600080fd5b5061034b61083e565b60405161035c959493929190613d4a565b60405180910390f35b34801561037157600080fd5b5061037a610862565b6040516103879190613a0f565b60405180910390f35b34801561039c57600080fd5b506103b760048036038101906103b29190612f42565b610888565b6040516103c49190613cd5565b60405180910390f35b3480156103d957600080fd5b506103f460048036038101906103ef9190613009565b61090f565b005b34801561040257600080fd5b5061040b610add565b604051610419929190613cac565b60405180910390f35b6060600080018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104bc5780601f10610491576101008083540402835291602001916104bc565b820191906000526020600020905b81548152906001019060200180831161049f57829003601f168201915b5050505050905090565b60006104d3338484610b2b565b6001905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905090565b6000600860040154905090565b600061054f848484610cf6565b6000600e60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610613576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90613c8c565b60405180910390fd5b610630853361062b86856111b090919063ffffffff16565b610b2b565b60019150509392505050565b601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060020160009054906101000a900460ff16905090565b60006106873383611200565b60019050919050565b6000600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161580156107345750600060086003015414155b1561077d5761077a61076b60086001015461075d8460086003015461158990919063ffffffff16565b61160490919063ffffffff16565b8261165b90919063ffffffff16565b90505b919050565b606060006001018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561081d5780601f106107f25761010080835404028352916020019161081d565b820191906000526020600020905b81548152906001019060200180831161080057829003601f168201915b5050505050905090565b6000610834338484610cf6565b6001905092915050565b60088060000154908060010154908060020154908060030154908060040154905085565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156109a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099890613b8c565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2890613bac565b60405180910390fd5b6000600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610aa086803603810190610a87919061309b565b86803603810190610a98919061309b565b8686866116b0565b610aa981611779565b7f5daa87a0e9463431830481fd4b6e3403442dfb9a12b9c07597e9f61d50b633c860405160405180910390a1505050505050565b60048060000160405180604001604052908160008201548152602001600182015481525050908060020160405180604001604052908160008201548152602001600182015481525050905082565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610b9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9290613bec565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610c0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0290613a8c565b60405180910390fd5b80600e60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610ce99190613cd5565b60405180910390a3505050565b600360149054906101000a900460ff1615610d46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3d90613c2c565b60405180910390fd5b6001600360146101000a81548160ff021916908315150217905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610dd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc890613acc565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610e41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3890613c6c565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610eb0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea790613b6c565b60405180910390fd5b6000811415610ef4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eeb90613c4c565b60405180910390fd5b600f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16158015610f985750600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b15610fad57610fa8838383611a27565b61112b565b600f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1680156110505750600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b1561106557611060838383611d46565b61112a565b600f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161580156111085750600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b1561111d57611118838383611f74565b611129565b6111288383836121fe565b5b5b5b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516111889190613cd5565b60405180910390a36000600360146101000a81548160ff021916908315150217905550505050565b6000828211156111f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ec90613aac565b60405180910390fd5b818303905092915050565b600360149054906101000a900460ff1615611250576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124790613c2c565b60405180910390fd5b6001600360146101000a81548160ff021916908315150217905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156112db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112d290613c0c565b60405180910390fd5b600081141561131f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161131690613c4c565b60405180910390fd5b80600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156113a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139890613b2c565b60405180910390fd5b600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661142d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142490613bcc565b60405180910390fd5b611445816008600401546111b090919063ffffffff16565b600860040181905550611466816008600001546111b090919063ffffffff16565b6008600001819055506114c181600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111b090919063ffffffff16565b600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516115629190613cd5565b60405180910390a36000600360146101000a81548160ff0219169083151502179055505050565b6000808314806115995750600082145b156115a757600090506115fe565b60008284029050828482816115b857fe5b04146115f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f090613a4c565b60405180910390fd5b809150505b92915050565b600080821415611649576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161164090613b0c565b60405180910390fd5b81838161165257fe5b04905092915050565b6000808284019050838110156116a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161169d90613a6c565b60405180910390fd5b8091505092915050565b60405180604001604052808681526020018581525060046000820151816000016000820151816000015560208201518160010155505060208201518160020160008201518160000155602082015181600101555050905050611729336000851461171a5784611724565b678ac7230489e800005b6123af565b600082829050905060005b818110156117705761176584848381811061174b57fe5b90506020020160208101906117609190612ef0565b612633565b600181019050611734565b50505050505050565b80601060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561182257600080fd5b505afa158015611836573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185a9190612f19565b73ffffffffffffffffffffffffffffffffffffffff1663c9c6539630601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b1580156118de57600080fd5b505afa1580156118f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119169190612f19565b6040518363ffffffff1660e01b815260040161193392919061396a565b602060405180830381600087803b15801561194d57600080fd5b505af1158015611961573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119859190612f19565b601160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506119ce30612633565b6119f9601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612633565b611a24601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612633565b50565b600080611a3383612850565b915091506000808390506000611a48866128aa565b8092508194505050611a63818561165b90919063ffffffff16565b9350611a78838361165b90919063ffffffff16565b9150506000611a90858761165b90919063ffffffff16565b90506000611aa784886111b090919063ffffffff16565b9050600060086003015414611b5d576000611ad560086003015460086001015461165b90919063ffffffff16565b9050611b0181611af36008600101548661158990919063ffffffff16565b61160490919063ffffffff16565b9250611b2d81611b1f6008600101548561158990919063ffffffff16565b61160490919063ffffffff16565b9150611b5981611b4b6008600101548761158990919063ffffffff16565b61160490919063ffffffff16565b9350505b81600d60008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611bdf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bd690613b2c565b60405180910390fd5b611c3182600d60008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111b090919063ffffffff16565b600d60008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611cc681600d60008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461165b90919063ffffffff16565b600d60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611d21836008600101546111b090919063ffffffff16565b600860010181905550611d3385612904565b611d3b6129c6565b505050505050505050565b80600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611dc8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dbf90613b2c565b60405180910390fd5b600080611dd483612850565b915091506000611ded83856111b090919063ffffffff16565b9050611e4184600d60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111b090919063ffffffff16565b600d60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611ed681600d60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461165b90919063ffffffff16565b600d60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611f31846008600001546111b090919063ffffffff16565b600860000181905550611f528160086001015461165b90919063ffffffff16565b600860010181905550611f6482612904565b611f6c6129c6565b505050505050565b600080611f8083612850565b915091506000611f99838561165b90919063ffffffff16565b9050600060086003015414611ff7576000611fc760086003015460086001015461165b90919063ffffffff16565b9050611ff381611fe56008600101548561158990919063ffffffff16565b61160490919063ffffffff16565b9150505b80600d60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015612079576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161207090613b2c565b60405180910390fd5b6120cb81600d60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111b090919063ffffffff16565b600d60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061216084600d60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461165b90919063ffffffff16565b600d60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506121bb8460086000015461165b90919063ffffffff16565b6008600001819055506121dc816008600101546111b090919063ffffffff16565b6008600101819055506121ee82612904565b6121f66129c6565b505050505050565b80600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015612280576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161227790613b2c565b60405180910390fd5b6122d281600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111b090919063ffffffff16565b600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061236781600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461165b90919063ffffffff16565b600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050565b600360149054906101000a900460ff16156123ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123f690613c2c565b60405180910390fd5b6001600360146101000a81548160ff021916908315150217905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561248a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161248190613c0c565b60405180910390fd5b60008114156124ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124c590613c4c565b60405180910390fd5b6124e68160086004015461165b90919063ffffffff16565b6008600401819055506125078160086000015461165b90919063ffffffff16565b60086000018190555061251982612633565b61256b81600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461165b90919063ffffffff16565b600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161260c9190613cd5565b60405180910390a36000600360146101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156126a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161269a90613c0c565b60405180910390fd5b600f60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615612730576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161272790613b4c565b60405180910390fd5b6000600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054146127b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127a990613aec565b60405180910390fd5b6001600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167f687393afd4a22af144243b91668410864a0f0098b8d0ce0d912df1388ed92a3e60405160405180910390a250565b600080600061287060046002016000015485612a1c90919063ffffffff16565b905061288d60046000016000015485612a1c90919063ffffffff16565b91506128a2818361165b90919063ffffffff16565b925050915091565b60008060006128ca60046002016001015485612a1c90919063ffffffff16565b90506128e760046000016001015485612a1c90919063ffffffff16565b91506128fc818361165b90919063ffffffff16565b925050915091565b61295681600d60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461165b90919063ffffffff16565b600d60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506129b18160086002015461165b90919063ffffffff16565b6008600201819055506129c381612a57565b50565b612a11600860020154612a036008600101546129f56008600001546008600401546111b090919063ffffffff16565b6111b090919063ffffffff16565b6111b090919063ffffffff16565b600860030181905550565b60008060008414158015612a31575060008314155b15612a4d57612a4a612a438585611589565b6064611604565b90505b8091505092915050565b6000612a6d60028361160490919063ffffffff16565b90506000612a8482846111b090919063ffffffff16565b90506000479050612a9483612abc565b6000612aa982476111b090919063ffffffff16565b9050612ab58382612cfe565b5050505050565b6060600267ffffffffffffffff81118015612ad657600080fd5b50604051908082528060200260200182016040528015612b055781602001602082028036833780820191505090505b5090503081600081518110612b1657fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b158015612bb857600080fd5b505afa158015612bcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bf09190612f19565b81600181518110612bfd57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050612c6430601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684610b2b565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663791ac9478360008430426040518663ffffffff1660e01b8152600401612cc8959493929190613cf0565b600060405180830381600087803b158015612ce257600080fd5b505af1158015612cf6573d6000803e3d6000fd5b505050505050565b612d2b30601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684610b2b565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f305d71982308560008030426040518863ffffffff1660e01b8152600401612d9296959493929190613993565b6060604051808303818588803b158015612dab57600080fd5b505af1158015612dbf573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190612de491906130ed565b5050505050565b600081359050612dfa81613f3f565b92915050565b600081519050612e0f81613f3f565b92915050565b60008083601f840112612e2757600080fd5b8235905067ffffffffffffffff811115612e4057600080fd5b602083019150836020820283011115612e5857600080fd5b9250929050565b600060408284031215612e7157600080fd5b81905092915050565b600060408284031215612e8c57600080fd5b612e966040613db8565b90506000612ea684828501612ec6565b6000830152506020612eba84828501612ec6565b60208301525092915050565b600081359050612ed581613f56565b92915050565b600081519050612eea81613f56565b92915050565b600060208284031215612f0257600080fd5b6000612f1084828501612deb565b91505092915050565b600060208284031215612f2b57600080fd5b6000612f3984828501612e00565b91505092915050565b60008060408385031215612f5557600080fd5b6000612f6385828601612deb565b9250506020612f7485828601612deb565b9150509250929050565b600080600060608486031215612f9357600080fd5b6000612fa186828701612deb565b9350506020612fb286828701612deb565b9250506040612fc386828701612ec6565b9150509250925092565b60008060408385031215612fe057600080fd5b6000612fee85828601612deb565b9250506020612fff85828601612ec6565b9150509250929050565b60008060008060008060e0878903121561302257600080fd5b600061303089828a01612e5f565b965050604061304189828a01612e5f565b955050608061305289828a01612ec6565b94505060a087013567ffffffffffffffff81111561306f57600080fd5b61307b89828a01612e15565b935093505060c061308e89828a01612deb565b9150509295509295509295565b6000604082840312156130ad57600080fd5b60006130bb84828501612e7a565b91505092915050565b6000602082840312156130d657600080fd5b60006130e484828501612ec6565b91505092915050565b60008060006060848603121561310257600080fd5b600061311086828701612edb565b935050602061312186828701612edb565b925050604061313286828701612edb565b9150509250925092565b60006131488383613163565b60208301905092915050565b61315d81613e8f565b82525050565b61316c81613e3a565b82525050565b61317b81613e3a565b82525050565b600061318c82613df5565b6131968185613e18565b93506131a183613de5565b8060005b838110156131d25781516131b9888261313c565b97506131c483613e0b565b9250506001810190506131a5565b5085935050505092915050565b6131e881613e4c565b82525050565b6131f781613ea1565b82525050565b61320681613ec5565b82525050565b600061321782613e00565b6132218185613e29565b9350613231818560208601613efb565b61323a81613f2e565b840191505092915050565b6000613252602083613e29565b91507f4d6174684c69623a206d756c7469706c69636174696f6e206f766572666c6f776000830152602082019050919050565b6000613292601a83613e29565b91507f4d6174684c69623a206164646974696f6e206f766572666c6f770000000000006000830152602082019050919050565b60006132d2602d83613e29565b91507f4845524f546f6b656e45636f6e6f6d793a207370656e6465722069732074686560008301527f207a65726f2061646472657373000000000000000000000000000000000000006020830152604082019050919050565b6000613338601d83613e29565b91507f4d6174684c69623a207375627472616374696f6e206f766572666c6f770000006000830152602082019050919050565b6000613378602c83613e29565b91507f4845524f546f6b656e45636f6e6f6d793a2073656e646572206973207468652060008301527f7a65726f206164647265737300000000000000000000000000000000000000006020830152604082019050919050565b60006133de603083613e29565b91507f4845524f546f6b656e45636f6e6f6d793a2063616e206e6f74206578636c756460008301527f6520686f6c646572206163636f756e74000000000000000000000000000000006020830152604082019050919050565b6000613444601983613e29565b91507f4d6174684c69623a206469766973696f6e206279207a65726f000000000000006000830152602082019050919050565b6000613484602883613e29565b91507f4845524f546f6b656e45636f6e6f6d793a20616d6f756e74206578636565647360008301527f2062616c616e63650000000000000000000000000000000000000000000000006020830152604082019050919050565b60006134ea602a83613e29565b91507f4845524f546f6b656e45636f6e6f6d793a206163636f756e7420616c7265616460008301527f79206578636c75646564000000000000000000000000000000000000000000006020830152604082019050919050565b6000613550602383613e29565b91507f4845524f546f6b656e45636f6e6f6d793a20696e76616c69642072656369706960008301527f656e7400000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006135b6602283613e29565b91507f496e697469616c697a61626c653a20616c726561647920696e697469616c697a60008301527f65640000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061361c603083613e29565b91507f496e697469616c697a61626c653a206d73672e73656e646572206973206e6f7460008301527f2074686520696e697469616c697a6572000000000000000000000000000000006020830152604082019050919050565b6000613682603283613e29565b91507f4845524f546f6b656e45636f6e6f6d793a2063616e206e6f74206275726e206660008301527f726f6d20686f6c646572206163636f756e7400000000000000000000000000006020830152604082019050919050565b60006136e8602b83613e29565b91507f4845524f546f6b656e45636f6e6f6d793a206f776e657220697320746865207a60008301527f65726f20616464726573730000000000000000000000000000000000000000006020830152604082019050919050565b600061374e602d83613e29565b91507f4845524f546f6b656e45636f6e6f6d793a206163636f756e742069732074686560008301527f207a65726f2061646472657373000000000000000000000000000000000000006020830152604082019050919050565b60006137b4601083613e29565b91507f4c6f636b61626c653a206c6f636b6564000000000000000000000000000000006000830152602082019050919050565b60006137f4602083613e29565b91507f4845524f546f6b656e45636f6e6f6d793a20696e76616c696420616d6f756e746000830152602082019050919050565b6000613834602f83613e29565b91507f4845524f546f6b656e45636f6e6f6d793a20726563697069656e74206973207460008301527f6865207a65726f206164647265737300000000000000000000000000000000006020830152604082019050919050565b600061389a602a83613e29565b91507f4845524f546f6b656e45636f6e6f6d793a20616d6f756e74206578636565647360008301527f20616c6c6f77616e6365000000000000000000000000000000000000000000006020830152604082019050919050565b6040820160008201516139096000850182613922565b50602082015161391c6020850182613922565b50505050565b61392b81613e78565b82525050565b61393a81613e78565b82525050565b61394981613e82565b82525050565b60006020820190506139646000830184613172565b92915050565b600060408201905061397f6000830185613154565b61398c6020830184613172565b9392505050565b600060c0820190506139a86000830189613154565b6139b56020830188613931565b6139c260408301876131fd565b6139cf60608301866131fd565b6139dc6080830185613154565b6139e960a0830184613931565b979650505050505050565b6000602082019050613a0960008301846131df565b92915050565b6000602082019050613a2460008301846131ee565b92915050565b60006020820190508181036000830152613a44818461320c565b905092915050565b60006020820190508181036000830152613a6581613245565b9050919050565b60006020820190508181036000830152613a8581613285565b9050919050565b60006020820190508181036000830152613aa5816132c5565b9050919050565b60006020820190508181036000830152613ac58161332b565b9050919050565b60006020820190508181036000830152613ae58161336b565b9050919050565b60006020820190508181036000830152613b05816133d1565b9050919050565b60006020820190508181036000830152613b2581613437565b9050919050565b60006020820190508181036000830152613b4581613477565b9050919050565b60006020820190508181036000830152613b65816134dd565b9050919050565b60006020820190508181036000830152613b8581613543565b9050919050565b60006020820190508181036000830152613ba5816135a9565b9050919050565b60006020820190508181036000830152613bc58161360f565b9050919050565b60006020820190508181036000830152613be581613675565b9050919050565b60006020820190508181036000830152613c05816136db565b9050919050565b60006020820190508181036000830152613c2581613741565b9050919050565b60006020820190508181036000830152613c45816137a7565b9050919050565b60006020820190508181036000830152613c65816137e7565b9050919050565b60006020820190508181036000830152613c8581613827565b9050919050565b60006020820190508181036000830152613ca58161388d565b9050919050565b6000608082019050613cc160008301856138f3565b613cce60408301846138f3565b9392505050565b6000602082019050613cea6000830184613931565b92915050565b600060a082019050613d056000830188613931565b613d1260208301876131fd565b8181036040830152613d248186613181565b9050613d336060830185613154565b613d406080830184613931565b9695505050505050565b600060a082019050613d5f6000830188613931565b613d6c6020830187613931565b613d796040830186613931565b613d866060830185613931565b613d936080830184613931565b9695505050505050565b6000602082019050613db26000830184613940565b92915050565b6000604051905081810181811067ffffffffffffffff82111715613ddb57600080fd5b8060405250919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000613e4582613e58565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000613e9a82613ed7565b9050919050565b6000613eac82613eb3565b9050919050565b6000613ebe82613e58565b9050919050565b6000613ed082613e78565b9050919050565b6000613ee282613ee9565b9050919050565b6000613ef482613e58565b9050919050565b60005b83811015613f19578082015181840152602081019050613efe565b83811115613f28576000848401525b50505050565b6000601f19601f8301169050919050565b613f4881613e3a565b8114613f5357600080fd5b50565b613f5f81613e78565b8114613f6a57600080fd5b5056fea164736f6c634300060c000a",
  "deployedBytecode": "0x6080604052600436106100f75760003560e01c806370a082311161008a578063c31c9c0711610059578063c31c9c0714610365578063dd62ed3e14610390578063dfe78231146103cd578063e06174e4146103f6576100fe565b806370a082311461029157806395d89b41146102ce578063a9059cbb146102f9578063b16a867c14610336576100fe565b806323b872dd116100c657806323b872dd146101c157806326991cc8146101fe578063313ce5671461022957806342966c6814610254576100fe565b806306fdde0314610103578063095ea7b31461012e578063158ef93e1461016b57806318160ddd14610196576100fe565b366100fe57005b600080fd5b34801561010f57600080fd5b50610118610422565b6040516101259190613a2a565b60405180910390f35b34801561013a57600080fd5b5061015560048036038101906101509190612fcd565b6104c6565b60405161016291906139f4565b60405180910390f35b34801561017757600080fd5b506101806104dd565b60405161018d91906139f4565b60405180910390f35b3480156101a257600080fd5b506101ab610535565b6040516101b89190613cd5565b60405180910390f35b3480156101cd57600080fd5b506101e860048036038101906101e39190612f7e565b610542565b6040516101f591906139f4565b60405180910390f35b34801561020a57600080fd5b5061021361063c565b604051610220919061394f565b60405180910390f35b34801561023557600080fd5b5061023e610662565b60405161024b9190613d9d565b60405180910390f35b34801561026057600080fd5b5061027b600480360381019061027691906130c4565b61067b565b60405161028891906139f4565b60405180910390f35b34801561029d57600080fd5b506102b860048036038101906102b39190612ef0565b610690565b6040516102c59190613cd5565b60405180910390f35b3480156102da57600080fd5b506102e3610782565b6040516102f09190613a2a565b60405180910390f35b34801561030557600080fd5b50610320600480360381019061031b9190612fcd565b610827565b60405161032d91906139f4565b60405180910390f35b34801561034257600080fd5b5061034b61083e565b60405161035c959493929190613d4a565b60405180910390f35b34801561037157600080fd5b5061037a610862565b6040516103879190613a0f565b60405180910390f35b34801561039c57600080fd5b506103b760048036038101906103b29190612f42565b610888565b6040516103c49190613cd5565b60405180910390f35b3480156103d957600080fd5b506103f460048036038101906103ef9190613009565b61090f565b005b34801561040257600080fd5b5061040b610add565b604051610419929190613cac565b60405180910390f35b6060600080018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104bc5780601f10610491576101008083540402835291602001916104bc565b820191906000526020600020905b81548152906001019060200180831161049f57829003601f168201915b5050505050905090565b60006104d3338484610b2b565b6001905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905090565b6000600860040154905090565b600061054f848484610cf6565b6000600e60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610613576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90613c8c565b60405180910390fd5b610630853361062b86856111b090919063ffffffff16565b610b2b565b60019150509392505050565b601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060020160009054906101000a900460ff16905090565b60006106873383611200565b60019050919050565b6000600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161580156107345750600060086003015414155b1561077d5761077a61076b60086001015461075d8460086003015461158990919063ffffffff16565b61160490919063ffffffff16565b8261165b90919063ffffffff16565b90505b919050565b606060006001018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561081d5780601f106107f25761010080835404028352916020019161081d565b820191906000526020600020905b81548152906001019060200180831161080057829003601f168201915b5050505050905090565b6000610834338484610cf6565b6001905092915050565b60088060000154908060010154908060020154908060030154908060040154905085565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156109a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099890613b8c565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2890613bac565b60405180910390fd5b6000600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610aa086803603810190610a87919061309b565b86803603810190610a98919061309b565b8686866116b0565b610aa981611779565b7f5daa87a0e9463431830481fd4b6e3403442dfb9a12b9c07597e9f61d50b633c860405160405180910390a1505050505050565b60048060000160405180604001604052908160008201548152602001600182015481525050908060020160405180604001604052908160008201548152602001600182015481525050905082565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610b9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9290613bec565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610c0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0290613a8c565b60405180910390fd5b80600e60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610ce99190613cd5565b60405180910390a3505050565b600360149054906101000a900460ff1615610d46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3d90613c2c565b60405180910390fd5b6001600360146101000a81548160ff021916908315150217905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610dd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc890613acc565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610e41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3890613c6c565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610eb0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea790613b6c565b60405180910390fd5b6000811415610ef4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eeb90613c4c565b60405180910390fd5b600f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16158015610f985750600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b15610fad57610fa8838383611a27565b61112b565b600f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1680156110505750600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b1561106557611060838383611d46565b61112a565b600f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161580156111085750600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b1561111d57611118838383611f74565b611129565b6111288383836121fe565b5b5b5b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516111889190613cd5565b60405180910390a36000600360146101000a81548160ff021916908315150217905550505050565b6000828211156111f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ec90613aac565b60405180910390fd5b818303905092915050565b600360149054906101000a900460ff1615611250576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124790613c2c565b60405180910390fd5b6001600360146101000a81548160ff021916908315150217905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156112db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112d290613c0c565b60405180910390fd5b600081141561131f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161131690613c4c565b60405180910390fd5b80600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156113a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139890613b2c565b60405180910390fd5b600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661142d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142490613bcc565b60405180910390fd5b611445816008600401546111b090919063ffffffff16565b600860040181905550611466816008600001546111b090919063ffffffff16565b6008600001819055506114c181600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111b090919063ffffffff16565b600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516115629190613cd5565b60405180910390a36000600360146101000a81548160ff0219169083151502179055505050565b6000808314806115995750600082145b156115a757600090506115fe565b60008284029050828482816115b857fe5b04146115f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f090613a4c565b60405180910390fd5b809150505b92915050565b600080821415611649576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161164090613b0c565b60405180910390fd5b81838161165257fe5b04905092915050565b6000808284019050838110156116a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161169d90613a6c565b60405180910390fd5b8091505092915050565b60405180604001604052808681526020018581525060046000820151816000016000820151816000015560208201518160010155505060208201518160020160008201518160000155602082015181600101555050905050611729336000851461171a5784611724565b678ac7230489e800005b6123af565b600082829050905060005b818110156117705761176584848381811061174b57fe5b90506020020160208101906117609190612ef0565b612633565b600181019050611734565b50505050505050565b80601060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561182257600080fd5b505afa158015611836573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185a9190612f19565b73ffffffffffffffffffffffffffffffffffffffff1663c9c6539630601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b1580156118de57600080fd5b505afa1580156118f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119169190612f19565b6040518363ffffffff1660e01b815260040161193392919061396a565b602060405180830381600087803b15801561194d57600080fd5b505af1158015611961573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119859190612f19565b601160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506119ce30612633565b6119f9601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612633565b611a24601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612633565b50565b600080611a3383612850565b915091506000808390506000611a48866128aa565b8092508194505050611a63818561165b90919063ffffffff16565b9350611a78838361165b90919063ffffffff16565b9150506000611a90858761165b90919063ffffffff16565b90506000611aa784886111b090919063ffffffff16565b9050600060086003015414611b5d576000611ad560086003015460086001015461165b90919063ffffffff16565b9050611b0181611af36008600101548661158990919063ffffffff16565b61160490919063ffffffff16565b9250611b2d81611b1f6008600101548561158990919063ffffffff16565b61160490919063ffffffff16565b9150611b5981611b4b6008600101548761158990919063ffffffff16565b61160490919063ffffffff16565b9350505b81600d60008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611bdf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bd690613b2c565b60405180910390fd5b611c3182600d60008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111b090919063ffffffff16565b600d60008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611cc681600d60008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461165b90919063ffffffff16565b600d60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611d21836008600101546111b090919063ffffffff16565b600860010181905550611d3385612904565b611d3b6129c6565b505050505050505050565b80600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611dc8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dbf90613b2c565b60405180910390fd5b600080611dd483612850565b915091506000611ded83856111b090919063ffffffff16565b9050611e4184600d60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111b090919063ffffffff16565b600d60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611ed681600d60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461165b90919063ffffffff16565b600d60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611f31846008600001546111b090919063ffffffff16565b600860000181905550611f528160086001015461165b90919063ffffffff16565b600860010181905550611f6482612904565b611f6c6129c6565b505050505050565b600080611f8083612850565b915091506000611f99838561165b90919063ffffffff16565b9050600060086003015414611ff7576000611fc760086003015460086001015461165b90919063ffffffff16565b9050611ff381611fe56008600101548561158990919063ffffffff16565b61160490919063ffffffff16565b9150505b80600d60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015612079576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161207090613b2c565b60405180910390fd5b6120cb81600d60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111b090919063ffffffff16565b600d60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061216084600d60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461165b90919063ffffffff16565b600d60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506121bb8460086000015461165b90919063ffffffff16565b6008600001819055506121dc816008600101546111b090919063ffffffff16565b6008600101819055506121ee82612904565b6121f66129c6565b505050505050565b80600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015612280576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161227790613b2c565b60405180910390fd5b6122d281600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111b090919063ffffffff16565b600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061236781600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461165b90919063ffffffff16565b600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050565b600360149054906101000a900460ff16156123ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123f690613c2c565b60405180910390fd5b6001600360146101000a81548160ff021916908315150217905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561248a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161248190613c0c565b60405180910390fd5b60008114156124ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124c590613c4c565b60405180910390fd5b6124e68160086004015461165b90919063ffffffff16565b6008600401819055506125078160086000015461165b90919063ffffffff16565b60086000018190555061251982612633565b61256b81600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461165b90919063ffffffff16565b600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161260c9190613cd5565b60405180910390a36000600360146101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156126a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161269a90613c0c565b60405180910390fd5b600f60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615612730576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161272790613b4c565b60405180910390fd5b6000600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054146127b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127a990613aec565b60405180910390fd5b6001600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167f687393afd4a22af144243b91668410864a0f0098b8d0ce0d912df1388ed92a3e60405160405180910390a250565b600080600061287060046002016000015485612a1c90919063ffffffff16565b905061288d60046000016000015485612a1c90919063ffffffff16565b91506128a2818361165b90919063ffffffff16565b925050915091565b60008060006128ca60046002016001015485612a1c90919063ffffffff16565b90506128e760046000016001015485612a1c90919063ffffffff16565b91506128fc818361165b90919063ffffffff16565b925050915091565b61295681600d60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461165b90919063ffffffff16565b600d60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506129b18160086002015461165b90919063ffffffff16565b6008600201819055506129c381612a57565b50565b612a11600860020154612a036008600101546129f56008600001546008600401546111b090919063ffffffff16565b6111b090919063ffffffff16565b6111b090919063ffffffff16565b600860030181905550565b60008060008414158015612a31575060008314155b15612a4d57612a4a612a438585611589565b6064611604565b90505b8091505092915050565b6000612a6d60028361160490919063ffffffff16565b90506000612a8482846111b090919063ffffffff16565b90506000479050612a9483612abc565b6000612aa982476111b090919063ffffffff16565b9050612ab58382612cfe565b5050505050565b6060600267ffffffffffffffff81118015612ad657600080fd5b50604051908082528060200260200182016040528015612b055781602001602082028036833780820191505090505b5090503081600081518110612b1657fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b158015612bb857600080fd5b505afa158015612bcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bf09190612f19565b81600181518110612bfd57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050612c6430601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684610b2b565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663791ac9478360008430426040518663ffffffff1660e01b8152600401612cc8959493929190613cf0565b600060405180830381600087803b158015612ce257600080fd5b505af1158015612cf6573d6000803e3d6000fd5b505050505050565b612d2b30601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684610b2b565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f305d71982308560008030426040518863ffffffff1660e01b8152600401612d9296959493929190613993565b6060604051808303818588803b158015612dab57600080fd5b505af1158015612dbf573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190612de491906130ed565b5050505050565b600081359050612dfa81613f3f565b92915050565b600081519050612e0f81613f3f565b92915050565b60008083601f840112612e2757600080fd5b8235905067ffffffffffffffff811115612e4057600080fd5b602083019150836020820283011115612e5857600080fd5b9250929050565b600060408284031215612e7157600080fd5b81905092915050565b600060408284031215612e8c57600080fd5b612e966040613db8565b90506000612ea684828501612ec6565b6000830152506020612eba84828501612ec6565b60208301525092915050565b600081359050612ed581613f56565b92915050565b600081519050612eea81613f56565b92915050565b600060208284031215612f0257600080fd5b6000612f1084828501612deb565b91505092915050565b600060208284031215612f2b57600080fd5b6000612f3984828501612e00565b91505092915050565b60008060408385031215612f5557600080fd5b6000612f6385828601612deb565b9250506020612f7485828601612deb565b9150509250929050565b600080600060608486031215612f9357600080fd5b6000612fa186828701612deb565b9350506020612fb286828701612deb565b9250506040612fc386828701612ec6565b9150509250925092565b60008060408385031215612fe057600080fd5b6000612fee85828601612deb565b9250506020612fff85828601612ec6565b9150509250929050565b60008060008060008060e0878903121561302257600080fd5b600061303089828a01612e5f565b965050604061304189828a01612e5f565b955050608061305289828a01612ec6565b94505060a087013567ffffffffffffffff81111561306f57600080fd5b61307b89828a01612e15565b935093505060c061308e89828a01612deb565b9150509295509295509295565b6000604082840312156130ad57600080fd5b60006130bb84828501612e7a565b91505092915050565b6000602082840312156130d657600080fd5b60006130e484828501612ec6565b91505092915050565b60008060006060848603121561310257600080fd5b600061311086828701612edb565b935050602061312186828701612edb565b925050604061313286828701612edb565b9150509250925092565b60006131488383613163565b60208301905092915050565b61315d81613e8f565b82525050565b61316c81613e3a565b82525050565b61317b81613e3a565b82525050565b600061318c82613df5565b6131968185613e18565b93506131a183613de5565b8060005b838110156131d25781516131b9888261313c565b97506131c483613e0b565b9250506001810190506131a5565b5085935050505092915050565b6131e881613e4c565b82525050565b6131f781613ea1565b82525050565b61320681613ec5565b82525050565b600061321782613e00565b6132218185613e29565b9350613231818560208601613efb565b61323a81613f2e565b840191505092915050565b6000613252602083613e29565b91507f4d6174684c69623a206d756c7469706c69636174696f6e206f766572666c6f776000830152602082019050919050565b6000613292601a83613e29565b91507f4d6174684c69623a206164646974696f6e206f766572666c6f770000000000006000830152602082019050919050565b60006132d2602d83613e29565b91507f4845524f546f6b656e45636f6e6f6d793a207370656e6465722069732074686560008301527f207a65726f2061646472657373000000000000000000000000000000000000006020830152604082019050919050565b6000613338601d83613e29565b91507f4d6174684c69623a207375627472616374696f6e206f766572666c6f770000006000830152602082019050919050565b6000613378602c83613e29565b91507f4845524f546f6b656e45636f6e6f6d793a2073656e646572206973207468652060008301527f7a65726f206164647265737300000000000000000000000000000000000000006020830152604082019050919050565b60006133de603083613e29565b91507f4845524f546f6b656e45636f6e6f6d793a2063616e206e6f74206578636c756460008301527f6520686f6c646572206163636f756e74000000000000000000000000000000006020830152604082019050919050565b6000613444601983613e29565b91507f4d6174684c69623a206469766973696f6e206279207a65726f000000000000006000830152602082019050919050565b6000613484602883613e29565b91507f4845524f546f6b656e45636f6e6f6d793a20616d6f756e74206578636565647360008301527f2062616c616e63650000000000000000000000000000000000000000000000006020830152604082019050919050565b60006134ea602a83613e29565b91507f4845524f546f6b656e45636f6e6f6d793a206163636f756e7420616c7265616460008301527f79206578636c75646564000000000000000000000000000000000000000000006020830152604082019050919050565b6000613550602383613e29565b91507f4845524f546f6b656e45636f6e6f6d793a20696e76616c69642072656369706960008301527f656e7400000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006135b6602283613e29565b91507f496e697469616c697a61626c653a20616c726561647920696e697469616c697a60008301527f65640000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061361c603083613e29565b91507f496e697469616c697a61626c653a206d73672e73656e646572206973206e6f7460008301527f2074686520696e697469616c697a6572000000000000000000000000000000006020830152604082019050919050565b6000613682603283613e29565b91507f4845524f546f6b656e45636f6e6f6d793a2063616e206e6f74206275726e206660008301527f726f6d20686f6c646572206163636f756e7400000000000000000000000000006020830152604082019050919050565b60006136e8602b83613e29565b91507f4845524f546f6b656e45636f6e6f6d793a206f776e657220697320746865207a60008301527f65726f20616464726573730000000000000000000000000000000000000000006020830152604082019050919050565b600061374e602d83613e29565b91507f4845524f546f6b656e45636f6e6f6d793a206163636f756e742069732074686560008301527f207a65726f2061646472657373000000000000000000000000000000000000006020830152604082019050919050565b60006137b4601083613e29565b91507f4c6f636b61626c653a206c6f636b6564000000000000000000000000000000006000830152602082019050919050565b60006137f4602083613e29565b91507f4845524f546f6b656e45636f6e6f6d793a20696e76616c696420616d6f756e746000830152602082019050919050565b6000613834602f83613e29565b91507f4845524f546f6b656e45636f6e6f6d793a20726563697069656e74206973207460008301527f6865207a65726f206164647265737300000000000000000000000000000000006020830152604082019050919050565b600061389a602a83613e29565b91507f4845524f546f6b656e45636f6e6f6d793a20616d6f756e74206578636565647360008301527f20616c6c6f77616e6365000000000000000000000000000000000000000000006020830152604082019050919050565b6040820160008201516139096000850182613922565b50602082015161391c6020850182613922565b50505050565b61392b81613e78565b82525050565b61393a81613e78565b82525050565b61394981613e82565b82525050565b60006020820190506139646000830184613172565b92915050565b600060408201905061397f6000830185613154565b61398c6020830184613172565b9392505050565b600060c0820190506139a86000830189613154565b6139b56020830188613931565b6139c260408301876131fd565b6139cf60608301866131fd565b6139dc6080830185613154565b6139e960a0830184613931565b979650505050505050565b6000602082019050613a0960008301846131df565b92915050565b6000602082019050613a2460008301846131ee565b92915050565b60006020820190508181036000830152613a44818461320c565b905092915050565b60006020820190508181036000830152613a6581613245565b9050919050565b60006020820190508181036000830152613a8581613285565b9050919050565b60006020820190508181036000830152613aa5816132c5565b9050919050565b60006020820190508181036000830152613ac58161332b565b9050919050565b60006020820190508181036000830152613ae58161336b565b9050919050565b60006020820190508181036000830152613b05816133d1565b9050919050565b60006020820190508181036000830152613b2581613437565b9050919050565b60006020820190508181036000830152613b4581613477565b9050919050565b60006020820190508181036000830152613b65816134dd565b9050919050565b60006020820190508181036000830152613b8581613543565b9050919050565b60006020820190508181036000830152613ba5816135a9565b9050919050565b60006020820190508181036000830152613bc58161360f565b9050919050565b60006020820190508181036000830152613be581613675565b9050919050565b60006020820190508181036000830152613c05816136db565b9050919050565b60006020820190508181036000830152613c2581613741565b9050919050565b60006020820190508181036000830152613c45816137a7565b9050919050565b60006020820190508181036000830152613c65816137e7565b9050919050565b60006020820190508181036000830152613c8581613827565b9050919050565b60006020820190508181036000830152613ca58161388d565b9050919050565b6000608082019050613cc160008301856138f3565b613cce60408301846138f3565b9392505050565b6000602082019050613cea6000830184613931565b92915050565b600060a082019050613d056000830188613931565b613d1260208301876131fd565b8181036040830152613d248186613181565b9050613d336060830185613154565b613d406080830184613931565b9695505050505050565b600060a082019050613d5f6000830188613931565b613d6c6020830187613931565b613d796040830186613931565b613d866060830185613931565b613d936080830184613931565b9695505050505050565b6000602082019050613db26000830184613940565b92915050565b6000604051905081810181811067ffffffffffffffff82111715613ddb57600080fd5b8060405250919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000613e4582613e58565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000613e9a82613ed7565b9050919050565b6000613eac82613eb3565b9050919050565b6000613ebe82613e58565b9050919050565b6000613ed082613e78565b9050919050565b6000613ee282613ee9565b9050919050565b6000613ef482613e58565b9050919050565b60005b83811015613f19578082015181840152602081019050613efe565b83811115613f28576000848401525b50505050565b6000601f19601f8301169050919050565b613f4881613e3a565b8114613f5357600080fd5b50565b613f5f81613e78565b8114613f6a57600080fd5b5056fea164736f6c634300060c000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Public constructor"
      }
    },
    "title": "HERO token",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2087,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "metadata",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Metadata)2085_storage"
      },
      {
        "astId": 1925,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "initializer",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1988,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "locked",
        "offset": 20,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 496,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "settings",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(Settings)476_storage"
      },
      {
        "astId": 498,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "summary",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(Summary)487_storage"
      },
      {
        "astId": 502,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "balances",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 508,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "allowances",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 512,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "excluded",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1621,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "swapRouter",
        "offset": 0,
        "slot": "16",
        "type": "t_contract(UniswapV2Router02)2585"
      },
      {
        "astId": 1623,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "swapPair",
        "offset": 0,
        "slot": "17",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(UniswapV2Router02)2585": {
        "encoding": "inplace",
        "label": "contract UniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Fees)471_storage": {
        "encoding": "inplace",
        "label": "struct HEROTokenEconomy.Fees",
        "members": [
          {
            "astId": 468,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "sender",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 470,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "recipient",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Metadata)2085_storage": {
        "encoding": "inplace",
        "label": "struct ERC20Metadata.Metadata",
        "members": [
          {
            "astId": 2080,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2082,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "symbol",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2084,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "decimals",
            "offset": 0,
            "slot": "2",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Settings)476_storage": {
        "encoding": "inplace",
        "label": "struct HEROTokenEconomy.Settings",
        "members": [
          {
            "astId": 473,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "lpFees",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Fees)471_storage"
          },
          {
            "astId": 475,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "rewardsFees",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(Fees)471_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Summary)487_storage": {
        "encoding": "inplace",
        "label": "struct HEROTokenEconomy.Summary",
        "members": [
          {
            "astId": 478,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "totalExcluded",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 480,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "totalHolding",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 482,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "totalLP",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 484,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "totalRewards",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 486,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "totalSupply",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}