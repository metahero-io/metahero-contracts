{
  "address": "0xD34da18a49E2eF5e551A049a801AC271D88b1B19",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "excludeRecipientFromFee",
          "type": "bool"
        }
      ],
      "name": "AccountExcluded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "ControllerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "PresaleFinished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "excludeRecipientFromFee",
          "type": "bool"
        }
      ],
      "name": "excludeAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finishPresale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getBalanceSummary",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "holdingBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sender",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "recipient",
              "type": "uint256"
            }
          ],
          "internalType": "struct HEROToken.Fees",
          "name": "lpFees",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sender",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "recipient",
              "type": "uint256"
            }
          ],
          "internalType": "struct HEROToken.Fees",
          "name": "rewardsFees",
          "type": "tuple"
        },
        {
          "internalType": "address payable",
          "name": "lpManager_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "controller_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalSupply_",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "excludedAccounts_",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpManager",
      "outputs": [
        {
          "internalType": "contract HEROLPManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "presaleFinished",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "settings",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sender",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "recipient",
              "type": "uint256"
            }
          ],
          "internalType": "struct HEROToken.Fees",
          "name": "lpFees",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sender",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "recipient",
              "type": "uint256"
            }
          ],
          "internalType": "struct HEROToken.Fees",
          "name": "rewardsFees",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "summary",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalExcluded",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalHolding",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6b22c9237d2818d7867fb53b08325ae9cfae3123497ceb09484efaa14eb5fc1d",
  "receipt": {
    "to": null,
    "from": "0x2101F46D23b84eEa6a310B1dBa58f66DCE17A0Cf",
    "contractAddress": "0xD34da18a49E2eF5e551A049a801AC271D88b1B19",
    "transactionIndex": 0,
    "gasUsed": "3784161",
    "logsBloom": "0x
    "blockHash": "0x53ab6e48cf401b31b22da5244e4aa3e238a8f650aa337abe9a805e655feaec33",
    "transactionHash": "0x6b22c9237d2818d7867fb53b08325ae9cfae3123497ceb09484efaa14eb5fc1d",
    "logs": [],
    "blockNumber": 9898597,
    "cumulativeGasUsed": "3784161",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "1c58dd2df75c70a8a53c046ad3288480",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"excludeRecipientFromFee\",\"type\":\"bool\"}],\"name\":\"AccountExcluded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"ControllerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PresaleFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excludeRecipientFromFee\",\"type\":\"bool\"}],\"name\":\"excludeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBalanceSummary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holdingBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sender\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recipient\",\"type\":\"uint256\"}],\"internalType\":\"struct HEROToken.Fees\",\"name\":\"lpFees\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sender\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recipient\",\"type\":\"uint256\"}],\"internalType\":\"struct HEROToken.Fees\",\"name\":\"rewardsFees\",\"type\":\"tuple\"},{\"internalType\":\"address payable\",\"name\":\"lpManager_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"controller_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"excludedAccounts_\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpManager\",\"outputs\":[{\"internalType\":\"contract HEROLPManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settings\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sender\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recipient\",\"type\":\"uint256\"}],\"internalType\":\"struct HEROToken.Fees\",\"name\":\"lpFees\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sender\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recipient\",\"type\":\"uint256\"}],\"internalType\":\"struct HEROToken.Fees\",\"name\":\"rewardsFees\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"summary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalExcluded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalHolding\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Public constructor\"}},\"title\":\"HERO token\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/HEROToken.sol\":\"HEROToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/HEROLPManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"./access/Owned.sol\\\";\\nimport \\\"./lifecycle/Initializable.sol\\\";\\nimport \\\"./libs/MathLib.sol\\\";\\nimport \\\"./HEROToken.sol\\\";\\n\\n\\n/**\\n * @title HERO abstract liquidity pool manager\\n */\\nabstract contract HEROLPManager is Owned, Initializable {\\n  using MathLib for uint256;\\n\\n  HEROToken public token;\\n\\n  bool private swapLocked;\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor ()\\n    internal\\n    Owned()\\n    Initializable()\\n  {\\n    //\\n  }\\n\\n  // external functions\\n\\n  receive()\\n    external\\n    payable\\n  {\\n    //\\n  }\\n\\n  function syncLP()\\n    external\\n  {\\n    if (!swapLocked) {\\n      swapLocked = true;\\n\\n      _syncLP();\\n\\n      swapLocked = false;\\n    }\\n  }\\n\\n  function burnLP(\\n    uint256 amount\\n  )\\n    external\\n    onlyOwner\\n  {\\n    require(\\n      amount > 1,\\n      \\\"HEROLPManager#1\\\"\\n    );\\n\\n    require(\\n      !swapLocked,\\n      \\\"HEROLPManager#2\\\"\\n    );\\n\\n    swapLocked = true;\\n\\n    _burnLP(amount);\\n\\n    swapLocked = false;\\n  }\\n\\n  // internal functions\\n\\n  function _initialize(\\n    address token_\\n  )\\n    internal\\n  {\\n    require(\\n      token_ != address(0),\\n      \\\"HEROLPManager#3\\\"\\n    );\\n\\n    token = HEROToken(token_);\\n  }\\n\\n  function _syncLP()\\n    internal\\n    virtual;\\n\\n  function _burnLP(\\n    uint256 amount\\n  )\\n    internal\\n    virtual;\\n}\\n\",\"keccak256\":\"0x3d0201d6225f272c69ca2dabd16b1cbb93fc258b076af38286f9e392f7481082\",\"license\":\"MIT\"},\"src/HEROToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./access/Controlled.sol\\\";\\nimport \\\"./access/Owned.sol\\\";\\nimport \\\"./erc20/ERC20.sol\\\";\\nimport \\\"./lifecycle/Initializable.sol\\\";\\nimport \\\"./libs/MathLib.sol\\\";\\nimport \\\"./HEROLPManager.sol\\\";\\n\\n\\n/**\\n * @title HERO token\\n */\\ncontract HEROToken is Controlled, Owned, ERC20, Initializable {\\n  using MathLib for uint256;\\n\\n  struct Fees {\\n    uint256 sender; // percent\\n    uint256 recipient; // percent\\n  }\\n\\n  struct Settings {\\n    Fees lpFees;\\n    Fees rewardsFees;\\n  }\\n\\n  struct Summary {\\n    uint256 totalExcluded;\\n    uint256 totalHolding;\\n    uint256 totalRewards;\\n    uint256 totalSupply;\\n  }\\n\\n  struct ExcludedAccount {\\n    bool exists;\\n    bool excludeRecipientFromFee;\\n  }\\n\\n  // metadata\\n\\n  string private constant TOKEN_NAME = \\\"Metahero\\\";\\n  string private constant TOKEN_SYMBOL = \\\"HERO\\\";\\n  uint8 private constant TOKEN_DECIMALS = 18; // 0.000000000000000000\\n\\n  HEROLPManager public lpManager;\\n  Settings public settings;\\n  Summary public summary;\\n  bool public presaleFinished;\\n\\n  mapping (address => uint256) private accountBalances;\\n  mapping (address => mapping (address => uint256)) private accountAllowances;\\n  mapping (address => ExcludedAccount) private excludedAccounts;\\n\\n  // events\\n\\n  event PresaleFinished();\\n\\n  event AccountExcluded(\\n    address indexed account,\\n    bool excludeRecipientFromFee\\n  );\\n\\n  /**\\n   * @dev Public constructor\\n   */\\n  constructor ()\\n    public\\n    Controlled()\\n    Owned()\\n    ERC20(TOKEN_NAME, TOKEN_SYMBOL, TOKEN_DECIMALS)\\n    Initializable()\\n  {\\n    //\\n  }\\n\\n  // external functions\\n\\n  function initialize(\\n    Fees memory lpFees,\\n    Fees memory rewardsFees,\\n    address payable lpManager_,\\n    address controller_,\\n    uint256 totalSupply_,\\n    address[] calldata excludedAccounts_\\n  )\\n    external\\n    onlyInitializer\\n  {\\n    settings.lpFees = lpFees;\\n    settings.rewardsFees = rewardsFees;\\n\\n    if (\\n      lpFees.sender != 0 ||\\n      lpFees.recipient != 0\\n    ) {\\n      require(\\n        lpManager_ != address(0),\\n        \\\"HEROToken#1\\\"\\n      );\\n\\n      lpManager = HEROLPManager(lpManager_);\\n\\n      _excludeAccount(lpManager_, false);\\n    }\\n\\n    _initializeController(controller_);\\n\\n    if (totalSupply_ != 0) {\\n      _excludeAccount(msg.sender, false);\\n\\n      _mint(\\n        msg.sender,\\n        totalSupply_\\n      );\\n    }\\n\\n    uint256 excludedAccountsLen = excludedAccounts_.length;\\n\\n    for (uint256 index; index < excludedAccountsLen; index++) {\\n      _excludeAccount(excludedAccounts_[index], false);\\n    }\\n  }\\n\\n  function finishPresale()\\n    external\\n    onlyOwner\\n  {\\n    require(\\n      !presaleFinished,\\n      \\\"HEROToken#2\\\"\\n    );\\n\\n    presaleFinished = true;\\n\\n    emit PresaleFinished();\\n  }\\n\\n  function excludeAccount(\\n    address account,\\n    bool excludeRecipientFromFee\\n  )\\n    external\\n    onlyOwner\\n  {\\n    _excludeAccount(\\n      account,\\n      excludeRecipientFromFee\\n    );\\n  }\\n\\n  function approve(\\n    address spender,\\n    uint256 amount\\n  )\\n    external\\n    override\\n    returns (bool)\\n  {\\n    _approve(\\n      msg.sender,\\n      spender,\\n      amount\\n    );\\n\\n    return true;\\n  }\\n\\n  function mint(\\n    address account,\\n    uint256 amount\\n  )\\n    external\\n    onlyController\\n  {\\n    _mint(\\n      account,\\n      amount\\n    );\\n  }\\n\\n  function burn(\\n    uint256 amount\\n  )\\n    external\\n  {\\n    _burn(\\n      msg.sender,\\n      amount\\n    );\\n  }\\n\\n  function transfer(\\n    address recipient,\\n    uint256 amount\\n  )\\n    external\\n    override\\n    returns (bool)\\n  {\\n    _transfer(\\n      msg.sender,\\n      recipient,\\n      amount\\n    );\\n\\n    return true;\\n  }\\n\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    external\\n    override\\n    returns (bool)\\n  {\\n    _transfer(\\n      sender,\\n      recipient,\\n      amount\\n    );\\n\\n    uint256 allowance = accountAllowances[sender][msg.sender];\\n\\n    require(\\n      allowance >= amount,\\n      \\\"HEROToken#3\\\"\\n    );\\n\\n    _approve(\\n      sender,\\n      msg.sender,\\n      allowance.sub(amount)\\n    );\\n\\n    return true;\\n  }\\n\\n  // external functions (views)\\n\\n  function totalSupply()\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return summary.totalSupply;\\n  }\\n\\n  function allowance(\\n    address owner,\\n    address spender\\n  )\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return accountAllowances[owner][spender];\\n  }\\n\\n  function balanceOf(\\n    address account\\n  )\\n    external\\n    view\\n    override\\n    returns (uint256 result)\\n  {\\n    result = accountBalances[account].add(\\n      _calcRewards(account)\\n    );\\n\\n    return result;\\n  }\\n\\n  function getBalanceSummary(\\n    address account\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 totalBalance,\\n      uint256 holdingBalance,\\n      uint256 totalRewards\\n    )\\n  {\\n    holdingBalance = accountBalances[account];\\n    totalRewards = _calcRewards(account);\\n    totalBalance = holdingBalance.add(totalRewards);\\n\\n    return (totalBalance, holdingBalance, totalRewards);\\n  }\\n\\n  // private functions\\n\\n  function _excludeAccount(\\n    address account,\\n    bool excludeRecipientFromFee\\n  )\\n    private\\n  {\\n    require(\\n      account != address(0),\\n      \\\"HEROToken#4\\\"\\n    );\\n\\n    if (excludedAccounts[account].exists) {\\n      require(\\n        excludedAccounts[account].excludeRecipientFromFee != excludeRecipientFromFee,\\n        \\\"HEROToken#5\\\"\\n      );\\n\\n      excludedAccounts[account].excludeRecipientFromFee = excludeRecipientFromFee;\\n    } else {\\n      require(\\n        accountBalances[account] == 0,\\n        \\\"HEROToken#6\\\"\\n      );\\n\\n      excludedAccounts[account].exists = true;\\n      excludedAccounts[account].excludeRecipientFromFee = excludeRecipientFromFee;\\n    }\\n\\n    emit AccountExcluded(\\n      account,\\n      excludeRecipientFromFee\\n    );\\n  }\\n\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    require(\\n      owner != address(0),\\n      \\\"HEROToken#7\\\"\\n    );\\n\\n    require(\\n      spender != address(0),\\n      \\\"HEROToken#8\\\"\\n    );\\n\\n    accountAllowances[owner][spender] = amount;\\n\\n    emit Approval(\\n      owner,\\n      spender,\\n      amount\\n    );\\n  }\\n\\n  function _mint(\\n    address account,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    require(\\n      account != address(0),\\n      \\\"HEROToken#9\\\"\\n    );\\n\\n    require(\\n      amount != 0,\\n      \\\"HEROToken#10\\\"\\n    );\\n\\n    summary.totalSupply = summary.totalSupply.add(amount);\\n\\n    if (excludedAccounts[account].exists) {\\n      summary.totalExcluded = summary.totalExcluded.add(amount);\\n    } else {\\n      summary.totalHolding = summary.totalHolding.add(amount);\\n\\n      _updateTotalRewards();\\n    }\\n\\n    accountBalances[account] = accountBalances[account].add(amount);\\n\\n    emit Transfer(\\n      address(0),\\n      account,\\n      amount\\n    );\\n  }\\n\\n  function _burn(\\n    address account,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    require(\\n      account != address(0),\\n      \\\"HEROToken#11\\\"\\n    );\\n\\n    require(\\n      amount != 0,\\n      \\\"HEROToken#12\\\"\\n    );\\n\\n    require(\\n      accountBalances[account] >= amount,\\n      \\\"HEROToken#13\\\"\\n    );\\n\\n    summary.totalSupply = summary.totalSupply.sub(amount);\\n\\n    if (excludedAccounts[account].exists) {\\n      summary.totalExcluded = summary.totalExcluded.sub(amount);\\n    } else {\\n      summary.totalHolding = summary.totalHolding.sub(amount);\\n\\n      _updateTotalRewards();\\n    }\\n\\n    accountBalances[account] = accountBalances[account].sub(amount);\\n\\n    emit Transfer(\\n      account,\\n      address(0),\\n      amount\\n    );\\n  }\\n\\n  function _transfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    require(\\n      sender != address(0),\\n      \\\"HEROToken#14\\\"\\n    );\\n\\n    require(\\n      recipient != address(0),\\n      \\\"HEROToken#15\\\"\\n    );\\n\\n    require(\\n      sender != recipient,\\n      \\\"HEROToken#16\\\"\\n    );\\n\\n    require(\\n      amount != 0,\\n      \\\"HEROToken#17\\\"\\n    );\\n\\n    require(\\n      excludedAccounts[sender].exists ||\\n      presaleFinished,\\n      \\\"HEROToken#18\\\"\\n    );\\n\\n    if (\\n      !excludedAccounts[sender].exists &&\\n      !excludedAccounts[recipient].exists\\n    ) {\\n      _transferBetweenHolderAccounts(\\n        sender,\\n        recipient,\\n        amount\\n      );\\n    } else if (\\n      excludedAccounts[sender].exists &&\\n      !excludedAccounts[recipient].exists\\n    ) {\\n      _transferFromExcludedAccount(\\n        sender,\\n        recipient,\\n        amount\\n      );\\n    } else if (\\n      !excludedAccounts[sender].exists &&\\n      excludedAccounts[recipient].exists\\n    ) {\\n      _transferToExcludedAccount(\\n        sender,\\n        recipient,\\n        amount\\n      );\\n    } else {\\n      _transferBetweenExcludedAccounts(\\n        sender,\\n        recipient,\\n        amount\\n      );\\n    }\\n\\n    emit Transfer(\\n      sender,\\n      recipient,\\n      amount\\n    );\\n  }\\n\\n  function _transferBetweenHolderAccounts(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    (\\n      uint256 senderFee,\\n      uint256 lpFee\\n    ) = _calcTransferSenderFees(amount);\\n\\n    uint256 recipientFee;\\n    uint256 totalFee = senderFee;\\n\\n    {\\n      uint256 recipientLPFee;\\n\\n      (\\n        recipientFee,\\n        recipientLPFee\\n      ) = _calcTransferRecipientFees(amount);\\n\\n      lpFee = lpFee.add(recipientLPFee);\\n      totalFee = totalFee.add(recipientFee);\\n    }\\n\\n    uint256 senderAmount = amount.add(senderFee);\\n    uint256 recipientAmount = amount.sub(recipientFee);\\n\\n    if (summary.totalRewards != 0) {\\n      uint256 totalHoldingWithRewards = summary.totalHolding.add(\\n        summary.totalRewards\\n      );\\n\\n      senderAmount = senderAmount.mul(summary.totalHolding).div(\\n        totalHoldingWithRewards\\n      );\\n      recipientAmount = recipientAmount.mul(summary.totalHolding).div(\\n        totalHoldingWithRewards\\n      );\\n      totalFee = totalFee.mul(summary.totalHolding).div(\\n        totalHoldingWithRewards\\n      );\\n    }\\n\\n    require(\\n      accountBalances[sender] >= senderAmount,\\n      \\\"HEROToken#19\\\"\\n    );\\n\\n    accountBalances[sender] = accountBalances[sender].sub(senderAmount);\\n    accountBalances[recipient] = accountBalances[recipient].add(recipientAmount);\\n\\n    summary.totalHolding = summary.totalHolding.sub(totalFee);\\n\\n    _increaseTotalLP(lpFee);\\n\\n    _updateTotalRewards();\\n  }\\n\\n  function _transferFromExcludedAccount(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    require(\\n      accountBalances[sender] >= amount,\\n      \\\"HEROToken#20\\\"\\n    );\\n\\n    uint256 recipientFee;\\n    uint256 lpFee;\\n\\n    if (!excludedAccounts[sender].excludeRecipientFromFee) {\\n      (\\n        recipientFee,\\n        lpFee\\n      ) = _calcTransferSenderFees(amount);\\n    }\\n\\n    uint256 recipientAmount = amount.sub(recipientFee);\\n\\n    accountBalances[sender] = accountBalances[sender].sub(amount);\\n    accountBalances[recipient] = accountBalances[recipient].add(recipientAmount);\\n\\n    summary.totalExcluded = summary.totalExcluded.sub(amount);\\n    summary.totalHolding = summary.totalHolding.add(recipientAmount);\\n\\n    _increaseTotalLP(lpFee);\\n\\n    _updateTotalRewards();\\n  }\\n\\n  function _transferToExcludedAccount(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    (\\n      uint256 senderFee,\\n      uint256 lpFee\\n    ) = _calcTransferSenderFees(amount);\\n\\n    uint256 senderAmount = amount.add(senderFee);\\n\\n    if (summary.totalRewards != 0) {\\n      uint256 totalHoldingWithRewards = summary.totalHolding.add(\\n        summary.totalRewards\\n      );\\n\\n      senderAmount = senderAmount.mul(summary.totalHolding).div(\\n        totalHoldingWithRewards\\n      );\\n    }\\n\\n    require(\\n      accountBalances[sender] >= senderAmount,\\n      \\\"HEROToken#21\\\"\\n    );\\n\\n    accountBalances[sender] = accountBalances[sender].sub(senderAmount);\\n    accountBalances[recipient] = accountBalances[recipient].add(amount);\\n\\n    summary.totalExcluded = summary.totalExcluded.add(amount);\\n    summary.totalHolding = summary.totalHolding.sub(senderAmount);\\n\\n    _increaseTotalLP(lpFee);\\n\\n    _updateTotalRewards();\\n  }\\n\\n  function _transferBetweenExcludedAccounts(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    require(\\n      accountBalances[sender] >= amount,\\n      \\\"HEROToken#22\\\"\\n    );\\n\\n    accountBalances[sender] = accountBalances[sender].sub(amount);\\n    accountBalances[recipient] = accountBalances[recipient].add(amount);\\n  }\\n\\n  function _increaseTotalLP(\\n    uint256 amount\\n  )\\n    private\\n  {\\n    if (amount != 0) {\\n      accountBalances[address(lpManager)] = accountBalances[address(lpManager)].add(amount);\\n\\n      summary.totalExcluded = summary.totalExcluded.add(amount);\\n\\n      lpManager.syncLP();\\n    }\\n  }\\n\\n  function _updateTotalRewards()\\n    private\\n  {\\n    summary.totalRewards = summary.totalSupply\\n    .sub(summary.totalExcluded)\\n    .sub(summary.totalHolding);\\n  }\\n\\n  // private functions (views)\\n\\n  function _calcRewards(\\n    address account\\n  )\\n    private\\n    view\\n    returns (uint256 result)\\n  {\\n    if (\\n      !excludedAccounts[account].exists &&\\n      summary.totalRewards != 0\\n    ) {\\n      result = summary.totalRewards\\n        .mul(accountBalances[account])\\n        .div(summary.totalHolding);\\n    }\\n\\n    return result;\\n  }\\n\\n  function _calcTransferSenderFees(\\n    uint256 amount\\n  )\\n    private\\n    view\\n    returns (\\n      uint256 totalFee,\\n      uint256 lpFee\\n    )\\n  {\\n    uint256 rewardsFee = amount.percent(settings.rewardsFees.sender);\\n\\n    lpFee = amount.percent(settings.lpFees.sender);\\n    totalFee = lpFee.add(rewardsFee);\\n\\n    return (totalFee, lpFee);\\n  }\\n\\n  function _calcTransferRecipientFees(\\n    uint256 amount\\n  )\\n    private\\n    view\\n    returns (\\n      uint256 totalFee,\\n      uint256 lpFee\\n    )\\n  {\\n    uint256 rewardsFee = amount.percent(settings.rewardsFees.recipient);\\n\\n    lpFee = amount.percent(settings.lpFees.recipient);\\n    totalFee = lpFee.add(rewardsFee);\\n\\n    return (totalFee, lpFee);\\n  }\\n}\\n\",\"keccak256\":\"0x56d7e9a42798d08c5a0898c2c0beb3421e058d7002495dc9566056825cf09b6c\",\"license\":\"MIT\"},\"src/access/Controlled.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Controlled\\n */\\ncontract Controlled {\\n  address public controller;\\n\\n  // modifiers\\n\\n  modifier onlyController() {\\n    require(\\n      msg.sender == controller,\\n      \\\"Controlled#1\\\"\\n    );\\n\\n    _;\\n  }\\n\\n  // events\\n\\n  event ControllerUpdated(\\n    address controller\\n  );\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor()\\n    internal\\n  {\\n    //\\n  }\\n\\n  // internal functions\\n\\n  function _initializeController(\\n    address controller_\\n  )\\n    internal\\n  {\\n    controller = controller_;\\n  }\\n\\n  function _setController(\\n    address controller_\\n  )\\n    internal\\n  {\\n    require(\\n      controller_ != address(0),\\n      \\\"Controlled#2\\\"\\n    );\\n\\n    require(\\n      controller_ != controller,\\n      \\\"Controlled#3\\\"\\n    );\\n\\n    controller = controller_;\\n\\n    emit ControllerUpdated(\\n      controller_\\n    );\\n  }\\n\\n  function _removeController()\\n    internal\\n  {\\n    require(\\n      controller != address(0),\\n      \\\"Controlled#4\\\"\\n    );\\n\\n    controller = address(0);\\n\\n    emit ControllerUpdated(\\n      address(0)\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x7a17852153173274f8335812747b2b9872b740569e5b64ac241b586f48de17db\",\"license\":\"MIT\"},\"src/access/Owned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Owned\\n */\\ncontract Owned {\\n  address public owner;\\n\\n  // modifiers\\n\\n  modifier onlyOwner() {\\n    require(\\n      msg.sender == owner,\\n      \\\"Owned#1\\\"\\n    );\\n\\n    _;\\n  }\\n\\n  // events\\n\\n  event OwnerUpdated(\\n    address owner\\n  );\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor()\\n    internal\\n  {\\n    owner = msg.sender;\\n  }\\n\\n  // external functions\\n\\n  function setOwner(\\n    address owner_\\n  )\\n    external\\n    onlyOwner\\n  {\\n    require(\\n      owner_ != address(0),\\n      \\\"Owned#2\\\"\\n    );\\n\\n    require(\\n      owner_ != owner,\\n      \\\"Owned#3\\\"\\n    );\\n\\n    owner = owner_;\\n\\n    emit OwnerUpdated(\\n      owner_\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0xfc994d9233a8e6a1581dc1511d97e29d7d45fb33dc24ce1f146f5b55e62e8d58\",\"license\":\"MIT\"},\"src/erc20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"./ERC20Metadata.sol\\\";\\nimport \\\"./ERC20Standard.sol\\\";\\n\\n\\nabstract contract ERC20 is ERC20Metadata, ERC20Standard {\\n  string public override name;\\n  string public override symbol;\\n  uint8 public override decimals;\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor (\\n    string memory name_,\\n    string memory symbol_,\\n    uint8 decimals_\\n  )\\n    internal\\n  {\\n    name = name_;\\n    symbol = symbol_;\\n    decimals = decimals_;\\n  }\\n}\\n\",\"keccak256\":\"0x263e909b5aacdfe0efbb513c92a36909d7ec7bb29310a56366e4006e893f077b\",\"license\":\"MIT\"},\"src/erc20/ERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\ninterface ERC20Metadata {\\n  // external functions (pure)\\n\\n  function name()\\n    external\\n    pure\\n    returns (string memory);\\n\\n  function symbol()\\n    external\\n    pure\\n    returns (string memory);\\n\\n  function decimals()\\n    external\\n    pure\\n    returns (uint8);\\n}\\n\",\"keccak256\":\"0xb9f2b7768748bb9daef7fb378aa85e04ce735a3577aa7c99b2c46c3d09301ca2\",\"license\":\"MIT\"},\"src/erc20/ERC20Standard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\ninterface ERC20Standard {\\n  // events\\n\\n  event Approval(\\n    address indexed owner,\\n    address indexed spender,\\n    uint256 value\\n  );\\n\\n  event Transfer(\\n    address indexed from,\\n    address indexed to,\\n    uint256 value\\n  );\\n\\n  // external functions\\n\\n  function approve(\\n    address spender,\\n    uint256 value\\n  )\\n    external\\n    returns (bool);\\n\\n  function transfer(\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (bool);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (bool);\\n\\n  // external functions (views)\\n\\n  function totalSupply()\\n    external\\n    view\\n    returns (uint256);\\n\\n  function balanceOf(\\n    address owner\\n  )\\n    external\\n    view\\n    returns (uint256);\\n\\n  function allowance(\\n    address owner,\\n    address spender\\n  )\\n    external\\n    view\\n    returns (uint256);\\n}\\n\",\"keccak256\":\"0x97bfb18accd6fac80fc5c560cdf3b15b55be42dead5488f10db8aa9fffa34f56\",\"license\":\"MIT\"},\"src/libs/MathLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Math library\\n */\\nlibrary MathLib {\\n  function add(\\n    uint256 a,\\n    uint256 b\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    uint256 c = a + b;\\n\\n    require(\\n      c >= a,\\n      \\\"MathLib#1\\\"\\n    );\\n\\n    return c;\\n  }\\n\\n  function sub(\\n    uint256 a,\\n    uint256 b\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    require(\\n      b <= a,\\n      \\\"MathLib#2\\\"\\n    );\\n\\n    return a - b;\\n  }\\n\\n  function mul(\\n    uint256 a,\\n    uint256 b\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n\\n    require(\\n      c / a == b,\\n      \\\"MathLib#3\\\"\\n    );\\n\\n    return c;\\n  }\\n\\n  function div(\\n    uint256 a,\\n    uint256 b\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    require(\\n      b != 0,\\n      \\\"MathLib#4\\\"\\n    );\\n\\n    return a / b;\\n  }\\n\\n  function percent(\\n    uint256 a,\\n    uint256 p\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    uint256 result;\\n\\n    if (a != 0 && p != 0) {\\n      result = div(mul(a, p), 100);\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x0f6f91d2ee23bd8a9e6e17588fdd32d86eaed11a09274baa87beb12728ae3e69\",\"license\":\"MIT\"},\"src/lifecycle/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Initializable\\n */\\ncontract Initializable {\\n  address private initializer;\\n\\n  // events\\n\\n  event Initialized();\\n\\n  // modifiers\\n\\n  modifier onlyInitializer() {\\n    require(\\n      initializer != address(0),\\n      \\\"Initializable#1\\\"\\n    );\\n\\n    require(\\n      msg.sender == initializer,\\n      \\\"Initializable#2\\\"\\n    );\\n\\n    initializer = address(0);\\n\\n    _;\\n\\n    emit Initialized();\\n  }\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor()\\n    internal\\n  {\\n    initializer = msg.sender;\\n  }\\n\\n  // external functions (views)\\n\\n  function initialized()\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return initializer == address(0);\\n  }\\n}\\n\",\"keccak256\":\"0xe69c4567bd1e4564e316eaf1a36387a29dae6babc31ed4c21f0306e4b0ea1750\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040518060400160405280600881526020017f4d6574616865726f0000000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f4845524f00000000000000000000000000000000000000000000000000000000815250601233600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260029080519060200190620000d992919062000158565b508160039080519060200190620000f292919062000158565b5080600460006101000a81548160ff021916908360ff16021790555050505033600460016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620001fe565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200019b57805160ff1916838001178555620001cc565b82800160010185558215620001cc579182015b82811115620001cb578251825591602001919060010190620001ae565b5b509050620001db9190620001df565b5090565b5b80821115620001fa576000816000905550600101620001e0565b5090565b614231806200020e6000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c80638da5cb5b116100c3578063b16a867c1161007c578063b16a867c14610390578063b906f15a146103b1578063d8c9538b146103cf578063dd62ed3e146103eb578063e06174e41461041b578063f77c47911461043a5761014d565b80638da5cb5b146102e057806390b5e6d9146102fe57806395d89b411461031c578063974654c61461033a578063a9059cbb14610344578063a927bbcb146103745761014d565b806323b872dd1161011557806323b872dd146101f85780632d38031514610228578063313ce5671461025a57806340c10f191461027857806342966c681461029457806370a08231146102b05761014d565b806306fdde0314610152578063095ea7b31461017057806313af4035146101a0578063158ef93e146101bc57806318160ddd146101da575b600080fd5b61015a610458565b6040516101679190613bb3565b60405180910390f35b61018a60048036038101906101859190613193565b6104f6565b6040516101979190613b7d565b60405180910390f35b6101ba60048036038101906101b591906130a3565b61050d565b005b6101c4610719565b6040516101d19190613b7d565b60405180910390f35b6101e2610771565b6040516101ef9190613ffe565b60405180910390f35b610212600480360381019061020d9190613108565b61077e565b60405161021f9190613b7d565b60405180910390f35b610242600480360381019061023d91906130a3565b610878565b60405161025193929190614019565b60405180910390f35b6102626108e6565b60405161026f9190614095565b60405180910390f35b610292600480360381019061028d9190613193565b6108f9565b005b6102ae60048036038101906102a99190613277565b610995565b005b6102ca60048036038101906102c591906130a3565b6109a2565b6040516102d79190613ffe565b60405180910390f35b6102e8610a05565b6040516102f59190613b62565b60405180910390f35b610306610a2b565b6040516103139190613b7d565b60405180910390f35b610324610a3e565b6040516103319190613bb3565b60405180910390f35b610342610adc565b005b61035e60048036038101906103599190613193565b610c05565b60405161036b9190613b7d565b60405180910390f35b61038e600480360381019061038991906131cf565b610c1c565b005b610398610f3e565b6040516103a89493929190614050565b60405180910390f35b6103b9610f5c565b6040516103c69190613b98565b60405180910390f35b6103e960048036038101906103e49190613157565b610f82565b005b610405600480360381019061040091906130cc565b611020565b6040516104129190613ffe565b60405180910390f35b6104236110a7565b604051610431929190613fd5565b60405180910390f35b6104426110f5565b60405161044f9190613b62565b60405180910390f35b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104ee5780601f106104c3576101008083540402835291602001916104ee565b820191906000526020600020905b8154815290600101906020018083116104d157829003601f168201915b505050505081565b6000610503338484611119565b6001905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461059d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059490613f75565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561060d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060490613ef5565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561069e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069590613e95565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f4ffd725fc4a22075e9ec71c59edf9c38cdeb588a91b24fc5b61388c5be41282b8160405161070e9190613b62565b60405180910390a150565b60008073ffffffffffffffffffffffffffffffffffffffff16600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905090565b6000600a60030154905090565b600061078b8484846112e4565b6000601060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508281101561084f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084690613e55565b60405180910390fd5b61086c853361086786856117d090919063ffffffff16565b611119565b60019150509392505050565b6000806000600f60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491506108c884611820565b90506108dd818361190090919063ffffffff16565b92509193909250565b600460009054906101000a900460ff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610987576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097e90613f15565b60405180910390fd5b6109918282611955565b5050565b61099f3382611bce565b50565b60006109fe6109b083611820565b600f60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461190090919063ffffffff16565b9050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600e60009054906101000a900460ff1681565b60038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ad45780601f10610aa957610100808354040283529160200191610ad4565b820191906000526020600020905b815481529060010190602001808311610ab757829003601f168201915b505050505081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6390613f75565b60405180910390fd5b600e60009054906101000a900460ff1615610bbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb390613d15565b60405180910390fd5b6001600e60006101000a81548160ff0219169083151502179055507f0b5ca8ee9a23a12c9bb341511e83987d73bee14e96dc855aeaea8840c54ea0bd60405160405180910390a1565b6000610c123384846112e4565b6001905092915050565b600073ffffffffffffffffffffffffffffffffffffffff16600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610cae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca590613e15565b60405180910390fd5b600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3590613dd5565b60405180910390fd5b6000600460016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508660066000016000820151816000015560208201518160010155905050856006600201600082015181600001556020820151816001015590505060008760000151141580610dd357506000876020015114155b15610e9557600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415610e48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3f90613f55565b60405180910390fd5b84600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610e94856000611ec9565b5b610e9e8461220d565b60008314610ebc57610eb1336000611ec9565b610ebb3384611955565b5b600082829050905060005b81811015610f0757610efa848483818110610ede57fe5b9050602002016020810190610ef391906130a3565b6000611ec9565b8080600101915050610ec7565b50507f5daa87a0e9463431830481fd4b6e3403442dfb9a12b9c07597e9f61d50b633c860405160405180910390a150505050505050565b600a8060000154908060010154908060020154908060030154905084565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611012576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100990613f75565b60405180910390fd5b61101c8282611ec9565b5050565b6000601060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60068060000160405180604001604052908160008201548152602001600182015481525050908060020160405180604001604052908160008201548152602001600182015481525050905082565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611189576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118090613ed5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156111f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111f090613cd5565b60405180910390fd5b80601060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516112d79190613ffe565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611354576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134b90613fb5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156113c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113bb90613c55565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611433576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142a90613e75565b60405180910390fd5b6000811415611477576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161146e90613df5565b60405180910390fd5b601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16806114de5750600e60009054906101000a900460ff165b61151d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151490613e35565b60405180910390fd5b601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff161580156115c75750601160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16155b156115dc576115d7838383612250565b611766565b601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1680156116855750601160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16155b1561169a5761169583838361256f565b611765565b601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff161580156117435750601160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff165b15611758576117538383836127f6565b611764565b611763838383612a80565b5b5b5b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516117c39190613ffe565b60405180910390a3505050565b600082821115611815576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161180c90613c15565b60405180910390fd5b818303905092915050565b6000601160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1615801561188557506000600a6002015414155b156118fb576118f8600a600101546118ea600f60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600a60020154612c3190919063ffffffff16565b612cac90919063ffffffff16565b90505b919050565b60008082840190508381101561194b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161194290613c75565b60405180910390fd5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156119c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119bc90613db5565b60405180910390fd5b6000811415611a09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a0090613d75565b60405180910390fd5b611a2181600a6003015461190090919063ffffffff16565b600a60030181905550601160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1615611aa557611a9781600a6000015461190090919063ffffffff16565b600a60000181905550611acf565b611abd81600a6001015461190090919063ffffffff16565b600a60010181905550611ace612d03565b5b611b2181600f60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461190090919063ffffffff16565b600f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611bc29190613ffe565b60405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611c3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c3590613c95565b60405180910390fd5b6000811415611c82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c7990613bf5565b60405180910390fd5b80600f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611d04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cfb90613f35565b60405180910390fd5b611d1c81600a600301546117d090919063ffffffff16565b600a60030181905550601160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1615611da057611d9281600a600001546117d090919063ffffffff16565b600a60000181905550611dca565b611db881600a600101546117d090919063ffffffff16565b600a60010181905550611dc9612d03565b5b611e1c81600f60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546117d090919063ffffffff16565b600f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611ebd9190613ffe565b60405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611f39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f3090613cf5565b60405180910390fd5b601160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff161561208357801515601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff1615151415612024576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161201b90613c35565b60405180910390fd5b80601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160016101000a81548160ff0219169083151502179055506121bb565b6000600f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414612105576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120fc90613eb5565b60405180910390fd5b6001601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff02191690831515021790555080601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160016101000a81548160ff0219169083151502179055505b8173ffffffffffffffffffffffffffffffffffffffff167ff3407d03b594227ddbb9468b57b4ac6fa9c361d9209ed837b15922d1364e56f2826040516122019190613b7d565b60405180910390a25050565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008061225c83612d42565b91509150600080839050600061227186612d9c565b809250819450505061228c818561190090919063ffffffff16565b93506122a1838361190090919063ffffffff16565b91505060006122b9858761190090919063ffffffff16565b905060006122d084886117d090919063ffffffff16565b90506000600a60020154146123865760006122fe600a60020154600a6001015461190090919063ffffffff16565b905061232a8161231c600a6001015486612c3190919063ffffffff16565b612cac90919063ffffffff16565b925061235681612348600a6001015485612c3190919063ffffffff16565b612cac90919063ffffffff16565b915061238281612374600a6001015487612c3190919063ffffffff16565b612cac90919063ffffffff16565b9350505b81600f60008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015612408576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123ff90613d95565b60405180910390fd5b61245a82600f60008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546117d090919063ffffffff16565b600f60008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506124ef81600f60008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461190090919063ffffffff16565b600f60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061254a83600a600101546117d090919063ffffffff16565b600a6001018190555061255c85612df6565b612564612d03565b505050505050505050565b80600f60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156125f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125e890613f95565b60405180910390fd5b600080601160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff1661265a5761265183612d42565b80925081935050505b600061266f83856117d090919063ffffffff16565b90506126c384600f60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546117d090919063ffffffff16565b600f60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061275881600f60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461190090919063ffffffff16565b600f60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506127b384600a600001546117d090919063ffffffff16565b600a600001819055506127d481600a6001015461190090919063ffffffff16565b600a600101819055506127e682612df6565b6127ee612d03565b505050505050565b60008061280283612d42565b91509150600061281b838561190090919063ffffffff16565b90506000600a6002015414612879576000612849600a60020154600a6001015461190090919063ffffffff16565b905061287581612867600a6001015485612c3190919063ffffffff16565b612cac90919063ffffffff16565b9150505b80600f60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156128fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128f290613d55565b60405180910390fd5b61294d81600f60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546117d090919063ffffffff16565b600f60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506129e284600f60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461190090919063ffffffff16565b600f60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612a3d84600a6000015461190090919063ffffffff16565b600a60000181905550612a5e81600a600101546117d090919063ffffffff16565b600a60010181905550612a7082612df6565b612a78612d03565b505050505050565b80600f60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015612b02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612af990613cb5565b60405180910390fd5b612b5481600f60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546117d090919063ffffffff16565b600f60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612be981600f60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461190090919063ffffffff16565b600f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050565b600080831480612c415750600082145b15612c4f5760009050612ca6565b6000828402905082848281612c6057fe5b0414612ca1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c9890613d35565b60405180910390fd5b809150505b92915050565b600080821415612cf1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ce890613bd5565b60405180910390fd5b818381612cfa57fe5b04905092915050565b612d37600a60010154612d29600a60000154600a600301546117d090919063ffffffff16565b6117d090919063ffffffff16565b600a60020181905550565b6000806000612d6260066002016000015485612f7e90919063ffffffff16565b9050612d7f60066000016000015485612f7e90919063ffffffff16565b9150612d94818361190090919063ffffffff16565b925050915091565b6000806000612dbc60066002016001015485612f7e90919063ffffffff16565b9050612dd960066000016001015485612f7e90919063ffffffff16565b9150612dee818361190090919063ffffffff16565b925050915091565b60008114612f7b57612e7281600f6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461190090919063ffffffff16565b600f6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612eef81600a6000015461190090919063ffffffff16565b600a60000181905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166339071c9e6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612f6257600080fd5b505af1158015612f76573d6000803e3d6000fd5b505050505b50565b60008060008414158015612f93575060008314155b15612faf57612fac612fa58585612c31565b6064612cac565b90505b8091505092915050565b600081359050612fc8816141c8565b92915050565b600081359050612fdd816141df565b92915050565b60008083601f840112612ff557600080fd5b8235905067ffffffffffffffff81111561300e57600080fd5b60208301915083602082028301111561302657600080fd5b9250929050565b60008135905061303c816141f6565b92915050565b60006040828403121561305457600080fd5b61305e60406140b0565b9050600061306e8482850161308e565b60008301525060206130828482850161308e565b60208301525092915050565b60008135905061309d8161420d565b92915050565b6000602082840312156130b557600080fd5b60006130c384828501612fb9565b91505092915050565b600080604083850312156130df57600080fd5b60006130ed85828601612fb9565b92505060206130fe85828601612fb9565b9150509250929050565b60008060006060848603121561311d57600080fd5b600061312b86828701612fb9565b935050602061313c86828701612fb9565b925050604061314d8682870161308e565b9150509250925092565b6000806040838503121561316a57600080fd5b600061317885828601612fb9565b92505060206131898582860161302d565b9150509250929050565b600080604083850312156131a657600080fd5b60006131b485828601612fb9565b92505060206131c58582860161308e565b9150509250929050565b6000806000806000806000610100888a0312156131eb57600080fd5b60006131f98a828b01613042565b975050604061320a8a828b01613042565b965050608061321b8a828b01612fce565b95505060a061322c8a828b01612fb9565b94505060c061323d8a828b0161308e565b93505060e088013567ffffffffffffffff81111561325a57600080fd5b6132668a828b01612fe3565b925092505092959891949750929550565b60006020828403121561328957600080fd5b60006132978482850161308e565b91505092915050565b6132a9816140f9565b82525050565b6132b88161411d565b82525050565b6132c781614160565b82525050565b60006132d8826140dd565b6132e281856140e8565b93506132f2818560208601614184565b6132fb816141b7565b840191505092915050565b60006133136009836140e8565b91507f4d6174684c6962233400000000000000000000000000000000000000000000006000830152602082019050919050565b6000613353600c836140e8565b91507f4845524f546f6b656e23313200000000000000000000000000000000000000006000830152602082019050919050565b60006133936009836140e8565b91507f4d6174684c6962233200000000000000000000000000000000000000000000006000830152602082019050919050565b60006133d3600b836140e8565b91507f4845524f546f6b656e23350000000000000000000000000000000000000000006000830152602082019050919050565b6000613413600c836140e8565b91507f4845524f546f6b656e23313500000000000000000000000000000000000000006000830152602082019050919050565b60006134536009836140e8565b91507f4d6174684c6962233100000000000000000000000000000000000000000000006000830152602082019050919050565b6000613493600c836140e8565b91507f4845524f546f6b656e23313100000000000000000000000000000000000000006000830152602082019050919050565b60006134d3600c836140e8565b91507f4845524f546f6b656e23323200000000000000000000000000000000000000006000830152602082019050919050565b6000613513600b836140e8565b91507f4845524f546f6b656e23380000000000000000000000000000000000000000006000830152602082019050919050565b6000613553600b836140e8565b91507f4845524f546f6b656e23340000000000000000000000000000000000000000006000830152602082019050919050565b6000613593600b836140e8565b91507f4845524f546f6b656e23320000000000000000000000000000000000000000006000830152602082019050919050565b60006135d36009836140e8565b91507f4d6174684c6962233300000000000000000000000000000000000000000000006000830152602082019050919050565b6000613613600c836140e8565b91507f4845524f546f6b656e23323100000000000000000000000000000000000000006000830152602082019050919050565b6000613653600c836140e8565b91507f4845524f546f6b656e23313000000000000000000000000000000000000000006000830152602082019050919050565b6000613693600c836140e8565b91507f4845524f546f6b656e23313900000000000000000000000000000000000000006000830152602082019050919050565b60006136d3600b836140e8565b91507f4845524f546f6b656e23390000000000000000000000000000000000000000006000830152602082019050919050565b6000613713600f836140e8565b91507f496e697469616c697a61626c65233200000000000000000000000000000000006000830152602082019050919050565b6000613753600c836140e8565b91507f4845524f546f6b656e23313700000000000000000000000000000000000000006000830152602082019050919050565b6000613793600f836140e8565b91507f496e697469616c697a61626c65233100000000000000000000000000000000006000830152602082019050919050565b60006137d3600c836140e8565b91507f4845524f546f6b656e23313800000000000000000000000000000000000000006000830152602082019050919050565b6000613813600b836140e8565b91507f4845524f546f6b656e23330000000000000000000000000000000000000000006000830152602082019050919050565b6000613853600c836140e8565b91507f4845524f546f6b656e23313600000000000000000000000000000000000000006000830152602082019050919050565b60006138936007836140e8565b91507f4f776e65642333000000000000000000000000000000000000000000000000006000830152602082019050919050565b60006138d3600b836140e8565b91507f4845524f546f6b656e23360000000000000000000000000000000000000000006000830152602082019050919050565b6000613913600b836140e8565b91507f4845524f546f6b656e23370000000000000000000000000000000000000000006000830152602082019050919050565b60006139536007836140e8565b91507f4f776e65642332000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000613993600c836140e8565b91507f436f6e74726f6c6c6564233100000000000000000000000000000000000000006000830152602082019050919050565b60006139d3600c836140e8565b91507f4845524f546f6b656e23313300000000000000000000000000000000000000006000830152602082019050919050565b6000613a13600b836140e8565b91507f4845524f546f6b656e23310000000000000000000000000000000000000000006000830152602082019050919050565b6000613a536007836140e8565b91507f4f776e65642331000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000613a93600c836140e8565b91507f4845524f546f6b656e23323000000000000000000000000000000000000000006000830152602082019050919050565b6000613ad3600c836140e8565b91507f4845524f546f6b656e23313400000000000000000000000000000000000000006000830152602082019050919050565b604082016000820151613b1c6000850182613b35565b506020820151613b2f6020850182613b35565b50505050565b613b3e81614149565b82525050565b613b4d81614149565b82525050565b613b5c81614153565b82525050565b6000602082019050613b7760008301846132a0565b92915050565b6000602082019050613b9260008301846132af565b92915050565b6000602082019050613bad60008301846132be565b92915050565b60006020820190508181036000830152613bcd81846132cd565b905092915050565b60006020820190508181036000830152613bee81613306565b9050919050565b60006020820190508181036000830152613c0e81613346565b9050919050565b60006020820190508181036000830152613c2e81613386565b9050919050565b60006020820190508181036000830152613c4e816133c6565b9050919050565b60006020820190508181036000830152613c6e81613406565b9050919050565b60006020820190508181036000830152613c8e81613446565b9050919050565b60006020820190508181036000830152613cae81613486565b9050919050565b60006020820190508181036000830152613cce816134c6565b9050919050565b60006020820190508181036000830152613cee81613506565b9050919050565b60006020820190508181036000830152613d0e81613546565b9050919050565b60006020820190508181036000830152613d2e81613586565b9050919050565b60006020820190508181036000830152613d4e816135c6565b9050919050565b60006020820190508181036000830152613d6e81613606565b9050919050565b60006020820190508181036000830152613d8e81613646565b9050919050565b60006020820190508181036000830152613dae81613686565b9050919050565b60006020820190508181036000830152613dce816136c6565b9050919050565b60006020820190508181036000830152613dee81613706565b9050919050565b60006020820190508181036000830152613e0e81613746565b9050919050565b60006020820190508181036000830152613e2e81613786565b9050919050565b60006020820190508181036000830152613e4e816137c6565b9050919050565b60006020820190508181036000830152613e6e81613806565b9050919050565b60006020820190508181036000830152613e8e81613846565b9050919050565b60006020820190508181036000830152613eae81613886565b9050919050565b60006020820190508181036000830152613ece816138c6565b9050919050565b60006020820190508181036000830152613eee81613906565b9050919050565b60006020820190508181036000830152613f0e81613946565b9050919050565b60006020820190508181036000830152613f2e81613986565b9050919050565b60006020820190508181036000830152613f4e816139c6565b9050919050565b60006020820190508181036000830152613f6e81613a06565b9050919050565b60006020820190508181036000830152613f8e81613a46565b9050919050565b60006020820190508181036000830152613fae81613a86565b9050919050565b60006020820190508181036000830152613fce81613ac6565b9050919050565b6000608082019050613fea6000830185613b06565b613ff76040830184613b06565b9392505050565b60006020820190506140136000830184613b44565b92915050565b600060608201905061402e6000830186613b44565b61403b6020830185613b44565b6140486040830184613b44565b949350505050565b60006080820190506140656000830187613b44565b6140726020830186613b44565b61407f6040830185613b44565b61408c6060830184613b44565b95945050505050565b60006020820190506140aa6000830184613b53565b92915050565b6000604051905081810181811067ffffffffffffffff821117156140d357600080fd5b8060405250919050565b600081519050919050565b600082825260208201905092915050565b600061410482614129565b9050919050565b600061411682614129565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600061416b82614172565b9050919050565b600061417d82614129565b9050919050565b60005b838110156141a2578082015181840152602081019050614187565b838111156141b1576000848401525b50505050565b6000601f19601f8301169050919050565b6141d1816140f9565b81146141dc57600080fd5b50565b6141e88161410b565b81146141f357600080fd5b50565b6141ff8161411d565b811461420a57600080fd5b50565b61421681614149565b811461422157600080fd5b5056fea164736f6c634300060c000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014d5760003560e01c80638da5cb5b116100c3578063b16a867c1161007c578063b16a867c14610390578063b906f15a146103b1578063d8c9538b146103cf578063dd62ed3e146103eb578063e06174e41461041b578063f77c47911461043a5761014d565b80638da5cb5b146102e057806390b5e6d9146102fe57806395d89b411461031c578063974654c61461033a578063a9059cbb14610344578063a927bbcb146103745761014d565b806323b872dd1161011557806323b872dd146101f85780632d38031514610228578063313ce5671461025a57806340c10f191461027857806342966c681461029457806370a08231146102b05761014d565b806306fdde0314610152578063095ea7b31461017057806313af4035146101a0578063158ef93e146101bc57806318160ddd146101da575b600080fd5b61015a610458565b6040516101679190613bb3565b60405180910390f35b61018a60048036038101906101859190613193565b6104f6565b6040516101979190613b7d565b60405180910390f35b6101ba60048036038101906101b591906130a3565b61050d565b005b6101c4610719565b6040516101d19190613b7d565b60405180910390f35b6101e2610771565b6040516101ef9190613ffe565b60405180910390f35b610212600480360381019061020d9190613108565b61077e565b60405161021f9190613b7d565b60405180910390f35b610242600480360381019061023d91906130a3565b610878565b60405161025193929190614019565b60405180910390f35b6102626108e6565b60405161026f9190614095565b60405180910390f35b610292600480360381019061028d9190613193565b6108f9565b005b6102ae60048036038101906102a99190613277565b610995565b005b6102ca60048036038101906102c591906130a3565b6109a2565b6040516102d79190613ffe565b60405180910390f35b6102e8610a05565b6040516102f59190613b62565b60405180910390f35b610306610a2b565b6040516103139190613b7d565b60405180910390f35b610324610a3e565b6040516103319190613bb3565b60405180910390f35b610342610adc565b005b61035e60048036038101906103599190613193565b610c05565b60405161036b9190613b7d565b60405180910390f35b61038e600480360381019061038991906131cf565b610c1c565b005b610398610f3e565b6040516103a89493929190614050565b60405180910390f35b6103b9610f5c565b6040516103c69190613b98565b60405180910390f35b6103e960048036038101906103e49190613157565b610f82565b005b610405600480360381019061040091906130cc565b611020565b6040516104129190613ffe565b60405180910390f35b6104236110a7565b604051610431929190613fd5565b60405180910390f35b6104426110f5565b60405161044f9190613b62565b60405180910390f35b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104ee5780601f106104c3576101008083540402835291602001916104ee565b820191906000526020600020905b8154815290600101906020018083116104d157829003601f168201915b505050505081565b6000610503338484611119565b6001905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461059d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059490613f75565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561060d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060490613ef5565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561069e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069590613e95565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f4ffd725fc4a22075e9ec71c59edf9c38cdeb588a91b24fc5b61388c5be41282b8160405161070e9190613b62565b60405180910390a150565b60008073ffffffffffffffffffffffffffffffffffffffff16600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905090565b6000600a60030154905090565b600061078b8484846112e4565b6000601060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508281101561084f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084690613e55565b60405180910390fd5b61086c853361086786856117d090919063ffffffff16565b611119565b60019150509392505050565b6000806000600f60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491506108c884611820565b90506108dd818361190090919063ffffffff16565b92509193909250565b600460009054906101000a900460ff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610987576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097e90613f15565b60405180910390fd5b6109918282611955565b5050565b61099f3382611bce565b50565b60006109fe6109b083611820565b600f60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461190090919063ffffffff16565b9050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600e60009054906101000a900460ff1681565b60038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ad45780601f10610aa957610100808354040283529160200191610ad4565b820191906000526020600020905b815481529060010190602001808311610ab757829003601f168201915b505050505081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6390613f75565b60405180910390fd5b600e60009054906101000a900460ff1615610bbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb390613d15565b60405180910390fd5b6001600e60006101000a81548160ff0219169083151502179055507f0b5ca8ee9a23a12c9bb341511e83987d73bee14e96dc855aeaea8840c54ea0bd60405160405180910390a1565b6000610c123384846112e4565b6001905092915050565b600073ffffffffffffffffffffffffffffffffffffffff16600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610cae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca590613e15565b60405180910390fd5b600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3590613dd5565b60405180910390fd5b6000600460016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508660066000016000820151816000015560208201518160010155905050856006600201600082015181600001556020820151816001015590505060008760000151141580610dd357506000876020015114155b15610e9557600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415610e48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3f90613f55565b60405180910390fd5b84600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610e94856000611ec9565b5b610e9e8461220d565b60008314610ebc57610eb1336000611ec9565b610ebb3384611955565b5b600082829050905060005b81811015610f0757610efa848483818110610ede57fe5b9050602002016020810190610ef391906130a3565b6000611ec9565b8080600101915050610ec7565b50507f5daa87a0e9463431830481fd4b6e3403442dfb9a12b9c07597e9f61d50b633c860405160405180910390a150505050505050565b600a8060000154908060010154908060020154908060030154905084565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611012576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100990613f75565b60405180910390fd5b61101c8282611ec9565b5050565b6000601060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60068060000160405180604001604052908160008201548152602001600182015481525050908060020160405180604001604052908160008201548152602001600182015481525050905082565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611189576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118090613ed5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156111f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111f090613cd5565b60405180910390fd5b80601060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516112d79190613ffe565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611354576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134b90613fb5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156113c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113bb90613c55565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611433576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142a90613e75565b60405180910390fd5b6000811415611477576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161146e90613df5565b60405180910390fd5b601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16806114de5750600e60009054906101000a900460ff165b61151d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151490613e35565b60405180910390fd5b601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff161580156115c75750601160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16155b156115dc576115d7838383612250565b611766565b601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1680156116855750601160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16155b1561169a5761169583838361256f565b611765565b601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff161580156117435750601160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff165b15611758576117538383836127f6565b611764565b611763838383612a80565b5b5b5b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516117c39190613ffe565b60405180910390a3505050565b600082821115611815576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161180c90613c15565b60405180910390fd5b818303905092915050565b6000601160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1615801561188557506000600a6002015414155b156118fb576118f8600a600101546118ea600f60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600a60020154612c3190919063ffffffff16565b612cac90919063ffffffff16565b90505b919050565b60008082840190508381101561194b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161194290613c75565b60405180910390fd5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156119c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119bc90613db5565b60405180910390fd5b6000811415611a09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a0090613d75565b60405180910390fd5b611a2181600a6003015461190090919063ffffffff16565b600a60030181905550601160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1615611aa557611a9781600a6000015461190090919063ffffffff16565b600a60000181905550611acf565b611abd81600a6001015461190090919063ffffffff16565b600a60010181905550611ace612d03565b5b611b2181600f60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461190090919063ffffffff16565b600f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611bc29190613ffe565b60405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611c3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c3590613c95565b60405180910390fd5b6000811415611c82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c7990613bf5565b60405180910390fd5b80600f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611d04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cfb90613f35565b60405180910390fd5b611d1c81600a600301546117d090919063ffffffff16565b600a60030181905550601160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1615611da057611d9281600a600001546117d090919063ffffffff16565b600a60000181905550611dca565b611db881600a600101546117d090919063ffffffff16565b600a60010181905550611dc9612d03565b5b611e1c81600f60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546117d090919063ffffffff16565b600f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611ebd9190613ffe565b60405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611f39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f3090613cf5565b60405180910390fd5b601160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff161561208357801515601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff1615151415612024576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161201b90613c35565b60405180910390fd5b80601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160016101000a81548160ff0219169083151502179055506121bb565b6000600f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414612105576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120fc90613eb5565b60405180910390fd5b6001601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff02191690831515021790555080601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160016101000a81548160ff0219169083151502179055505b8173ffffffffffffffffffffffffffffffffffffffff167ff3407d03b594227ddbb9468b57b4ac6fa9c361d9209ed837b15922d1364e56f2826040516122019190613b7d565b60405180910390a25050565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008061225c83612d42565b91509150600080839050600061227186612d9c565b809250819450505061228c818561190090919063ffffffff16565b93506122a1838361190090919063ffffffff16565b91505060006122b9858761190090919063ffffffff16565b905060006122d084886117d090919063ffffffff16565b90506000600a60020154146123865760006122fe600a60020154600a6001015461190090919063ffffffff16565b905061232a8161231c600a6001015486612c3190919063ffffffff16565b612cac90919063ffffffff16565b925061235681612348600a6001015485612c3190919063ffffffff16565b612cac90919063ffffffff16565b915061238281612374600a6001015487612c3190919063ffffffff16565b612cac90919063ffffffff16565b9350505b81600f60008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015612408576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123ff90613d95565b60405180910390fd5b61245a82600f60008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546117d090919063ffffffff16565b600f60008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506124ef81600f60008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461190090919063ffffffff16565b600f60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061254a83600a600101546117d090919063ffffffff16565b600a6001018190555061255c85612df6565b612564612d03565b505050505050505050565b80600f60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156125f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125e890613f95565b60405180910390fd5b600080601160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff1661265a5761265183612d42565b80925081935050505b600061266f83856117d090919063ffffffff16565b90506126c384600f60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546117d090919063ffffffff16565b600f60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061275881600f60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461190090919063ffffffff16565b600f60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506127b384600a600001546117d090919063ffffffff16565b600a600001819055506127d481600a6001015461190090919063ffffffff16565b600a600101819055506127e682612df6565b6127ee612d03565b505050505050565b60008061280283612d42565b91509150600061281b838561190090919063ffffffff16565b90506000600a6002015414612879576000612849600a60020154600a6001015461190090919063ffffffff16565b905061287581612867600a6001015485612c3190919063ffffffff16565b612cac90919063ffffffff16565b9150505b80600f60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156128fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128f290613d55565b60405180910390fd5b61294d81600f60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546117d090919063ffffffff16565b600f60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506129e284600f60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461190090919063ffffffff16565b600f60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612a3d84600a6000015461190090919063ffffffff16565b600a60000181905550612a5e81600a600101546117d090919063ffffffff16565b600a60010181905550612a7082612df6565b612a78612d03565b505050505050565b80600f60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015612b02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612af990613cb5565b60405180910390fd5b612b5481600f60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546117d090919063ffffffff16565b600f60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612be981600f60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461190090919063ffffffff16565b600f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050565b600080831480612c415750600082145b15612c4f5760009050612ca6565b6000828402905082848281612c6057fe5b0414612ca1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c9890613d35565b60405180910390fd5b809150505b92915050565b600080821415612cf1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ce890613bd5565b60405180910390fd5b818381612cfa57fe5b04905092915050565b612d37600a60010154612d29600a60000154600a600301546117d090919063ffffffff16565b6117d090919063ffffffff16565b600a60020181905550565b6000806000612d6260066002016000015485612f7e90919063ffffffff16565b9050612d7f60066000016000015485612f7e90919063ffffffff16565b9150612d94818361190090919063ffffffff16565b925050915091565b6000806000612dbc60066002016001015485612f7e90919063ffffffff16565b9050612dd960066000016001015485612f7e90919063ffffffff16565b9150612dee818361190090919063ffffffff16565b925050915091565b60008114612f7b57612e7281600f6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461190090919063ffffffff16565b600f6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612eef81600a6000015461190090919063ffffffff16565b600a60000181905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166339071c9e6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612f6257600080fd5b505af1158015612f76573d6000803e3d6000fd5b505050505b50565b60008060008414158015612f93575060008314155b15612faf57612fac612fa58585612c31565b6064612cac565b90505b8091505092915050565b600081359050612fc8816141c8565b92915050565b600081359050612fdd816141df565b92915050565b60008083601f840112612ff557600080fd5b8235905067ffffffffffffffff81111561300e57600080fd5b60208301915083602082028301111561302657600080fd5b9250929050565b60008135905061303c816141f6565b92915050565b60006040828403121561305457600080fd5b61305e60406140b0565b9050600061306e8482850161308e565b60008301525060206130828482850161308e565b60208301525092915050565b60008135905061309d8161420d565b92915050565b6000602082840312156130b557600080fd5b60006130c384828501612fb9565b91505092915050565b600080604083850312156130df57600080fd5b60006130ed85828601612fb9565b92505060206130fe85828601612fb9565b9150509250929050565b60008060006060848603121561311d57600080fd5b600061312b86828701612fb9565b935050602061313c86828701612fb9565b925050604061314d8682870161308e565b9150509250925092565b6000806040838503121561316a57600080fd5b600061317885828601612fb9565b92505060206131898582860161302d565b9150509250929050565b600080604083850312156131a657600080fd5b60006131b485828601612fb9565b92505060206131c58582860161308e565b9150509250929050565b6000806000806000806000610100888a0312156131eb57600080fd5b60006131f98a828b01613042565b975050604061320a8a828b01613042565b965050608061321b8a828b01612fce565b95505060a061322c8a828b01612fb9565b94505060c061323d8a828b0161308e565b93505060e088013567ffffffffffffffff81111561325a57600080fd5b6132668a828b01612fe3565b925092505092959891949750929550565b60006020828403121561328957600080fd5b60006132978482850161308e565b91505092915050565b6132a9816140f9565b82525050565b6132b88161411d565b82525050565b6132c781614160565b82525050565b60006132d8826140dd565b6132e281856140e8565b93506132f2818560208601614184565b6132fb816141b7565b840191505092915050565b60006133136009836140e8565b91507f4d6174684c6962233400000000000000000000000000000000000000000000006000830152602082019050919050565b6000613353600c836140e8565b91507f4845524f546f6b656e23313200000000000000000000000000000000000000006000830152602082019050919050565b60006133936009836140e8565b91507f4d6174684c6962233200000000000000000000000000000000000000000000006000830152602082019050919050565b60006133d3600b836140e8565b91507f4845524f546f6b656e23350000000000000000000000000000000000000000006000830152602082019050919050565b6000613413600c836140e8565b91507f4845524f546f6b656e23313500000000000000000000000000000000000000006000830152602082019050919050565b60006134536009836140e8565b91507f4d6174684c6962233100000000000000000000000000000000000000000000006000830152602082019050919050565b6000613493600c836140e8565b91507f4845524f546f6b656e23313100000000000000000000000000000000000000006000830152602082019050919050565b60006134d3600c836140e8565b91507f4845524f546f6b656e23323200000000000000000000000000000000000000006000830152602082019050919050565b6000613513600b836140e8565b91507f4845524f546f6b656e23380000000000000000000000000000000000000000006000830152602082019050919050565b6000613553600b836140e8565b91507f4845524f546f6b656e23340000000000000000000000000000000000000000006000830152602082019050919050565b6000613593600b836140e8565b91507f4845524f546f6b656e23320000000000000000000000000000000000000000006000830152602082019050919050565b60006135d36009836140e8565b91507f4d6174684c6962233300000000000000000000000000000000000000000000006000830152602082019050919050565b6000613613600c836140e8565b91507f4845524f546f6b656e23323100000000000000000000000000000000000000006000830152602082019050919050565b6000613653600c836140e8565b91507f4845524f546f6b656e23313000000000000000000000000000000000000000006000830152602082019050919050565b6000613693600c836140e8565b91507f4845524f546f6b656e23313900000000000000000000000000000000000000006000830152602082019050919050565b60006136d3600b836140e8565b91507f4845524f546f6b656e23390000000000000000000000000000000000000000006000830152602082019050919050565b6000613713600f836140e8565b91507f496e697469616c697a61626c65233200000000000000000000000000000000006000830152602082019050919050565b6000613753600c836140e8565b91507f4845524f546f6b656e23313700000000000000000000000000000000000000006000830152602082019050919050565b6000613793600f836140e8565b91507f496e697469616c697a61626c65233100000000000000000000000000000000006000830152602082019050919050565b60006137d3600c836140e8565b91507f4845524f546f6b656e23313800000000000000000000000000000000000000006000830152602082019050919050565b6000613813600b836140e8565b91507f4845524f546f6b656e23330000000000000000000000000000000000000000006000830152602082019050919050565b6000613853600c836140e8565b91507f4845524f546f6b656e23313600000000000000000000000000000000000000006000830152602082019050919050565b60006138936007836140e8565b91507f4f776e65642333000000000000000000000000000000000000000000000000006000830152602082019050919050565b60006138d3600b836140e8565b91507f4845524f546f6b656e23360000000000000000000000000000000000000000006000830152602082019050919050565b6000613913600b836140e8565b91507f4845524f546f6b656e23370000000000000000000000000000000000000000006000830152602082019050919050565b60006139536007836140e8565b91507f4f776e65642332000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000613993600c836140e8565b91507f436f6e74726f6c6c6564233100000000000000000000000000000000000000006000830152602082019050919050565b60006139d3600c836140e8565b91507f4845524f546f6b656e23313300000000000000000000000000000000000000006000830152602082019050919050565b6000613a13600b836140e8565b91507f4845524f546f6b656e23310000000000000000000000000000000000000000006000830152602082019050919050565b6000613a536007836140e8565b91507f4f776e65642331000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000613a93600c836140e8565b91507f4845524f546f6b656e23323000000000000000000000000000000000000000006000830152602082019050919050565b6000613ad3600c836140e8565b91507f4845524f546f6b656e23313400000000000000000000000000000000000000006000830152602082019050919050565b604082016000820151613b1c6000850182613b35565b506020820151613b2f6020850182613b35565b50505050565b613b3e81614149565b82525050565b613b4d81614149565b82525050565b613b5c81614153565b82525050565b6000602082019050613b7760008301846132a0565b92915050565b6000602082019050613b9260008301846132af565b92915050565b6000602082019050613bad60008301846132be565b92915050565b60006020820190508181036000830152613bcd81846132cd565b905092915050565b60006020820190508181036000830152613bee81613306565b9050919050565b60006020820190508181036000830152613c0e81613346565b9050919050565b60006020820190508181036000830152613c2e81613386565b9050919050565b60006020820190508181036000830152613c4e816133c6565b9050919050565b60006020820190508181036000830152613c6e81613406565b9050919050565b60006020820190508181036000830152613c8e81613446565b9050919050565b60006020820190508181036000830152613cae81613486565b9050919050565b60006020820190508181036000830152613cce816134c6565b9050919050565b60006020820190508181036000830152613cee81613506565b9050919050565b60006020820190508181036000830152613d0e81613546565b9050919050565b60006020820190508181036000830152613d2e81613586565b9050919050565b60006020820190508181036000830152613d4e816135c6565b9050919050565b60006020820190508181036000830152613d6e81613606565b9050919050565b60006020820190508181036000830152613d8e81613646565b9050919050565b60006020820190508181036000830152613dae81613686565b9050919050565b60006020820190508181036000830152613dce816136c6565b9050919050565b60006020820190508181036000830152613dee81613706565b9050919050565b60006020820190508181036000830152613e0e81613746565b9050919050565b60006020820190508181036000830152613e2e81613786565b9050919050565b60006020820190508181036000830152613e4e816137c6565b9050919050565b60006020820190508181036000830152613e6e81613806565b9050919050565b60006020820190508181036000830152613e8e81613846565b9050919050565b60006020820190508181036000830152613eae81613886565b9050919050565b60006020820190508181036000830152613ece816138c6565b9050919050565b60006020820190508181036000830152613eee81613906565b9050919050565b60006020820190508181036000830152613f0e81613946565b9050919050565b60006020820190508181036000830152613f2e81613986565b9050919050565b60006020820190508181036000830152613f4e816139c6565b9050919050565b60006020820190508181036000830152613f6e81613a06565b9050919050565b60006020820190508181036000830152613f8e81613a46565b9050919050565b60006020820190508181036000830152613fae81613a86565b9050919050565b60006020820190508181036000830152613fce81613ac6565b9050919050565b6000608082019050613fea6000830185613b06565b613ff76040830184613b06565b9392505050565b60006020820190506140136000830184613b44565b92915050565b600060608201905061402e6000830186613b44565b61403b6020830185613b44565b6140486040830184613b44565b949350505050565b60006080820190506140656000830187613b44565b6140726020830186613b44565b61407f6040830185613b44565b61408c6060830184613b44565b95945050505050565b60006020820190506140aa6000830184613b53565b92915050565b6000604051905081810181811067ffffffffffffffff821117156140d357600080fd5b8060405250919050565b600081519050919050565b600082825260208201905092915050565b600061410482614129565b9050919050565b600061411682614129565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600061416b82614172565b9050919050565b600061417d82614129565b9050919050565b60005b838110156141a2578082015181840152602081019050614187565b838111156141b1576000848401525b50505050565b6000601f19601f8301169050919050565b6141d1816140f9565b81146141dc57600080fd5b50565b6141e88161410b565b81146141f357600080fd5b50565b6141ff8161411d565b811461420a57600080fd5b50565b61421681614149565b811461422157600080fd5b5056fea164736f6c634300060c000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Public constructor"
      }
    },
    "title": "HERO token",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2696,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "controller",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2792,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2863,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 2866,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 2869,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "decimals",
        "offset": 0,
        "slot": "4",
        "type": "t_uint8"
      },
      {
        "astId": 3128,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "initializer",
        "offset": 1,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 1308,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "lpManager",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(HEROLPManager)113"
      },
      {
        "astId": 1310,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "settings",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(Settings)1283_storage"
      },
      {
        "astId": 1312,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "summary",
        "offset": 0,
        "slot": "10",
        "type": "t_struct(Summary)1292_storage"
      },
      {
        "astId": 1314,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "presaleFinished",
        "offset": 0,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 1318,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "accountBalances",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1324,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "accountAllowances",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1328,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "excludedAccounts",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_struct(ExcludedAccount)1297_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(HEROLPManager)113": {
        "encoding": "inplace",
        "label": "contract HEROLPManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(ExcludedAccount)1297_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct HEROToken.ExcludedAccount)",
        "numberOfBytes": "32",
        "value": "t_struct(ExcludedAccount)1297_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ExcludedAccount)1297_storage": {
        "encoding": "inplace",
        "label": "struct HEROToken.ExcludedAccount",
        "members": [
          {
            "astId": 1294,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "exists",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1296,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "excludeRecipientFromFee",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Fees)1278_storage": {
        "encoding": "inplace",
        "label": "struct HEROToken.Fees",
        "members": [
          {
            "astId": 1275,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "sender",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1277,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "recipient",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Settings)1283_storage": {
        "encoding": "inplace",
        "label": "struct HEROToken.Settings",
        "members": [
          {
            "astId": 1280,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "lpFees",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Fees)1278_storage"
          },
          {
            "astId": 1282,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "rewardsFees",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(Fees)1278_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Summary)1292_storage": {
        "encoding": "inplace",
        "label": "struct HEROToken.Summary",
        "members": [
          {
            "astId": 1285,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "totalExcluded",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1287,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "totalHolding",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1289,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "totalRewards",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1291,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "totalSupply",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}