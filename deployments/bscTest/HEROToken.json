{
  "address": "0x6Df688F5B075e40D658fDE96c8eCbDb161A2F2c2",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Excluded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "PresaleFinished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "exclude",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finishPresale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sender",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "recipient",
              "type": "uint256"
            }
          ],
          "internalType": "struct HEROTokenEconomy.Fees",
          "name": "lpFees",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sender",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "recipient",
              "type": "uint256"
            }
          ],
          "internalType": "struct HEROTokenEconomy.Fees",
          "name": "rewardsFees",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "presale",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "totalSupply_",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "excluded_",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "swapRouter_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "controller_",
          "type": "address"
        }
      ],
      "name": "setController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "settings",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sender",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "recipient",
              "type": "uint256"
            }
          ],
          "internalType": "struct HEROTokenEconomy.Fees",
          "name": "lpFees",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sender",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "recipient",
              "type": "uint256"
            }
          ],
          "internalType": "struct HEROTokenEconomy.Fees",
          "name": "rewardsFees",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "presale",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "summary",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalExcluded",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalHolding",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalLP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapRouter",
      "outputs": [
        {
          "internalType": "contract UniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x1c708b0bbcb978bc29ea5a88ef821aef3b7745824eea7b5b5faeddd2db3be589",
  "receipt": {
    "to": null,
    "from": "0x2101F46D23b84eEa6a310B1dBa58f66DCE17A0Cf",
    "contractAddress": "0x6Df688F5B075e40D658fDE96c8eCbDb161A2F2c2",
    "transactionIndex": 0,
    "gasUsed": "3959798",
    "logsBloom": "0x
    "blockHash": "0x58b943cdb3e398ae9f2e448a9e989bff2c61f1d39ed3c5d77ad66a95e5b6e881",
    "transactionHash": "0x1c708b0bbcb978bc29ea5a88ef821aef3b7745824eea7b5b5faeddd2db3be589",
    "logs": [],
    "blockNumber": 9723915,
    "cumulativeGasUsed": "3959798",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "7ce2428dea20fb48ef3ca346376a2d92",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Excluded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PresaleFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"exclude\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sender\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recipient\",\"type\":\"uint256\"}],\"internalType\":\"struct HEROTokenEconomy.Fees\",\"name\":\"lpFees\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sender\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recipient\",\"type\":\"uint256\"}],\"internalType\":\"struct HEROTokenEconomy.Fees\",\"name\":\"rewardsFees\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"presale\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"excluded_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"swapRouter_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller_\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settings\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sender\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recipient\",\"type\":\"uint256\"}],\"internalType\":\"struct HEROTokenEconomy.Fees\",\"name\":\"lpFees\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sender\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recipient\",\"type\":\"uint256\"}],\"internalType\":\"struct HEROTokenEconomy.Fees\",\"name\":\"rewardsFees\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"presale\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"summary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalExcluded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalHolding\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract UniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Public constructor\"}},\"title\":\"HERO token\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/HEROToken.sol\":\"HEROToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/HEROToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./components/erc20/ERC20Metadata.sol\\\";\\nimport \\\"./components/Initializable.sol\\\";\\nimport \\\"./HEROTokenLP.sol\\\";\\n\\n\\n/**\\n * @title HERO token\\n */\\ncontract HEROToken is ERC20Metadata, Initializable, HEROTokenLP {\\n  // metadata\\n  string private constant TOKEN_NAME = \\\"METAHERO\\\";\\n  string private constant TOKEN_SYMBOL = \\\"HERO\\\";\\n  uint8 private constant TOKEN_DECIMALS = 9; // 0.000000000\\n\\n  /**\\n   * @dev Public constructor\\n   */\\n  constructor ()\\n    public\\n    ERC20Metadata(\\n      Metadata(TOKEN_NAME, TOKEN_SYMBOL, TOKEN_DECIMALS)\\n    )\\n    Initializable()\\n    HEROTokenLP()\\n  {\\n    //\\n  }\\n\\n  // external functions\\n\\n  function initialize(\\n    Fees calldata lpFees,\\n    Fees calldata rewardsFees,\\n    bool presale,\\n    uint256 totalSupply_,\\n    address[] calldata excluded_,\\n    address swapRouter_\\n  )\\n    external\\n    onlyInitializer\\n  {\\n    _initializeEconomy(\\n      lpFees,\\n      rewardsFees,\\n      presale,\\n      totalSupply_,\\n      excluded_\\n    );\\n\\n    _initializeLP(\\n      swapRouter_\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0xd86fe4bdd5027dbe63a137444e902b0e6a93a18b0d1b4243a1839ea62c5d049f\",\"license\":\"MIT\"},\"src/HEROTokenEconomy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./components/erc20/ERC20.sol\\\";\\nimport \\\"./components/Controlled.sol\\\";\\nimport \\\"./libs/MathLib.sol\\\";\\n\\n\\n/**\\n * @title HERO token economy module\\n */\\ncontract HEROTokenEconomy is ERC20, Controlled {\\n  using MathLib for uint256;\\n\\n  struct Fees {\\n    uint256 sender; // percent\\n    uint256 recipient; // percent\\n  }\\n\\n  struct Settings {\\n    Fees lpFees;\\n    Fees rewardsFees;\\n    bool presale;\\n  }\\n\\n  struct Summary {\\n    uint256 totalExcluded;\\n    uint256 totalHolding;\\n    uint256 totalLP;\\n    uint256 totalRewards;\\n    uint256 totalSupply;\\n  }\\n\\n  // defaults\\n  uint256 private constant DEFAULT_TOTAL_SUPPLY = 10000000000 * 10 ** 9; // 10,000,000,000.000000000\\n\\n  Settings public settings;\\n  Summary public summary;\\n\\n  mapping (address => uint256) internal balances;\\n  mapping (address => mapping (address => uint256)) private allowances;\\n  mapping (address => bool) private excluded;\\n\\n  // events\\n\\n  event PresaleFinished();\\n\\n  event Excluded(\\n    address indexed account\\n  );\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor ()\\n    internal\\n    Controlled()\\n  {\\n    //\\n  }\\n\\n  // external functions\\n\\n  function finishPresale()\\n    external\\n    onlyController\\n  {\\n    require(\\n      settings.presale,\\n      \\\"HEROTokenEconomy: presale already finished\\\"\\n    );\\n\\n    settings.presale = false;\\n\\n    emit PresaleFinished();\\n  }\\n\\n  function exclude(\\n    address account\\n  )\\n    external\\n    onlyController\\n  {\\n    _exclude(account);\\n  }\\n\\n  function transfer(\\n    address recipient,\\n    uint256 amount\\n  )\\n    external\\n    override\\n    returns (bool)\\n  {\\n    _transfer(\\n      msg.sender,\\n      recipient,\\n      amount\\n    );\\n\\n    return true;\\n  }\\n\\n  function burn(\\n    uint256 amount\\n  )\\n    external\\n  {\\n    _burn(\\n      msg.sender,\\n      amount\\n    );\\n  }\\n\\n  function approve(\\n    address spender,\\n    uint256 amount\\n  )\\n    external\\n    override\\n    returns (bool)\\n  {\\n    _approve(\\n      msg.sender,\\n      spender,\\n      amount\\n    );\\n\\n    return true;\\n  }\\n\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    external\\n    override\\n    returns (bool)\\n  {\\n    _transfer(\\n      sender,\\n      recipient,\\n      amount\\n    );\\n\\n    uint256 currentAllowance = allowances[sender][msg.sender];\\n\\n    require(\\n      currentAllowance >= amount,\\n      \\\"HEROTokenEconomy: amount exceeds allowance\\\"\\n    );\\n\\n    _approve(\\n      sender,\\n      msg.sender,\\n      currentAllowance.sub(amount)\\n    );\\n\\n    return true;\\n  }\\n\\n  // external functions (views)\\n\\n  function totalSupply()\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return summary.totalSupply;\\n  }\\n\\n  function allowance(\\n    address owner,\\n    address spender\\n  )\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return allowances[owner][spender];\\n  }\\n\\n  function balanceOf(\\n    address account\\n  )\\n    external\\n    view\\n    override\\n    returns (uint256 result)\\n  {\\n    result = balances[account];\\n\\n    if (\\n      !excluded[account] &&\\n      summary.totalRewards != 0\\n    ) {\\n      result = result.add(\\n        summary.totalRewards\\n        .mul(result)\\n        .div(summary.totalHolding)\\n      );\\n    }\\n\\n\\n    return result;\\n  }\\n\\n  // internal functions\\n\\n  function _initializeEconomy(\\n    Fees memory lpFees,\\n    Fees memory rewardsFees,\\n    bool presale,\\n    uint256 totalSupply_,\\n    address[] calldata excluded_\\n  )\\n    internal\\n  {\\n    settings = Settings(\\n      lpFees,\\n      rewardsFees,\\n      presale\\n    );\\n\\n    _mint(\\n      msg.sender,\\n      totalSupply_ == 0\\n      ? DEFAULT_TOTAL_SUPPLY\\n      : totalSupply_\\n    );\\n\\n    {\\n      uint256 excludedLen = excluded_.length;\\n\\n      for (uint256 index = 0; index < excludedLen; index += 1) {\\n        _exclude(excluded_[index]);\\n      }\\n    }\\n  }\\n\\n  function _exclude(\\n    address account\\n  )\\n    internal\\n  {\\n    require(\\n      account != address(0),\\n      \\\"HEROTokenEconomy: account is the zero address\\\"\\n    );\\n\\n    require(\\n      !excluded[account],\\n      \\\"HEROTokenEconomy: account already excluded\\\"\\n    );\\n\\n    require(\\n      balances[account] == 0,\\n      \\\"HEROTokenEconomy: can not exclude holder account\\\"\\n    );\\n\\n    excluded[account] = true;\\n\\n    emit Excluded(\\n      account\\n    );\\n  }\\n\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  )\\n    internal\\n  {\\n    require(\\n      owner != address(0),\\n      \\\"HEROTokenEconomy: owner is the zero address\\\"\\n    );\\n\\n    require(\\n      spender != address(0),\\n      \\\"HEROTokenEconomy: spender is the zero address\\\"\\n    );\\n\\n    allowances[owner][spender] = amount;\\n\\n    emit Approval(\\n      owner,\\n      spender,\\n      amount\\n    );\\n  }\\n\\n  function _mint(\\n    address account,\\n    uint256 amount\\n  )\\n    internal\\n  {\\n    require(\\n      account != address(0),\\n      \\\"HEROTokenEconomy: account is the zero address\\\"\\n    );\\n\\n    require(\\n      amount != 0,\\n      \\\"HEROTokenEconomy: invalid amount\\\"\\n    );\\n\\n    summary.totalSupply = summary.totalSupply.add(amount);\\n    summary.totalExcluded = summary.totalExcluded.add(amount);\\n\\n    _exclude(account);\\n\\n    balances[account] = balances[account].add(amount);\\n\\n    emit Transfer(\\n      address(0),\\n      account,\\n      amount\\n    );\\n  }\\n\\n  function _burn(\\n    address account,\\n    uint256 amount\\n  )\\n    internal\\n  {\\n    require(\\n      account != address(0),\\n      \\\"HEROTokenEconomy: account is the zero address\\\"\\n    );\\n\\n    require(\\n      amount != 0,\\n      \\\"HEROTokenEconomy: invalid amount\\\"\\n    );\\n\\n    require(\\n      balances[account] >= amount,\\n      \\\"HEROTokenEconomy: amount exceeds balance\\\"\\n    );\\n\\n    require(\\n      excluded[account],\\n      \\\"HEROTokenEconomy: can not burn from holder account\\\"\\n    );\\n\\n    summary.totalSupply = summary.totalSupply.sub(amount);\\n    summary.totalExcluded = summary.totalExcluded.sub(amount);\\n\\n    balances[account] = balances[account].sub(amount);\\n\\n    emit Transfer(\\n      account,\\n      address(0),\\n      amount\\n    );\\n  }\\n\\n  function _transfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    internal\\n  {\\n    require(\\n      sender != address(0),\\n      \\\"HEROTokenEconomy: sender is the zero address\\\"\\n    );\\n\\n    require(\\n      recipient != address(0),\\n      \\\"HEROTokenEconomy: recipient is the zero address\\\"\\n    );\\n\\n    require(\\n      sender != recipient,\\n      \\\"HEROTokenEconomy: invalid recipient\\\"\\n    );\\n\\n    require(\\n      amount != 0,\\n      \\\"HEROTokenEconomy: invalid amount\\\"\\n    );\\n\\n    require(\\n      excluded[sender] || !settings.presale,\\n      \\\"HEROTokenEconomy: locked for presale\\\"\\n    );\\n\\n    if (\\n      !excluded[sender] && !excluded[recipient]\\n    ) {\\n      _transferBetweenHolders(\\n        sender,\\n        recipient,\\n        amount\\n      );\\n    } else if (\\n      excluded[sender] && !excluded[recipient]\\n    ) {\\n      _transferFromExcluded(\\n        sender,\\n        recipient,\\n        amount\\n      );\\n    } else if (\\n      !excluded[sender] && excluded[recipient]\\n    ) {\\n      _transferToExcluded(\\n        sender,\\n        recipient,\\n        amount\\n      );\\n    } else {\\n      _transferBetweenExcluded(\\n        sender,\\n        recipient,\\n        amount\\n      );\\n    }\\n\\n    emit Transfer(\\n      sender,\\n      recipient,\\n      amount\\n    );\\n  }\\n\\n  function _transferBetweenHolders(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    internal\\n  {\\n    (\\n      uint256 senderFee,\\n      uint256 lpFee\\n    ) = _calcTransferSenderFees(amount);\\n\\n    uint256 recipientFee;\\n    uint256 totalFee = senderFee;\\n\\n    {\\n      uint256 recipientLPFee;\\n\\n      (\\n        recipientFee,\\n        recipientLPFee\\n      ) = _calcTransferRecipientFees(amount);\\n\\n      lpFee = lpFee.add(recipientLPFee);\\n      totalFee = totalFee.add(recipientFee);\\n    }\\n\\n    uint256 senderAmount = amount.add(senderFee);\\n    uint256 recipientAmount = amount.sub(recipientFee);\\n\\n    if (summary.totalRewards != 0) {\\n      uint256 totalHoldingWithRewards = summary.totalHolding.add(\\n        summary.totalRewards\\n      );\\n\\n      senderAmount = senderAmount.mul(summary.totalHolding).div(\\n        totalHoldingWithRewards\\n      );\\n      recipientAmount = recipientAmount.mul(summary.totalHolding).div(\\n        totalHoldingWithRewards\\n      );\\n      totalFee = totalFee.mul(summary.totalHolding).div(\\n        totalHoldingWithRewards\\n      );\\n    }\\n\\n    require(\\n      balances[sender] >= senderAmount,\\n      \\\"HEROTokenEconomy: amount exceeds balance\\\"\\n    );\\n\\n    balances[sender] = balances[sender].sub(senderAmount);\\n    balances[recipient] = balances[recipient].add(recipientAmount);\\n\\n    summary.totalHolding = summary.totalHolding.sub(totalFee);\\n\\n    _increaseTotalLP(lpFee);\\n    _updateTotalRewards();\\n  }\\n\\n  function _transferFromExcluded(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    internal\\n  {\\n    require(\\n      balances[sender] >= amount,\\n      \\\"HEROTokenEconomy: amount exceeds balance\\\"\\n    );\\n\\n    (\\n      uint256 recipientFee,\\n      uint256 lpFee\\n    ) = _calcTransferSenderFees(amount);\\n\\n    uint256 recipientAmount = amount.sub(recipientFee);\\n\\n    balances[sender] = balances[sender].sub(amount);\\n    balances[recipient] = balances[recipient].add(recipientAmount);\\n\\n    summary.totalExcluded = summary.totalExcluded.sub(amount);\\n    summary.totalHolding = summary.totalHolding.add(recipientAmount);\\n\\n    _increaseTotalLP(lpFee);\\n    _updateTotalRewards();\\n  }\\n\\n  function _transferToExcluded(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    internal\\n  {\\n    (\\n      uint256 senderFee,\\n      uint256 lpFee\\n    ) = _calcTransferSenderFees(amount);\\n\\n    uint256 senderAmount = amount.add(senderFee);\\n\\n    if (summary.totalRewards != 0) {\\n      uint256 totalHoldingWithRewards = summary.totalHolding.add(\\n        summary.totalRewards\\n      );\\n\\n      senderAmount = senderAmount.mul(summary.totalHolding).div(\\n        totalHoldingWithRewards\\n      );\\n    }\\n\\n    require(\\n      balances[sender] >= senderAmount,\\n      \\\"HEROTokenEconomy: amount exceeds balance\\\"\\n    );\\n\\n    balances[sender] = balances[sender].sub(senderAmount);\\n    balances[recipient] = balances[recipient].add(amount);\\n\\n    summary.totalExcluded = summary.totalExcluded.add(amount);\\n    summary.totalHolding = summary.totalHolding.sub(senderAmount);\\n\\n    _increaseTotalLP(lpFee);\\n    _updateTotalRewards();\\n  }\\n\\n  function _transferBetweenExcluded(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    internal\\n  {\\n    require(\\n      balances[sender] >= amount,\\n      \\\"HEROTokenEconomy: amount exceeds balance\\\"\\n    );\\n\\n    balances[sender] = balances[sender].sub(amount);\\n    balances[recipient] = balances[recipient].add(amount);\\n  }\\n\\n  function _increaseTotalLP(\\n    uint256 amount\\n  )\\n    internal\\n    virtual\\n  {\\n    summary.totalLP = summary.totalLP.add(amount);\\n  }\\n\\n  // private functions\\n\\n  function _updateTotalRewards()\\n    private\\n  {\\n    summary.totalRewards = summary.totalSupply\\n    .sub(summary.totalExcluded)\\n    .sub(summary.totalHolding)\\n    .sub(summary.totalLP);\\n  }\\n\\n  // private functions (views)\\n\\n  function _calcRewards(\\n    address account\\n  )\\n    private\\n    view\\n    returns (uint256 result)\\n  {\\n    if (\\n      !excluded[account] &&\\n      summary.totalRewards != 0\\n    ) {\\n      result = summary.totalRewards\\n        .mul(balances[account])\\n        .div(summary.totalHolding);\\n    }\\n\\n    return result;\\n  }\\n\\n  function _calcTransferSenderFees(\\n    uint256 amount\\n  )\\n    private\\n    view\\n    returns (\\n      uint256 totalFee,\\n      uint256 lpFee\\n    )\\n  {\\n    uint256 rewardsFee = amount.percent(settings.rewardsFees.sender);\\n\\n    lpFee = amount.percent(settings.lpFees.sender);\\n    totalFee = lpFee.add(rewardsFee);\\n\\n    return (totalFee, lpFee);\\n  }\\n\\n  function _calcTransferRecipientFees(\\n    uint256 amount\\n  )\\n    private\\n    view\\n    returns (\\n      uint256 totalFee,\\n      uint256 lpFee\\n    )\\n  {\\n    uint256 rewardsFee = amount.percent(settings.rewardsFees.recipient);\\n\\n    lpFee = amount.percent(settings.lpFees.recipient);\\n    totalFee = lpFee.add(rewardsFee);\\n\\n    return (totalFee, lpFee);\\n  }\\n}\\n\",\"keccak256\":\"0xdd1731df72c68e6721dc34fb2944f0be4ca9d0d0e4fe3bc41029d13736ce5f6c\",\"license\":\"MIT\"},\"src/HEROTokenLP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"./external/UniswapV2Factory.sol\\\";\\nimport \\\"./external/UniswapV2Router02.sol\\\";\\nimport \\\"./HEROTokenEconomy.sol\\\";\\n\\n\\n/**\\n * @title HERO token liquidity pool module\\n */\\ncontract HEROTokenLP is HEROTokenEconomy {\\n  UniswapV2Router02 public swapRouter;\\n  address public swapPair;\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor ()\\n    internal\\n    HEROTokenEconomy()\\n  {\\n    //\\n  }\\n\\n  // external functions\\n\\n  receive()\\n    external\\n    payable\\n  {\\n    //\\n  }\\n\\n  // internal functions\\n\\n  function _initializeLP(\\n    address swapRouter_\\n  )\\n    internal\\n  {\\n    swapRouter = UniswapV2Router02(swapRouter_);\\n\\n    swapPair = UniswapV2Factory(swapRouter.factory())\\n    .createPair(\\n      address(this),\\n        swapRouter.WETH()\\n    );\\n\\n    _exclude(address(this));\\n    _exclude(address(swapRouter));\\n    _exclude(swapPair);\\n  }\\n\\n  function _increaseTotalLP(\\n    uint256 amount\\n  )\\n    internal\\n    override\\n  {\\n    if (amount != 0) {\\n      balances[address(this)] = balances[address(this)].add(amount);\\n      summary.totalLP = summary.totalLP.add(amount);\\n\\n      swapAndLiquify(amount);\\n    }\\n  }\\n\\n  // private functions\\n\\n  function swapAndLiquify(\\n    uint256 amount\\n  )\\n    private\\n  {\\n    uint256 half = amount.div(2);\\n    uint256 otherHalf = amount.sub(half);\\n\\n    uint256 initialBalance = address(this).balance;\\n\\n    swapTokensForEth(half);\\n\\n    uint256 newBalance = address(this).balance.sub(initialBalance);\\n\\n    addLiquidity(otherHalf, newBalance);\\n  }\\n\\n  function swapTokensForEth(\\n    uint256 tokenAmount\\n  )\\n    private\\n  {\\n    address[] memory path = new address[](2);\\n\\n    path[0] = address(this);\\n    path[1] = swapRouter.WETH();\\n\\n    _approve(\\n      address(this),\\n      address(swapRouter),\\n      tokenAmount\\n    );\\n\\n    swapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n      tokenAmount,\\n      0,\\n      path,\\n      address(this),\\n      block.timestamp // solhint-disable-line not-rely-on-time\\n    );\\n  }\\n\\n  function addLiquidity(\\n    uint256 tokenAmount,\\n    uint256 ethAmount\\n  )\\n    private\\n  {\\n    _approve(\\n      address(this),\\n      address(swapRouter),\\n      tokenAmount\\n    );\\n\\n    swapRouter.addLiquidityETH{value : ethAmount}(\\n      address(this),\\n      tokenAmount,\\n      0,\\n      0,\\n      address(this),\\n      block.timestamp // solhint-disable-line not-rely-on-time\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0xd42ce2bc4fb02590331d28e85a67c7d500f5261605db42f23b92e3b81ac5dbf2\",\"license\":\"MIT\"},\"src/components/Controlled.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Controlled\\n */\\ncontract Controlled {\\n  address public controller;\\n\\n  // modifiers\\n\\n  modifier onlyController() {\\n    require(\\n      msg.sender == controller,\\n      \\\"Controlled: msg.sender is not the controller\\\"\\n    );\\n\\n    _;\\n  }\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor()\\n    internal\\n  {\\n    controller = msg.sender;\\n  }\\n\\n  // external functions\\n\\n  function setController(\\n    address controller_\\n  )\\n    external\\n    onlyController\\n  {\\n    require(\\n      controller_ != address(0) &&\\n      controller_ != controller,\\n      \\\"Controlled: invalid controller\\\"\\n    );\\n\\n    controller = controller_;\\n  }\\n}\\n\",\"keccak256\":\"0x100923bd931a5556d2bde597175b27da312778f5e8ed0e2669b607c39969b6a2\",\"license\":\"MIT\"},\"src/components/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Initializable\\n */\\ncontract Initializable {\\n  address private initializer;\\n\\n  // events\\n\\n  event Initialized();\\n\\n  // modifiers\\n\\n  modifier onlyInitializer() {\\n    require(\\n      initializer != address(0),\\n      \\\"Initializable: already initialized\\\"\\n    );\\n\\n    require(\\n      msg.sender == initializer,\\n      \\\"Initializable: msg.sender is not the initializer\\\"\\n    );\\n\\n    initializer = address(0);\\n\\n    _;\\n\\n    emit Initialized();\\n  }\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor()\\n    internal\\n  {\\n    initializer = msg.sender;\\n  }\\n\\n  // external functions (views)\\n\\n  function initialized()\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return initializer == address(0);\\n  }\\n}\\n\",\"keccak256\":\"0xa468170351bac18be81cbd4871f1aa46b16b48f8832d12ee97e36ba0bc7a07a2\",\"license\":\"MIT\"},\"src/components/erc20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nabstract contract ERC20 {\\n  // events\\n\\n  event Approval(\\n    address indexed owner,\\n    address indexed spender,\\n    uint256 value\\n  );\\n\\n  event Transfer(\\n    address indexed from,\\n    address indexed to,\\n    uint256 value\\n  );\\n\\n  // external functions\\n\\n  function approve(\\n    address spender,\\n    uint256 value\\n  )\\n    external\\n    virtual\\n    returns (bool);\\n\\n  function transfer(\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    virtual\\n    returns (bool);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    virtual\\n    returns (bool);\\n\\n  // external functions (views)\\n\\n  function totalSupply()\\n    external\\n    view\\n    virtual\\n    returns (uint256);\\n\\n  function balanceOf(\\n    address owner\\n  )\\n    external\\n    view\\n    virtual\\n    returns (uint256);\\n\\n  function allowance(\\n    address owner,\\n    address spender\\n  )\\n    external\\n    view\\n    virtual\\n    returns (uint256);\\n}\\n\",\"keccak256\":\"0xb1e86d26abd67b1299f800f22f520ebce49e7b0f9112cd94312fdabbfce1b82b\",\"license\":\"MIT\"},\"src/components/erc20/ERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\ncontract ERC20Metadata {\\n  struct Metadata {\\n    string name;\\n    string symbol;\\n    uint8 decimals;\\n  }\\n\\n  Metadata private metadata;\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor (\\n    Metadata memory metadata_\\n  )\\n    internal\\n  {\\n    metadata = metadata_;\\n  }\\n\\n  // external functions (views)\\n\\n  function name()\\n    external\\n    view\\n    virtual\\n    returns (string memory)\\n  {\\n    return metadata.name;\\n  }\\n\\n  function symbol()\\n    external\\n    view\\n    virtual\\n    returns (string memory)\\n  {\\n    return metadata.symbol;\\n  }\\n\\n  function decimals()\\n    external\\n    view\\n    virtual\\n    returns (uint8)\\n  {\\n    return metadata.decimals;\\n  }\\n}\\n\",\"keccak256\":\"0x838409846512446e0bdd4a6e49167895280ea0a63645318e0811cae8947cede9\",\"license\":\"MIT\"},\"src/external/UniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\ninterface UniswapV2Factory {\\n  // events\\n\\n  event PairCreated(\\n    address indexed token0,\\n    address indexed token1,\\n    address pair,\\n    uint256\\n  );\\n\\n  // external functions\\n\\n  function createPair(\\n    address tokenA,\\n    address tokenB\\n  )\\n    external\\n    returns (address);\\n\\n  function setFeeTo(\\n    address\\n  )\\n    external;\\n\\n  function setFeeToSetter(\\n    address\\n  )\\n    external;\\n\\n  // external functions (views)\\n\\n  function feeTo()\\n    external\\n    view\\n    returns (address);\\n\\n  function feeToSetter()\\n    external\\n    view\\n    returns (address);\\n\\n  function getPair(\\n    address tokenA,\\n    address tokenB\\n  )\\n    external\\n    view\\n    returns (address);\\n\\n  function allPairs(\\n    uint256\\n  )\\n    external\\n    view\\n    returns (address);\\n\\n  function allPairsLength()\\n    external\\n    view\\n    returns (uint256);\\n}\\n\\n\",\"keccak256\":\"0x11c1c1d08fe44e59afcb84d55cbe36594091a8997c14a5c27a32d72708614f7f\",\"license\":\"MIT\"},\"src/external/UniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable func-name-mixedcase */\\npragma solidity ^0.6.12;\\n\\ninterface UniswapV2Router01 {\\n  // external functions (payable)\\n\\n  function addLiquidityETH(\\n    address token,\\n    uint amountTokenDesired,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    payable\\n    returns (uint, uint, uint);\\n\\n  function swapExactETHForTokens(\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    payable\\n    returns (uint[] memory);\\n\\n  // external functions\\n\\n  function addLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint amountADesired,\\n    uint amountBDesired,\\n    uint amountAMin,\\n    uint amountBMin,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    returns (uint, uint, uint);\\n\\n  function removeLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint liquidity,\\n    uint amountAMin,\\n    uint amountBMin,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    returns (uint, uint);\\n\\n  function removeLiquidityETH(\\n    address token,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    returns (uint, uint);\\n\\n  function removeLiquidityWithPermit(\\n    address tokenA,\\n    address tokenB,\\n    uint liquidity,\\n    uint amountAMin,\\n    uint amountBMin,\\n    address to,\\n    uint deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  )\\n    external\\n    returns (uint, uint);\\n\\n  function removeLiquidityETHWithPermit(\\n    address token,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  )\\n    external\\n    returns (uint, uint);\\n\\n  function swapExactTokensForTokens(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    returns (uint[] memory);\\n\\n  function swapTokensForExactTokens(\\n    uint amountOut,\\n    uint amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    returns (uint[] memory);\\n\\n  function swapTokensForExactETH(\\n    uint amountOut,\\n    uint amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    returns (uint[] memory);\\n\\n  function swapExactTokensForETH(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    returns (uint[] memory);\\n\\n  function swapETHForExactTokens(\\n    uint amountOut,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    payable\\n    returns (uint[] memory);\\n\\n  // external functions (views)\\n\\n  function getAmountsOut(\\n    uint amountIn,\\n    address[] calldata path\\n  )\\n    external\\n    view\\n    returns (uint[] memory);\\n\\n  function getAmountsIn(\\n    uint amountOut,\\n    address[] calldata path\\n  )\\n    external\\n    view\\n    returns (uint[] memory);\\n\\n  // external functions (pure)\\n\\n  function quote(\\n    uint amountA,\\n    uint reserveA,\\n    uint reserveB\\n  )\\n    external\\n    pure\\n    returns (uint);\\n\\n  function getAmountOut(\\n    uint amountIn,\\n    uint reserveIn,\\n    uint reserveOut\\n  )\\n    external\\n    pure\\n    returns (uint);\\n\\n  function getAmountIn(\\n    uint amountOut,\\n    uint reserveIn,\\n    uint reserveOut\\n  )\\n    external\\n    pure\\n    returns (uint);\\n\\n  function factory()\\n    external\\n    pure\\n    returns (address);\\n\\n  function WETH()\\n    external\\n    pure\\n    returns (address);\\n}\\n\",\"keccak256\":\"0x827cd49c4f131ebcb5081aa0daca47cfcfadd24d9a8359cfc79103782b53d9b7\",\"license\":\"MIT\"},\"src/external/UniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"./UniswapV2Router01.sol\\\";\\n\\n\\ninterface UniswapV2Router02 is UniswapV2Router01 {\\n  // external functions (payable)\\n\\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    payable;\\n\\n  // external functions\\n\\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\\n    address token,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    returns (uint);\\n\\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n    address token,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  )\\n    external\\n    returns (uint);\\n\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  )\\n    external;\\n\\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  )\\n    external;\\n}\\n\",\"keccak256\":\"0xd01e20c440b0763163e211898a2881a45b3dca347fc76f8137767fef4bbd8a0b\",\"license\":\"MIT\"},\"src/libs/MathLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Math library\\n */\\nlibrary MathLib {\\n  function add(\\n    uint256 a,\\n    uint256 b\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    uint256 c = a + b;\\n\\n    require(c >= a, \\\"MathLib: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  function sub(\\n    uint256 a,\\n    uint256 b\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    require(b <= a, \\\"MathLib: subtraction overflow\\\");\\n\\n    return a - b;\\n  }\\n\\n  function mul(\\n    uint256 a,\\n    uint256 b\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n\\n    require(c / a == b, \\\"MathLib: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  function div(\\n    uint256 a,\\n    uint256 b\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    require(b != 0, \\\"MathLib: division by zero\\\");\\n\\n    return a / b;\\n  }\\n\\n  function percent(\\n    uint256 a,\\n    uint256 p\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    uint256 result;\\n\\n    if (a != 0 && p != 0) {\\n      result = div(mul(a, p), 100);\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x9c6aa4510ae1773258be1a36de4428fefd5555d797f0f907f4160dd8ec853377\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405180606001604052806040518060400160405280600881526020017f4d4554414845524f00000000000000000000000000000000000000000000000081525081526020016040518060400160405280600481526020017f4845524f000000000000000000000000000000000000000000000000000000008152508152602001600960ff1681525080600080820151816000019080519060200190620000bb92919062000188565b506020820151816001019080519060200190620000da92919062000188565b5060408201518160020160006101000a81548160ff021916908360ff1602179055509050505033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200022e565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001cb57805160ff1916838001178555620001fc565b82800160010185558215620001fc579182015b82811115620001fb578251825591602001919060010190620001de565b5b5090506200020b91906200020f565b5090565b5b808211156200022a57600081600090555060010162000210565b5090565b6144eb806200023e6000396000f3fe6080604052600436106101235760003560e01c80638dc4c3ee116100a0578063b16a867c11610064578063b16a867c146103e0578063c31c9c071461040f578063dd62ed3e1461043a578063e06174e414610477578063f77c4791146104a45761012a565b80638dc4c3ee1461030f57806392eefe9b1461033857806395d89b4114610361578063974654c61461038c578063a9059cbb146103a35761012a565b806326991cc8116100e757806326991cc81461022a578063313ce5671461025557806342966c68146102805780634febf53d146102a957806370a08231146102d25761012a565b806306fdde031461012f578063095ea7b31461015a578063158ef93e1461019757806318160ddd146101c257806323b872dd146101ed5761012a565b3661012a57005b600080fd5b34801561013b57600080fd5b506101446104cf565b6040516101519190613f16565b60405180910390f35b34801561016657600080fd5b50610181600480360381019061017c9190613371565b610573565b60405161018e9190613ee0565b60405180910390f35b3480156101a357600080fd5b506101ac61058a565b6040516101b99190613ee0565b60405180910390f35b3480156101ce57600080fd5b506101d76105e2565b6040516101e4919061422f565b60405180910390f35b3480156101f957600080fd5b50610214600480360381019061020f9190613322565b6105ef565b6040516102219190613ee0565b60405180910390f35b34801561023657600080fd5b5061023f6106e9565b60405161024c9190613e3b565b60405180910390f35b34801561026157600080fd5b5061026a61070f565b60405161027791906142f7565b60405180910390f35b34801561028c57600080fd5b506102a760048036038101906102a2919061347e565b610728565b005b3480156102b557600080fd5b506102d060048036038101906102cb9190613294565b610735565b005b3480156102de57600080fd5b506102f960048036038101906102f49190613294565b6107d1565b604051610306919061422f565b60405180910390f35b34801561031b57600080fd5b50610336600480360381019061033191906133ad565b6108c3565b005b34801561034457600080fd5b5061035f600480360381019061035a9190613294565b610a93565b005b34801561036d57600080fd5b50610376610c31565b6040516103839190613f16565b60405180910390f35b34801561039857600080fd5b506103a1610cd6565b005b3480156103af57600080fd5b506103ca60048036038101906103c59190613371565b610e04565b6040516103d79190613ee0565b60405180910390f35b3480156103ec57600080fd5b506103f5610e1b565b6040516104069594939291906142a4565b60405180910390f35b34801561041b57600080fd5b50610424610e3f565b6040516104319190613efb565b60405180910390f35b34801561044657600080fd5b50610461600480360381019061045c91906132e6565b610e65565b60405161046e919061422f565b60405180910390f35b34801561048357600080fd5b5061048c610eec565b60405161049b939291906141f8565b60405180910390f35b3480156104b057600080fd5b506104b9610f4d565b6040516104c69190613e3b565b60405180910390f35b6060600080018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105695780601f1061053e57610100808354040283529160200191610569565b820191906000526020600020905b81548152906001019060200180831161054c57829003601f168201915b5050505050905090565b6000610580338484610f73565b6001905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905090565b6000600a60040154905090565b60006105fc84848461113e565b6000601060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828110156106c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b7906141d8565b60405180910390fd5b6106dd85336106d8868561161990919063ffffffff16565b610f73565b60019150509392505050565b601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060020160009054906101000a900460ff16905090565b6107323382611669565b50565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107bc90614178565b60405180910390fd5b6107ce8161196c565b50565b6000600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050601160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615801561087557506000600a6003015414155b156108be576108bb6108ac600a6001015461089e84600a60030154611b8990919063ffffffff16565b611c0490919063ffffffff16565b82611c5b90919063ffffffff16565b90505b919050565b600073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610955576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094c906140b8565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109dc906140d8565b60405180910390fd5b6000600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610a5587803603810190610a3b9190613455565b87803603810190610a4c9190613455565b87878787611cb0565b610a5e81611da2565b7f5daa87a0e9463431830481fd4b6e3403442dfb9a12b9c07597e9f61d50b633c860405160405180910390a150505050505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1a90614178565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614158015610bae5750600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b610bed576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be490613f38565b60405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606060006001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ccc5780601f10610ca157610100808354040283529160200191610ccc565b820191906000526020600020905b815481529060010190602001808311610caf57829003601f168201915b5050505050905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5d90614178565b60405180910390fd5b600560040160009054906101000a900460ff16610db8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610daf90613fb8565b60405180910390fd5b6000600560040160006101000a81548160ff0219169083151502179055507f0b5ca8ee9a23a12c9bb341511e83987d73bee14e96dc855aeaea8840c54ea0bd60405160405180910390a1565b6000610e1133848461113e565b6001905092915050565b600a8060000154908060010154908060020154908060030154908060040154905085565b601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000601060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60058060000160405180604001604052908160008201548152602001600182015481525050908060020160405180604001604052908160008201548152602001600182015481525050908060040160009054906101000a900460ff16905083565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610fe3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fda90614118565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611053576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104a90613f98565b60405180910390fd5b80601060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051611131919061422f565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156111ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111a590613ff8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561121e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611215906141b8565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561128d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161128490614098565b60405180910390fd5b60008114156112d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c890614198565b60405180910390fd5b601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16806113395750600560040160009054906101000a900460ff16155b611378576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136f90614158565b60405180910390fd5b601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615801561141c5750601160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b156114315761142c838383612050565b6115af565b601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1680156114d45750601160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b156114e9576114e483838361236f565b6115ae565b601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615801561158c5750601160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b156115a15761159c83838361259d565b6115ad565b6115ac838383612827565b5b5b5b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161160c919061422f565b60405180910390a3505050565b60008282111561165e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161165590613fd8565b60405180910390fd5b818303905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156116d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116d090614138565b60405180910390fd5b600081141561171d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161171490614198565b60405180910390fd5b80600f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561179f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179690614058565b60405180910390fd5b601160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661182b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611822906140f8565b60405180910390fd5b61184381600a6004015461161990919063ffffffff16565b600a6004018190555061186481600a6000015461161990919063ffffffff16565b600a600001819055506118bf81600f60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461161990919063ffffffff16565b600f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611960919061422f565b60405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156119dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119d390614138565b60405180910390fd5b601160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611a69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a6090614078565b60405180910390fd5b6000600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414611aeb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ae290614018565b60405180910390fd5b6001601160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167f687393afd4a22af144243b91668410864a0f0098b8d0ce0d912df1388ed92a3e60405160405180910390a250565b600080831480611b995750600082145b15611ba75760009050611bfe565b6000828402905082848281611bb857fe5b0414611bf9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bf090613f58565b60405180910390fd5b809150505b92915050565b600080821415611c49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c4090614038565b60405180910390fd5b818381611c5257fe5b04905092915050565b600080828401905083811015611ca6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c9d90613f78565b60405180910390fd5b8091505092915050565b60405180606001604052808781526020018681526020018515158152506005600082015181600001600082015181600001556020820151816001015550506020820151816002016000820151816000015560208201518160010155505060408201518160040160006101000a81548160ff021916908315150217905550905050611d513360008514611d425784611d4c565b678ac7230489e800005b6129d8565b600082829050905060005b81811015611d9857611d8d848483818110611d7357fe5b9050602002016020810190611d889190613294565b61196c565b600181019050611d5c565b5050505050505050565b80601260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015611e4b57600080fd5b505afa158015611e5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e8391906132bd565b73ffffffffffffffffffffffffffffffffffffffff1663c9c6539630601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b158015611f0757600080fd5b505afa158015611f1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f3f91906132bd565b6040518363ffffffff1660e01b8152600401611f5c929190613e56565b602060405180830381600087803b158015611f7657600080fd5b505af1158015611f8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fae91906132bd565b601360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611ff73061196c565b612022601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661196c565b61204d601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661196c565b50565b60008061205c83612bd6565b91509150600080839050600061207186612c30565b809250819450505061208c8185611c5b90919063ffffffff16565b93506120a18383611c5b90919063ffffffff16565b91505060006120b98587611c5b90919063ffffffff16565b905060006120d0848861161990919063ffffffff16565b90506000600a60030154146121865760006120fe600a60030154600a60010154611c5b90919063ffffffff16565b905061212a8161211c600a6001015486611b8990919063ffffffff16565b611c0490919063ffffffff16565b925061215681612148600a6001015485611b8990919063ffffffff16565b611c0490919063ffffffff16565b915061218281612174600a6001015487611b8990919063ffffffff16565b611c0490919063ffffffff16565b9350505b81600f60008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015612208576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121ff90614058565b60405180910390fd5b61225a82600f60008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461161990919063ffffffff16565b600f60008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506122ef81600f60008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c5b90919063ffffffff16565b600f60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061234a83600a6001015461161990919063ffffffff16565b600a6001018190555061235c85612c8a565b612364612d55565b505050505050505050565b80600f60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156123f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123e890614058565b60405180910390fd5b6000806123fd83612bd6565b915091506000612416838561161990919063ffffffff16565b905061246a84600f60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461161990919063ffffffff16565b600f60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506124ff81600f60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c5b90919063ffffffff16565b600f60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061255a84600a6000015461161990919063ffffffff16565b600a6000018190555061257b81600a60010154611c5b90919063ffffffff16565b600a6001018190555061258d82612c8a565b612595612d55565b505050505050565b6000806125a983612bd6565b9150915060006125c28385611c5b90919063ffffffff16565b90506000600a60030154146126205760006125f0600a60030154600a60010154611c5b90919063ffffffff16565b905061261c8161260e600a6001015485611b8990919063ffffffff16565b611c0490919063ffffffff16565b9150505b80600f60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156126a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161269990614058565b60405180910390fd5b6126f481600f60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461161990919063ffffffff16565b600f60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061278984600f60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c5b90919063ffffffff16565b600f60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506127e484600a60000154611c5b90919063ffffffff16565b600a6000018190555061280581600a6001015461161990919063ffffffff16565b600a6001018190555061281782612c8a565b61281f612d55565b505050505050565b80600f60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156128a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128a090614058565b60405180910390fd5b6128fb81600f60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461161990919063ffffffff16565b600f60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061299081600f60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c5b90919063ffffffff16565b600f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612a48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a3f90614138565b60405180910390fd5b6000811415612a8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a8390614198565b60405180910390fd5b612aa481600a60040154611c5b90919063ffffffff16565b600a60040181905550612ac581600a60000154611c5b90919063ffffffff16565b600a60000181905550612ad78261196c565b612b2981600f60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c5b90919063ffffffff16565b600f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051612bca919061422f565b60405180910390a35050565b6000806000612bf660056002016000015485612dab90919063ffffffff16565b9050612c1360056000016000015485612dab90919063ffffffff16565b9150612c288183611c5b90919063ffffffff16565b925050915091565b6000806000612c5060056002016001015485612dab90919063ffffffff16565b9050612c6d60056000016001015485612dab90919063ffffffff16565b9150612c828183611c5b90919063ffffffff16565b925050915091565b60008114612d5257612ce481600f60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c5b90919063ffffffff16565b600f60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612d3f81600a60020154611c5b90919063ffffffff16565b600a60020181905550612d5181612de6565b5b50565b612da0600a60020154612d92600a60010154612d84600a60000154600a6004015461161990919063ffffffff16565b61161990919063ffffffff16565b61161990919063ffffffff16565b600a60030181905550565b60008060008414158015612dc0575060008314155b15612ddc57612dd9612dd28585611b89565b6064611c04565b90505b8091505092915050565b6000612dfc600283611c0490919063ffffffff16565b90506000612e13828461161990919063ffffffff16565b90506000479050612e2383612e4b565b6000612e38824761161990919063ffffffff16565b9050612e44838261308d565b5050505050565b6060600267ffffffffffffffff81118015612e6557600080fd5b50604051908082528060200260200182016040528015612e945781602001602082028036833780820191505090505b5090503081600081518110612ea557fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b158015612f4757600080fd5b505afa158015612f5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f7f91906132bd565b81600181518110612f8c57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050612ff330601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684610f73565b601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663791ac9478360008430426040518663ffffffff1660e01b815260040161305795949392919061424a565b600060405180830381600087803b15801561307157600080fd5b505af1158015613085573d6000803e3d6000fd5b505050505050565b6130ba30601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684610f73565b601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f305d71982308560008030426040518863ffffffff1660e01b815260040161312196959493929190613e7f565b6060604051808303818588803b15801561313a57600080fd5b505af115801561314e573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061317391906134a7565b5050505050565b60008135905061318981614499565b92915050565b60008151905061319e81614499565b92915050565b60008083601f8401126131b657600080fd5b8235905067ffffffffffffffff8111156131cf57600080fd5b6020830191508360208202830111156131e757600080fd5b9250929050565b6000813590506131fd816144b0565b92915050565b60006040828403121561321557600080fd5b81905092915050565b60006040828403121561323057600080fd5b61323a6040614312565b9050600061324a8482850161326a565b600083015250602061325e8482850161326a565b60208301525092915050565b600081359050613279816144c7565b92915050565b60008151905061328e816144c7565b92915050565b6000602082840312156132a657600080fd5b60006132b48482850161317a565b91505092915050565b6000602082840312156132cf57600080fd5b60006132dd8482850161318f565b91505092915050565b600080604083850312156132f957600080fd5b60006133078582860161317a565b92505060206133188582860161317a565b9150509250929050565b60008060006060848603121561333757600080fd5b60006133458682870161317a565b93505060206133568682870161317a565b92505060406133678682870161326a565b9150509250925092565b6000806040838503121561338457600080fd5b60006133928582860161317a565b92505060206133a38582860161326a565b9150509250929050565b6000806000806000806000610100888a0312156133c957600080fd5b60006133d78a828b01613203565b97505060406133e88a828b01613203565b96505060806133f98a828b016131ee565b95505060a061340a8a828b0161326a565b94505060c088013567ffffffffffffffff81111561342757600080fd5b6134338a828b016131a4565b935093505060e06134468a828b0161317a565b91505092959891949750929550565b60006040828403121561346757600080fd5b60006134758482850161321e565b91505092915050565b60006020828403121561349057600080fd5b600061349e8482850161326a565b91505092915050565b6000806000606084860312156134bc57600080fd5b60006134ca8682870161327f565b93505060206134db8682870161327f565b92505060406134ec8682870161327f565b9150509250925092565b6000613502838361351d565b60208301905092915050565b613517816143e9565b82525050565b61352681614394565b82525050565b61353581614394565b82525050565b60006135468261434f565b6135508185614372565b935061355b8361433f565b8060005b8381101561358c57815161357388826134f6565b975061357e83614365565b92505060018101905061355f565b5085935050505092915050565b6135a2816143a6565b82525050565b6135b1816143fb565b82525050565b6135c08161441f565b82525050565b60006135d18261435a565b6135db8185614383565b93506135eb818560208601614455565b6135f481614488565b840191505092915050565b600061360c601e83614383565b91507f436f6e74726f6c6c65643a20696e76616c696420636f6e74726f6c6c657200006000830152602082019050919050565b600061364c602083614383565b91507f4d6174684c69623a206d756c7469706c69636174696f6e206f766572666c6f776000830152602082019050919050565b600061368c601a83614383565b91507f4d6174684c69623a206164646974696f6e206f766572666c6f770000000000006000830152602082019050919050565b60006136cc602d83614383565b91507f4845524f546f6b656e45636f6e6f6d793a207370656e6465722069732074686560008301527f207a65726f2061646472657373000000000000000000000000000000000000006020830152604082019050919050565b6000613732602a83614383565b91507f4845524f546f6b656e45636f6e6f6d793a2070726573616c6520616c7265616460008301527f792066696e6973686564000000000000000000000000000000000000000000006020830152604082019050919050565b6000613798601d83614383565b91507f4d6174684c69623a207375627472616374696f6e206f766572666c6f770000006000830152602082019050919050565b60006137d8602c83614383565b91507f4845524f546f6b656e45636f6e6f6d793a2073656e646572206973207468652060008301527f7a65726f206164647265737300000000000000000000000000000000000000006020830152604082019050919050565b600061383e603083614383565b91507f4845524f546f6b656e45636f6e6f6d793a2063616e206e6f74206578636c756460008301527f6520686f6c646572206163636f756e74000000000000000000000000000000006020830152604082019050919050565b60006138a4601983614383565b91507f4d6174684c69623a206469766973696f6e206279207a65726f000000000000006000830152602082019050919050565b60006138e4602883614383565b91507f4845524f546f6b656e45636f6e6f6d793a20616d6f756e74206578636565647360008301527f2062616c616e63650000000000000000000000000000000000000000000000006020830152604082019050919050565b600061394a602a83614383565b91507f4845524f546f6b656e45636f6e6f6d793a206163636f756e7420616c7265616460008301527f79206578636c75646564000000000000000000000000000000000000000000006020830152604082019050919050565b60006139b0602383614383565b91507f4845524f546f6b656e45636f6e6f6d793a20696e76616c69642072656369706960008301527f656e7400000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613a16602283614383565b91507f496e697469616c697a61626c653a20616c726561647920696e697469616c697a60008301527f65640000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613a7c603083614383565b91507f496e697469616c697a61626c653a206d73672e73656e646572206973206e6f7460008301527f2074686520696e697469616c697a6572000000000000000000000000000000006020830152604082019050919050565b6000613ae2603283614383565b91507f4845524f546f6b656e45636f6e6f6d793a2063616e206e6f74206275726e206660008301527f726f6d20686f6c646572206163636f756e7400000000000000000000000000006020830152604082019050919050565b6000613b48602b83614383565b91507f4845524f546f6b656e45636f6e6f6d793a206f776e657220697320746865207a60008301527f65726f20616464726573730000000000000000000000000000000000000000006020830152604082019050919050565b6000613bae602d83614383565b91507f4845524f546f6b656e45636f6e6f6d793a206163636f756e742069732074686560008301527f207a65726f2061646472657373000000000000000000000000000000000000006020830152604082019050919050565b6000613c14602483614383565b91507f4845524f546f6b656e45636f6e6f6d793a206c6f636b656420666f722070726560008301527f73616c65000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613c7a602c83614383565b91507f436f6e74726f6c6c65643a206d73672e73656e646572206973206e6f7420746860008301527f6520636f6e74726f6c6c657200000000000000000000000000000000000000006020830152604082019050919050565b6000613ce0602083614383565b91507f4845524f546f6b656e45636f6e6f6d793a20696e76616c696420616d6f756e746000830152602082019050919050565b6000613d20602f83614383565b91507f4845524f546f6b656e45636f6e6f6d793a20726563697069656e74206973207460008301527f6865207a65726f206164647265737300000000000000000000000000000000006020830152604082019050919050565b6000613d86602a83614383565b91507f4845524f546f6b656e45636f6e6f6d793a20616d6f756e74206578636565647360008301527f20616c6c6f77616e6365000000000000000000000000000000000000000000006020830152604082019050919050565b604082016000820151613df56000850182613e0e565b506020820151613e086020850182613e0e565b50505050565b613e17816143d2565b82525050565b613e26816143d2565b82525050565b613e35816143dc565b82525050565b6000602082019050613e50600083018461352c565b92915050565b6000604082019050613e6b600083018561350e565b613e78602083018461352c565b9392505050565b600060c082019050613e94600083018961350e565b613ea16020830188613e1d565b613eae60408301876135b7565b613ebb60608301866135b7565b613ec8608083018561350e565b613ed560a0830184613e1d565b979650505050505050565b6000602082019050613ef56000830184613599565b92915050565b6000602082019050613f1060008301846135a8565b92915050565b60006020820190508181036000830152613f3081846135c6565b905092915050565b60006020820190508181036000830152613f51816135ff565b9050919050565b60006020820190508181036000830152613f718161363f565b9050919050565b60006020820190508181036000830152613f918161367f565b9050919050565b60006020820190508181036000830152613fb1816136bf565b9050919050565b60006020820190508181036000830152613fd181613725565b9050919050565b60006020820190508181036000830152613ff18161378b565b9050919050565b60006020820190508181036000830152614011816137cb565b9050919050565b6000602082019050818103600083015261403181613831565b9050919050565b6000602082019050818103600083015261405181613897565b9050919050565b60006020820190508181036000830152614071816138d7565b9050919050565b600060208201905081810360008301526140918161393d565b9050919050565b600060208201905081810360008301526140b1816139a3565b9050919050565b600060208201905081810360008301526140d181613a09565b9050919050565b600060208201905081810360008301526140f181613a6f565b9050919050565b6000602082019050818103600083015261411181613ad5565b9050919050565b6000602082019050818103600083015261413181613b3b565b9050919050565b6000602082019050818103600083015261415181613ba1565b9050919050565b6000602082019050818103600083015261417181613c07565b9050919050565b6000602082019050818103600083015261419181613c6d565b9050919050565b600060208201905081810360008301526141b181613cd3565b9050919050565b600060208201905081810360008301526141d181613d13565b9050919050565b600060208201905081810360008301526141f181613d79565b9050919050565b600060a08201905061420d6000830186613ddf565b61421a6040830185613ddf565b6142276080830184613599565b949350505050565b60006020820190506142446000830184613e1d565b92915050565b600060a08201905061425f6000830188613e1d565b61426c60208301876135b7565b818103604083015261427e818661353b565b905061428d606083018561350e565b61429a6080830184613e1d565b9695505050505050565b600060a0820190506142b96000830188613e1d565b6142c66020830187613e1d565b6142d36040830186613e1d565b6142e06060830185613e1d565b6142ed6080830184613e1d565b9695505050505050565b600060208201905061430c6000830184613e2c565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561433557600080fd5b8060405250919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600061439f826143b2565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006143f482614431565b9050919050565b60006144068261440d565b9050919050565b6000614418826143b2565b9050919050565b600061442a826143d2565b9050919050565b600061443c82614443565b9050919050565b600061444e826143b2565b9050919050565b60005b83811015614473578082015181840152602081019050614458565b83811115614482576000848401525b50505050565b6000601f19601f8301169050919050565b6144a281614394565b81146144ad57600080fd5b50565b6144b9816143a6565b81146144c457600080fd5b50565b6144d0816143d2565b81146144db57600080fd5b5056fea164736f6c634300060c000a",
  "deployedBytecode": "0x6080604052600436106101235760003560e01c80638dc4c3ee116100a0578063b16a867c11610064578063b16a867c146103e0578063c31c9c071461040f578063dd62ed3e1461043a578063e06174e414610477578063f77c4791146104a45761012a565b80638dc4c3ee1461030f57806392eefe9b1461033857806395d89b4114610361578063974654c61461038c578063a9059cbb146103a35761012a565b806326991cc8116100e757806326991cc81461022a578063313ce5671461025557806342966c68146102805780634febf53d146102a957806370a08231146102d25761012a565b806306fdde031461012f578063095ea7b31461015a578063158ef93e1461019757806318160ddd146101c257806323b872dd146101ed5761012a565b3661012a57005b600080fd5b34801561013b57600080fd5b506101446104cf565b6040516101519190613f16565b60405180910390f35b34801561016657600080fd5b50610181600480360381019061017c9190613371565b610573565b60405161018e9190613ee0565b60405180910390f35b3480156101a357600080fd5b506101ac61058a565b6040516101b99190613ee0565b60405180910390f35b3480156101ce57600080fd5b506101d76105e2565b6040516101e4919061422f565b60405180910390f35b3480156101f957600080fd5b50610214600480360381019061020f9190613322565b6105ef565b6040516102219190613ee0565b60405180910390f35b34801561023657600080fd5b5061023f6106e9565b60405161024c9190613e3b565b60405180910390f35b34801561026157600080fd5b5061026a61070f565b60405161027791906142f7565b60405180910390f35b34801561028c57600080fd5b506102a760048036038101906102a2919061347e565b610728565b005b3480156102b557600080fd5b506102d060048036038101906102cb9190613294565b610735565b005b3480156102de57600080fd5b506102f960048036038101906102f49190613294565b6107d1565b604051610306919061422f565b60405180910390f35b34801561031b57600080fd5b50610336600480360381019061033191906133ad565b6108c3565b005b34801561034457600080fd5b5061035f600480360381019061035a9190613294565b610a93565b005b34801561036d57600080fd5b50610376610c31565b6040516103839190613f16565b60405180910390f35b34801561039857600080fd5b506103a1610cd6565b005b3480156103af57600080fd5b506103ca60048036038101906103c59190613371565b610e04565b6040516103d79190613ee0565b60405180910390f35b3480156103ec57600080fd5b506103f5610e1b565b6040516104069594939291906142a4565b60405180910390f35b34801561041b57600080fd5b50610424610e3f565b6040516104319190613efb565b60405180910390f35b34801561044657600080fd5b50610461600480360381019061045c91906132e6565b610e65565b60405161046e919061422f565b60405180910390f35b34801561048357600080fd5b5061048c610eec565b60405161049b939291906141f8565b60405180910390f35b3480156104b057600080fd5b506104b9610f4d565b6040516104c69190613e3b565b60405180910390f35b6060600080018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105695780601f1061053e57610100808354040283529160200191610569565b820191906000526020600020905b81548152906001019060200180831161054c57829003601f168201915b5050505050905090565b6000610580338484610f73565b6001905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905090565b6000600a60040154905090565b60006105fc84848461113e565b6000601060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828110156106c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b7906141d8565b60405180910390fd5b6106dd85336106d8868561161990919063ffffffff16565b610f73565b60019150509392505050565b601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060020160009054906101000a900460ff16905090565b6107323382611669565b50565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107bc90614178565b60405180910390fd5b6107ce8161196c565b50565b6000600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050601160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615801561087557506000600a6003015414155b156108be576108bb6108ac600a6001015461089e84600a60030154611b8990919063ffffffff16565b611c0490919063ffffffff16565b82611c5b90919063ffffffff16565b90505b919050565b600073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610955576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094c906140b8565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109dc906140d8565b60405180910390fd5b6000600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610a5587803603810190610a3b9190613455565b87803603810190610a4c9190613455565b87878787611cb0565b610a5e81611da2565b7f5daa87a0e9463431830481fd4b6e3403442dfb9a12b9c07597e9f61d50b633c860405160405180910390a150505050505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1a90614178565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614158015610bae5750600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b610bed576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be490613f38565b60405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606060006001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ccc5780601f10610ca157610100808354040283529160200191610ccc565b820191906000526020600020905b815481529060010190602001808311610caf57829003601f168201915b5050505050905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5d90614178565b60405180910390fd5b600560040160009054906101000a900460ff16610db8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610daf90613fb8565b60405180910390fd5b6000600560040160006101000a81548160ff0219169083151502179055507f0b5ca8ee9a23a12c9bb341511e83987d73bee14e96dc855aeaea8840c54ea0bd60405160405180910390a1565b6000610e1133848461113e565b6001905092915050565b600a8060000154908060010154908060020154908060030154908060040154905085565b601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000601060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60058060000160405180604001604052908160008201548152602001600182015481525050908060020160405180604001604052908160008201548152602001600182015481525050908060040160009054906101000a900460ff16905083565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610fe3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fda90614118565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611053576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104a90613f98565b60405180910390fd5b80601060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051611131919061422f565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156111ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111a590613ff8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561121e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611215906141b8565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561128d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161128490614098565b60405180910390fd5b60008114156112d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c890614198565b60405180910390fd5b601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16806113395750600560040160009054906101000a900460ff16155b611378576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136f90614158565b60405180910390fd5b601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615801561141c5750601160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b156114315761142c838383612050565b6115af565b601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1680156114d45750601160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b156114e9576114e483838361236f565b6115ae565b601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615801561158c5750601160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b156115a15761159c83838361259d565b6115ad565b6115ac838383612827565b5b5b5b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161160c919061422f565b60405180910390a3505050565b60008282111561165e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161165590613fd8565b60405180910390fd5b818303905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156116d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116d090614138565b60405180910390fd5b600081141561171d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161171490614198565b60405180910390fd5b80600f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561179f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179690614058565b60405180910390fd5b601160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661182b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611822906140f8565b60405180910390fd5b61184381600a6004015461161990919063ffffffff16565b600a6004018190555061186481600a6000015461161990919063ffffffff16565b600a600001819055506118bf81600f60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461161990919063ffffffff16565b600f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611960919061422f565b60405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156119dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119d390614138565b60405180910390fd5b601160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611a69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a6090614078565b60405180910390fd5b6000600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414611aeb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ae290614018565b60405180910390fd5b6001601160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167f687393afd4a22af144243b91668410864a0f0098b8d0ce0d912df1388ed92a3e60405160405180910390a250565b600080831480611b995750600082145b15611ba75760009050611bfe565b6000828402905082848281611bb857fe5b0414611bf9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bf090613f58565b60405180910390fd5b809150505b92915050565b600080821415611c49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c4090614038565b60405180910390fd5b818381611c5257fe5b04905092915050565b600080828401905083811015611ca6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c9d90613f78565b60405180910390fd5b8091505092915050565b60405180606001604052808781526020018681526020018515158152506005600082015181600001600082015181600001556020820151816001015550506020820151816002016000820151816000015560208201518160010155505060408201518160040160006101000a81548160ff021916908315150217905550905050611d513360008514611d425784611d4c565b678ac7230489e800005b6129d8565b600082829050905060005b81811015611d9857611d8d848483818110611d7357fe5b9050602002016020810190611d889190613294565b61196c565b600181019050611d5c565b5050505050505050565b80601260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015611e4b57600080fd5b505afa158015611e5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e8391906132bd565b73ffffffffffffffffffffffffffffffffffffffff1663c9c6539630601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b158015611f0757600080fd5b505afa158015611f1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f3f91906132bd565b6040518363ffffffff1660e01b8152600401611f5c929190613e56565b602060405180830381600087803b158015611f7657600080fd5b505af1158015611f8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fae91906132bd565b601360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611ff73061196c565b612022601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661196c565b61204d601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661196c565b50565b60008061205c83612bd6565b91509150600080839050600061207186612c30565b809250819450505061208c8185611c5b90919063ffffffff16565b93506120a18383611c5b90919063ffffffff16565b91505060006120b98587611c5b90919063ffffffff16565b905060006120d0848861161990919063ffffffff16565b90506000600a60030154146121865760006120fe600a60030154600a60010154611c5b90919063ffffffff16565b905061212a8161211c600a6001015486611b8990919063ffffffff16565b611c0490919063ffffffff16565b925061215681612148600a6001015485611b8990919063ffffffff16565b611c0490919063ffffffff16565b915061218281612174600a6001015487611b8990919063ffffffff16565b611c0490919063ffffffff16565b9350505b81600f60008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015612208576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121ff90614058565b60405180910390fd5b61225a82600f60008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461161990919063ffffffff16565b600f60008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506122ef81600f60008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c5b90919063ffffffff16565b600f60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061234a83600a6001015461161990919063ffffffff16565b600a6001018190555061235c85612c8a565b612364612d55565b505050505050505050565b80600f60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156123f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123e890614058565b60405180910390fd5b6000806123fd83612bd6565b915091506000612416838561161990919063ffffffff16565b905061246a84600f60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461161990919063ffffffff16565b600f60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506124ff81600f60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c5b90919063ffffffff16565b600f60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061255a84600a6000015461161990919063ffffffff16565b600a6000018190555061257b81600a60010154611c5b90919063ffffffff16565b600a6001018190555061258d82612c8a565b612595612d55565b505050505050565b6000806125a983612bd6565b9150915060006125c28385611c5b90919063ffffffff16565b90506000600a60030154146126205760006125f0600a60030154600a60010154611c5b90919063ffffffff16565b905061261c8161260e600a6001015485611b8990919063ffffffff16565b611c0490919063ffffffff16565b9150505b80600f60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156126a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161269990614058565b60405180910390fd5b6126f481600f60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461161990919063ffffffff16565b600f60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061278984600f60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c5b90919063ffffffff16565b600f60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506127e484600a60000154611c5b90919063ffffffff16565b600a6000018190555061280581600a6001015461161990919063ffffffff16565b600a6001018190555061281782612c8a565b61281f612d55565b505050505050565b80600f60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156128a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128a090614058565b60405180910390fd5b6128fb81600f60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461161990919063ffffffff16565b600f60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061299081600f60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c5b90919063ffffffff16565b600f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612a48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a3f90614138565b60405180910390fd5b6000811415612a8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a8390614198565b60405180910390fd5b612aa481600a60040154611c5b90919063ffffffff16565b600a60040181905550612ac581600a60000154611c5b90919063ffffffff16565b600a60000181905550612ad78261196c565b612b2981600f60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c5b90919063ffffffff16565b600f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051612bca919061422f565b60405180910390a35050565b6000806000612bf660056002016000015485612dab90919063ffffffff16565b9050612c1360056000016000015485612dab90919063ffffffff16565b9150612c288183611c5b90919063ffffffff16565b925050915091565b6000806000612c5060056002016001015485612dab90919063ffffffff16565b9050612c6d60056000016001015485612dab90919063ffffffff16565b9150612c828183611c5b90919063ffffffff16565b925050915091565b60008114612d5257612ce481600f60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c5b90919063ffffffff16565b600f60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612d3f81600a60020154611c5b90919063ffffffff16565b600a60020181905550612d5181612de6565b5b50565b612da0600a60020154612d92600a60010154612d84600a60000154600a6004015461161990919063ffffffff16565b61161990919063ffffffff16565b61161990919063ffffffff16565b600a60030181905550565b60008060008414158015612dc0575060008314155b15612ddc57612dd9612dd28585611b89565b6064611c04565b90505b8091505092915050565b6000612dfc600283611c0490919063ffffffff16565b90506000612e13828461161990919063ffffffff16565b90506000479050612e2383612e4b565b6000612e38824761161990919063ffffffff16565b9050612e44838261308d565b5050505050565b6060600267ffffffffffffffff81118015612e6557600080fd5b50604051908082528060200260200182016040528015612e945781602001602082028036833780820191505090505b5090503081600081518110612ea557fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b158015612f4757600080fd5b505afa158015612f5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f7f91906132bd565b81600181518110612f8c57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050612ff330601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684610f73565b601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663791ac9478360008430426040518663ffffffff1660e01b815260040161305795949392919061424a565b600060405180830381600087803b15801561307157600080fd5b505af1158015613085573d6000803e3d6000fd5b505050505050565b6130ba30601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684610f73565b601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f305d71982308560008030426040518863ffffffff1660e01b815260040161312196959493929190613e7f565b6060604051808303818588803b15801561313a57600080fd5b505af115801561314e573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061317391906134a7565b5050505050565b60008135905061318981614499565b92915050565b60008151905061319e81614499565b92915050565b60008083601f8401126131b657600080fd5b8235905067ffffffffffffffff8111156131cf57600080fd5b6020830191508360208202830111156131e757600080fd5b9250929050565b6000813590506131fd816144b0565b92915050565b60006040828403121561321557600080fd5b81905092915050565b60006040828403121561323057600080fd5b61323a6040614312565b9050600061324a8482850161326a565b600083015250602061325e8482850161326a565b60208301525092915050565b600081359050613279816144c7565b92915050565b60008151905061328e816144c7565b92915050565b6000602082840312156132a657600080fd5b60006132b48482850161317a565b91505092915050565b6000602082840312156132cf57600080fd5b60006132dd8482850161318f565b91505092915050565b600080604083850312156132f957600080fd5b60006133078582860161317a565b92505060206133188582860161317a565b9150509250929050565b60008060006060848603121561333757600080fd5b60006133458682870161317a565b93505060206133568682870161317a565b92505060406133678682870161326a565b9150509250925092565b6000806040838503121561338457600080fd5b60006133928582860161317a565b92505060206133a38582860161326a565b9150509250929050565b6000806000806000806000610100888a0312156133c957600080fd5b60006133d78a828b01613203565b97505060406133e88a828b01613203565b96505060806133f98a828b016131ee565b95505060a061340a8a828b0161326a565b94505060c088013567ffffffffffffffff81111561342757600080fd5b6134338a828b016131a4565b935093505060e06134468a828b0161317a565b91505092959891949750929550565b60006040828403121561346757600080fd5b60006134758482850161321e565b91505092915050565b60006020828403121561349057600080fd5b600061349e8482850161326a565b91505092915050565b6000806000606084860312156134bc57600080fd5b60006134ca8682870161327f565b93505060206134db8682870161327f565b92505060406134ec8682870161327f565b9150509250925092565b6000613502838361351d565b60208301905092915050565b613517816143e9565b82525050565b61352681614394565b82525050565b61353581614394565b82525050565b60006135468261434f565b6135508185614372565b935061355b8361433f565b8060005b8381101561358c57815161357388826134f6565b975061357e83614365565b92505060018101905061355f565b5085935050505092915050565b6135a2816143a6565b82525050565b6135b1816143fb565b82525050565b6135c08161441f565b82525050565b60006135d18261435a565b6135db8185614383565b93506135eb818560208601614455565b6135f481614488565b840191505092915050565b600061360c601e83614383565b91507f436f6e74726f6c6c65643a20696e76616c696420636f6e74726f6c6c657200006000830152602082019050919050565b600061364c602083614383565b91507f4d6174684c69623a206d756c7469706c69636174696f6e206f766572666c6f776000830152602082019050919050565b600061368c601a83614383565b91507f4d6174684c69623a206164646974696f6e206f766572666c6f770000000000006000830152602082019050919050565b60006136cc602d83614383565b91507f4845524f546f6b656e45636f6e6f6d793a207370656e6465722069732074686560008301527f207a65726f2061646472657373000000000000000000000000000000000000006020830152604082019050919050565b6000613732602a83614383565b91507f4845524f546f6b656e45636f6e6f6d793a2070726573616c6520616c7265616460008301527f792066696e6973686564000000000000000000000000000000000000000000006020830152604082019050919050565b6000613798601d83614383565b91507f4d6174684c69623a207375627472616374696f6e206f766572666c6f770000006000830152602082019050919050565b60006137d8602c83614383565b91507f4845524f546f6b656e45636f6e6f6d793a2073656e646572206973207468652060008301527f7a65726f206164647265737300000000000000000000000000000000000000006020830152604082019050919050565b600061383e603083614383565b91507f4845524f546f6b656e45636f6e6f6d793a2063616e206e6f74206578636c756460008301527f6520686f6c646572206163636f756e74000000000000000000000000000000006020830152604082019050919050565b60006138a4601983614383565b91507f4d6174684c69623a206469766973696f6e206279207a65726f000000000000006000830152602082019050919050565b60006138e4602883614383565b91507f4845524f546f6b656e45636f6e6f6d793a20616d6f756e74206578636565647360008301527f2062616c616e63650000000000000000000000000000000000000000000000006020830152604082019050919050565b600061394a602a83614383565b91507f4845524f546f6b656e45636f6e6f6d793a206163636f756e7420616c7265616460008301527f79206578636c75646564000000000000000000000000000000000000000000006020830152604082019050919050565b60006139b0602383614383565b91507f4845524f546f6b656e45636f6e6f6d793a20696e76616c69642072656369706960008301527f656e7400000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613a16602283614383565b91507f496e697469616c697a61626c653a20616c726561647920696e697469616c697a60008301527f65640000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613a7c603083614383565b91507f496e697469616c697a61626c653a206d73672e73656e646572206973206e6f7460008301527f2074686520696e697469616c697a6572000000000000000000000000000000006020830152604082019050919050565b6000613ae2603283614383565b91507f4845524f546f6b656e45636f6e6f6d793a2063616e206e6f74206275726e206660008301527f726f6d20686f6c646572206163636f756e7400000000000000000000000000006020830152604082019050919050565b6000613b48602b83614383565b91507f4845524f546f6b656e45636f6e6f6d793a206f776e657220697320746865207a60008301527f65726f20616464726573730000000000000000000000000000000000000000006020830152604082019050919050565b6000613bae602d83614383565b91507f4845524f546f6b656e45636f6e6f6d793a206163636f756e742069732074686560008301527f207a65726f2061646472657373000000000000000000000000000000000000006020830152604082019050919050565b6000613c14602483614383565b91507f4845524f546f6b656e45636f6e6f6d793a206c6f636b656420666f722070726560008301527f73616c65000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613c7a602c83614383565b91507f436f6e74726f6c6c65643a206d73672e73656e646572206973206e6f7420746860008301527f6520636f6e74726f6c6c657200000000000000000000000000000000000000006020830152604082019050919050565b6000613ce0602083614383565b91507f4845524f546f6b656e45636f6e6f6d793a20696e76616c696420616d6f756e746000830152602082019050919050565b6000613d20602f83614383565b91507f4845524f546f6b656e45636f6e6f6d793a20726563697069656e74206973207460008301527f6865207a65726f206164647265737300000000000000000000000000000000006020830152604082019050919050565b6000613d86602a83614383565b91507f4845524f546f6b656e45636f6e6f6d793a20616d6f756e74206578636565647360008301527f20616c6c6f77616e6365000000000000000000000000000000000000000000006020830152604082019050919050565b604082016000820151613df56000850182613e0e565b506020820151613e086020850182613e0e565b50505050565b613e17816143d2565b82525050565b613e26816143d2565b82525050565b613e35816143dc565b82525050565b6000602082019050613e50600083018461352c565b92915050565b6000604082019050613e6b600083018561350e565b613e78602083018461352c565b9392505050565b600060c082019050613e94600083018961350e565b613ea16020830188613e1d565b613eae60408301876135b7565b613ebb60608301866135b7565b613ec8608083018561350e565b613ed560a0830184613e1d565b979650505050505050565b6000602082019050613ef56000830184613599565b92915050565b6000602082019050613f1060008301846135a8565b92915050565b60006020820190508181036000830152613f3081846135c6565b905092915050565b60006020820190508181036000830152613f51816135ff565b9050919050565b60006020820190508181036000830152613f718161363f565b9050919050565b60006020820190508181036000830152613f918161367f565b9050919050565b60006020820190508181036000830152613fb1816136bf565b9050919050565b60006020820190508181036000830152613fd181613725565b9050919050565b60006020820190508181036000830152613ff18161378b565b9050919050565b60006020820190508181036000830152614011816137cb565b9050919050565b6000602082019050818103600083015261403181613831565b9050919050565b6000602082019050818103600083015261405181613897565b9050919050565b60006020820190508181036000830152614071816138d7565b9050919050565b600060208201905081810360008301526140918161393d565b9050919050565b600060208201905081810360008301526140b1816139a3565b9050919050565b600060208201905081810360008301526140d181613a09565b9050919050565b600060208201905081810360008301526140f181613a6f565b9050919050565b6000602082019050818103600083015261411181613ad5565b9050919050565b6000602082019050818103600083015261413181613b3b565b9050919050565b6000602082019050818103600083015261415181613ba1565b9050919050565b6000602082019050818103600083015261417181613c07565b9050919050565b6000602082019050818103600083015261419181613c6d565b9050919050565b600060208201905081810360008301526141b181613cd3565b9050919050565b600060208201905081810360008301526141d181613d13565b9050919050565b600060208201905081810360008301526141f181613d79565b9050919050565b600060a08201905061420d6000830186613ddf565b61421a6040830185613ddf565b6142276080830184613599565b949350505050565b60006020820190506142446000830184613e1d565b92915050565b600060a08201905061425f6000830188613e1d565b61426c60208301876135b7565b818103604083015261427e818661353b565b905061428d606083018561350e565b61429a6080830184613e1d565b9695505050505050565b600060a0820190506142b96000830188613e1d565b6142c66020830187613e1d565b6142d36040830186613e1d565b6142e06060830185613e1d565b6142ed6080830184613e1d565b9695505050505050565b600060208201905061430c6000830184613e2c565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561433557600080fd5b8060405250919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600061439f826143b2565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006143f482614431565b9050919050565b60006144068261440d565b9050919050565b6000614418826143b2565b9050919050565b600061442a826143d2565b9050919050565b600061443c82614443565b9050919050565b600061444e826143b2565b9050919050565b60005b83811015614473578082015181840152602081019050614458565b83811115614482576000848401525b50505050565b6000601f19601f8301169050919050565b6144a281614394565b81146144ad57600080fd5b50565b6144b9816143a6565b81146144c457600080fd5b50565b6144d0816143d2565b81146144db57600080fd5b5056fea164736f6c634300060c000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Public constructor"
      }
    },
    "title": "HERO token",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2158,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "metadata",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Metadata)2156_storage"
      },
      {
        "astId": 2020,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "initializer",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1966,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "controller",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 508,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "settings",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(Settings)488_storage"
      },
      {
        "astId": 510,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "summary",
        "offset": 0,
        "slot": "10",
        "type": "t_struct(Summary)499_storage"
      },
      {
        "astId": 514,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "balances",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 520,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "allowances",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 524,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "excluded",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1709,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "swapRouter",
        "offset": 0,
        "slot": "18",
        "type": "t_contract(UniswapV2Router02)2656"
      },
      {
        "astId": 1711,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "swapPair",
        "offset": 0,
        "slot": "19",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(UniswapV2Router02)2656": {
        "encoding": "inplace",
        "label": "contract UniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Fees)481_storage": {
        "encoding": "inplace",
        "label": "struct HEROTokenEconomy.Fees",
        "members": [
          {
            "astId": 478,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "sender",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 480,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "recipient",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Metadata)2156_storage": {
        "encoding": "inplace",
        "label": "struct ERC20Metadata.Metadata",
        "members": [
          {
            "astId": 2151,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2153,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "symbol",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2155,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "decimals",
            "offset": 0,
            "slot": "2",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Settings)488_storage": {
        "encoding": "inplace",
        "label": "struct HEROTokenEconomy.Settings",
        "members": [
          {
            "astId": 483,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "lpFees",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Fees)481_storage"
          },
          {
            "astId": 485,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "rewardsFees",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(Fees)481_storage"
          },
          {
            "astId": 487,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "presale",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Summary)499_storage": {
        "encoding": "inplace",
        "label": "struct HEROTokenEconomy.Summary",
        "members": [
          {
            "astId": 490,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "totalExcluded",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 492,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "totalHolding",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 494,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "totalLP",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 496,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "totalRewards",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 498,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "totalSupply",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}