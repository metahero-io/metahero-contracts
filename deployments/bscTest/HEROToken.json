{
  "address": "0x9A45227eB8B5F05567c27F8AD583E20fc4DE77C3",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "excludeSenderFromFee",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "excludeRecipientFromFee",
          "type": "bool"
        }
      ],
      "name": "AccountExcluded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "ControllerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "PresaleFinished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalRewards",
          "type": "uint256"
        }
      ],
      "name": "TotalRewardsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "excludeSenderFromFee",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "excludeRecipientFromFee",
          "type": "bool"
        }
      ],
      "name": "excludeAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finishPresale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getBalanceSummary",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "holdingBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sender",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "recipient",
              "type": "uint256"
            }
          ],
          "internalType": "struct HEROToken.Fees",
          "name": "burnFees",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sender",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "recipient",
              "type": "uint256"
            }
          ],
          "internalType": "struct HEROToken.Fees",
          "name": "lpFees",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sender",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "recipient",
              "type": "uint256"
            }
          ],
          "internalType": "struct HEROToken.Fees",
          "name": "rewardsFees",
          "type": "tuple"
        },
        {
          "internalType": "address payable",
          "name": "lpManager_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "controller_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalSupply_",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "excludedAccounts_",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpManager",
      "outputs": [
        {
          "internalType": "contract HEROLPManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "presaleFinished",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "settings",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sender",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "recipient",
              "type": "uint256"
            }
          ],
          "internalType": "struct HEROToken.Fees",
          "name": "burnFees",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sender",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "recipient",
              "type": "uint256"
            }
          ],
          "internalType": "struct HEROToken.Fees",
          "name": "lpFees",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sender",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "recipient",
              "type": "uint256"
            }
          ],
          "internalType": "struct HEROToken.Fees",
          "name": "rewardsFees",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "summary",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalExcluded",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalHolding",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc1a60bb4ae3d7d4d29074e584a99013991275b500c79044d40e178c7adc592fe",
  "receipt": {
    "to": null,
    "from": "0x2101F46D23b84eEa6a310B1dBa58f66DCE17A0Cf",
    "contractAddress": "0x9A45227eB8B5F05567c27F8AD583E20fc4DE77C3",
    "transactionIndex": 0,
    "gasUsed": "4019146",
    "logsBloom": "0x
    "blockHash": "0x7f003d722762c6b6290d0670deac315f8e3ae931e9c224459753feabc29978e3",
    "transactionHash": "0xc1a60bb4ae3d7d4d29074e584a99013991275b500c79044d40e178c7adc592fe",
    "logs": [],
    "blockNumber": 9937004,
    "cumulativeGasUsed": "4019146",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "b4b904cc7be43156a2dd365f3853bc33",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"excludeSenderFromFee\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"excludeRecipientFromFee\",\"type\":\"bool\"}],\"name\":\"AccountExcluded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"ControllerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PresaleFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"}],\"name\":\"TotalRewardsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excludeSenderFromFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"excludeRecipientFromFee\",\"type\":\"bool\"}],\"name\":\"excludeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBalanceSummary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holdingBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sender\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recipient\",\"type\":\"uint256\"}],\"internalType\":\"struct HEROToken.Fees\",\"name\":\"burnFees\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sender\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recipient\",\"type\":\"uint256\"}],\"internalType\":\"struct HEROToken.Fees\",\"name\":\"lpFees\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sender\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recipient\",\"type\":\"uint256\"}],\"internalType\":\"struct HEROToken.Fees\",\"name\":\"rewardsFees\",\"type\":\"tuple\"},{\"internalType\":\"address payable\",\"name\":\"lpManager_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"controller_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"excludedAccounts_\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpManager\",\"outputs\":[{\"internalType\":\"contract HEROLPManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settings\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sender\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recipient\",\"type\":\"uint256\"}],\"internalType\":\"struct HEROToken.Fees\",\"name\":\"burnFees\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sender\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recipient\",\"type\":\"uint256\"}],\"internalType\":\"struct HEROToken.Fees\",\"name\":\"lpFees\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sender\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recipient\",\"type\":\"uint256\"}],\"internalType\":\"struct HEROToken.Fees\",\"name\":\"rewardsFees\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"summary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalExcluded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalHolding\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Public constructor\"}},\"title\":\"HERO token\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/HEROToken.sol\":\"HEROToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/HEROLPManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"./access/Owned.sol\\\";\\nimport \\\"./lifecycle/Initializable.sol\\\";\\nimport \\\"./math/MathLib.sol\\\";\\nimport \\\"./HEROToken.sol\\\";\\n\\n\\n/**\\n * @title HERO abstract liquidity pool manager\\n */\\nabstract contract HEROLPManager is Owned, Initializable {\\n  using MathLib for uint256;\\n\\n  HEROToken public token;\\n\\n  bool internal swapLocked;\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor ()\\n    internal\\n    Owned()\\n    Initializable()\\n  {\\n    //\\n  }\\n\\n  // external functions\\n\\n  receive()\\n    external\\n    payable\\n  {\\n    //\\n  }\\n\\n  function syncLP()\\n    external\\n  {\\n    if (!swapLocked) {\\n      swapLocked = true;\\n\\n      _syncLP();\\n\\n      swapLocked = false;\\n    }\\n  }\\n\\n  function burnLP(\\n    uint256 amount\\n  )\\n    external\\n    onlyOwner\\n  {\\n    require(\\n      amount != 0,\\n      \\\"HEROLPManager#1\\\"\\n    );\\n\\n    require(\\n      !swapLocked,\\n      \\\"HEROLPManager#2\\\"\\n    );\\n\\n    swapLocked = true;\\n\\n    _burnLP(amount);\\n\\n    swapLocked = false;\\n  }\\n\\n  // internal functions\\n\\n  function _initialize(\\n    address token_\\n  )\\n    internal\\n  {\\n    require(\\n      token_ != address(0),\\n      \\\"HEROLPManager#3\\\"\\n    );\\n\\n    token = HEROToken(token_);\\n  }\\n\\n  function _syncLP()\\n    internal\\n    virtual;\\n\\n  function _burnLP(\\n    uint256 amount\\n  )\\n    internal\\n    virtual;\\n}\\n\",\"keccak256\":\"0x07005f954f872f7a80702ac703591d1b49084be60127d5fc9007f0033336c020\",\"license\":\"MIT\"},\"src/HEROToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./access/Controlled.sol\\\";\\nimport \\\"./access/Owned.sol\\\";\\nimport \\\"./erc20/ERC20.sol\\\";\\nimport \\\"./lifecycle/Initializable.sol\\\";\\nimport \\\"./math/MathLib.sol\\\";\\nimport \\\"./HEROLPManager.sol\\\";\\n\\n\\n/**\\n * @title HERO token\\n */\\ncontract HEROToken is Controlled, Owned, ERC20, Initializable {\\n  using MathLib for uint256;\\n\\n  struct Fees {\\n    uint256 sender; // percent\\n    uint256 recipient; // percent\\n  }\\n\\n  struct Settings {\\n    Fees burnFees;\\n    Fees lpFees;\\n    Fees rewardsFees;\\n  }\\n\\n  struct Summary {\\n    uint256 totalExcluded;\\n    uint256 totalHolding;\\n    uint256 totalRewards;\\n    uint256 totalSupply;\\n  }\\n\\n  struct ExcludedAccount {\\n    bool exists;\\n    bool excludeSenderFromFee;\\n    bool excludeRecipientFromFee;\\n  }\\n\\n  // metadata\\n\\n  string private constant TOKEN_NAME = \\\"Metahero\\\";\\n  string private constant TOKEN_SYMBOL = \\\"HERO\\\";\\n  uint8 private constant TOKEN_DECIMALS = 18; // 0.000000000000000000\\n\\n  HEROLPManager public lpManager;\\n  Settings public settings;\\n  Summary public summary;\\n  bool public presaleFinished;\\n\\n  mapping (address => uint256) private accountBalances;\\n  mapping (address => mapping (address => uint256)) private accountAllowances;\\n  mapping (address => ExcludedAccount) private excludedAccounts;\\n\\n  // events\\n\\n  event PresaleFinished();\\n\\n  event AccountExcluded(\\n    address indexed account,\\n    bool excludeSenderFromFee,\\n    bool excludeRecipientFromFee\\n  );\\n\\n  event TotalRewardsUpdated(\\n    uint256 totalRewards\\n  );\\n\\n  /**\\n   * @dev Public constructor\\n   */\\n  constructor ()\\n    public\\n    Controlled()\\n    Owned()\\n    ERC20(TOKEN_NAME, TOKEN_SYMBOL, TOKEN_DECIMALS)\\n    Initializable()\\n  {\\n    //\\n  }\\n\\n  // external functions\\n\\n  function initialize(\\n    Fees memory burnFees,\\n    Fees memory lpFees,\\n    Fees memory rewardsFees,\\n    address payable lpManager_,\\n    address controller_,\\n    uint256 totalSupply_,\\n    address[] calldata excludedAccounts_\\n  )\\n    external\\n    onlyInitializer\\n  {\\n    settings.burnFees = burnFees;\\n    settings.lpFees = lpFees;\\n    settings.rewardsFees = rewardsFees;\\n\\n    if (\\n      lpFees.sender != 0 ||\\n      lpFees.recipient != 0\\n    ) {\\n      require(\\n        lpManager_ != address(0),\\n        \\\"HEROToken#1\\\"\\n      );\\n\\n      lpManager = HEROLPManager(lpManager_);\\n\\n      _excludeAccount(lpManager_, false, false);\\n    }\\n\\n    _initializeController(controller_);\\n\\n    if (totalSupply_ != 0) {\\n      _excludeAccount(msg.sender, true, true);\\n\\n      _mint(\\n        msg.sender,\\n        totalSupply_\\n      );\\n    }\\n\\n    uint256 excludedAccountsLen = excludedAccounts_.length;\\n\\n    for (uint256 index; index < excludedAccountsLen; index++) {\\n      _excludeAccount(excludedAccounts_[index], false, false);\\n    }\\n  }\\n\\n  function finishPresale()\\n    external\\n    onlyOwner\\n  {\\n    require(\\n      !presaleFinished,\\n      \\\"HEROToken#2\\\"\\n    );\\n\\n    presaleFinished = true;\\n\\n    emit PresaleFinished();\\n  }\\n\\n  function excludeAccount(\\n    address account,\\n    bool excludeSenderFromFee,\\n    bool excludeRecipientFromFee\\n  )\\n    external\\n    onlyOwner\\n  {\\n    _excludeAccount(\\n      account,\\n      excludeSenderFromFee,\\n      excludeRecipientFromFee\\n    );\\n  }\\n\\n  function approve(\\n    address spender,\\n    uint256 amount\\n  )\\n    external\\n    override\\n    returns (bool)\\n  {\\n    _approve(\\n      msg.sender,\\n      spender,\\n      amount\\n    );\\n\\n    return true;\\n  }\\n\\n  function mint(\\n    address account,\\n    uint256 amount\\n  )\\n    external\\n    onlyController\\n  {\\n    _mint(\\n      account,\\n      amount\\n    );\\n  }\\n\\n  function burn(\\n    uint256 amount\\n  )\\n    external\\n  {\\n    _burn(\\n      msg.sender,\\n      amount\\n    );\\n  }\\n\\n  function transfer(\\n    address recipient,\\n    uint256 amount\\n  )\\n    external\\n    override\\n    returns (bool)\\n  {\\n    _transfer(\\n      msg.sender,\\n      recipient,\\n      amount\\n    );\\n\\n    return true;\\n  }\\n\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    external\\n    override\\n    returns (bool)\\n  {\\n    _transfer(\\n      sender,\\n      recipient,\\n      amount\\n    );\\n\\n    uint256 allowance = accountAllowances[sender][msg.sender];\\n\\n    require(\\n      allowance >= amount,\\n      \\\"HEROToken#3\\\"\\n    );\\n\\n    _approve(\\n      sender,\\n      msg.sender,\\n      allowance.sub(amount)\\n    );\\n\\n    return true;\\n  }\\n\\n  // external functions (views)\\n\\n  function totalSupply()\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return summary.totalSupply;\\n  }\\n\\n  function allowance(\\n    address owner,\\n    address spender\\n  )\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return accountAllowances[owner][spender];\\n  }\\n\\n  function balanceOf(\\n    address account\\n  )\\n    external\\n    view\\n    override\\n    returns (uint256 result)\\n  {\\n    result = accountBalances[account].add(\\n      _calcRewards(account)\\n    );\\n\\n    return result;\\n  }\\n\\n  function getBalanceSummary(\\n    address account\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 totalBalance,\\n      uint256 holdingBalance,\\n      uint256 totalRewards\\n    )\\n  {\\n    holdingBalance = accountBalances[account];\\n    totalRewards = _calcRewards(account);\\n    totalBalance = holdingBalance.add(totalRewards);\\n\\n    return (totalBalance, holdingBalance, totalRewards);\\n  }\\n\\n  // private functions\\n\\n  function _excludeAccount(\\n    address account,\\n    bool excludeSenderFromFee,\\n    bool excludeRecipientFromFee\\n  )\\n    private\\n  {\\n    require(\\n      account != address(0),\\n      \\\"HEROToken#4\\\"\\n    );\\n\\n    if (excludedAccounts[account].exists) {\\n      require(\\n        excludedAccounts[account].excludeSenderFromFee != excludeSenderFromFee ||\\n        excludedAccounts[account].excludeRecipientFromFee != excludeRecipientFromFee,\\n        \\\"HEROToken#5\\\"\\n      );\\n\\n      excludedAccounts[account].excludeSenderFromFee = excludeSenderFromFee;\\n      excludedAccounts[account].excludeRecipientFromFee = excludeRecipientFromFee;\\n    } else {\\n      require(\\n        accountBalances[account] == 0,\\n        \\\"HEROToken#6\\\"\\n      );\\n\\n      excludedAccounts[account].exists = true;\\n      excludedAccounts[account].excludeSenderFromFee = excludeSenderFromFee;\\n      excludedAccounts[account].excludeRecipientFromFee = excludeRecipientFromFee;\\n    }\\n\\n    emit AccountExcluded(\\n      account,\\n      excludeSenderFromFee,\\n      excludeRecipientFromFee\\n    );\\n  }\\n\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    require(\\n      owner != address(0),\\n      \\\"HEROToken#7\\\"\\n    );\\n\\n    require(\\n      spender != address(0),\\n      \\\"HEROToken#8\\\"\\n    );\\n\\n    accountAllowances[owner][spender] = amount;\\n\\n    emit Approval(\\n      owner,\\n      spender,\\n      amount\\n    );\\n  }\\n\\n  function _mint(\\n    address account,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    require(\\n      account != address(0),\\n      \\\"HEROToken#9\\\"\\n    );\\n\\n    require(\\n      amount != 0,\\n      \\\"HEROToken#10\\\"\\n    );\\n\\n    require(\\n      excludedAccounts[account].exists,\\n      \\\"HEROToken#11\\\"\\n    );\\n\\n    summary.totalSupply = summary.totalSupply.add(amount);\\n    summary.totalExcluded = summary.totalExcluded.add(amount);\\n\\n    accountBalances[account] = accountBalances[account].add(amount);\\n\\n    _emitTransfer(\\n      address(0),\\n      account,\\n      amount\\n    );\\n  }\\n\\n  function _burn(\\n    address account,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    require(\\n      account != address(0),\\n      \\\"HEROToken#12\\\"\\n    );\\n\\n    require(\\n      amount != 0,\\n      \\\"HEROToken#13\\\"\\n    );\\n\\n    require(\\n      accountBalances[account] >= amount,\\n      \\\"HEROToken#14\\\"\\n    );\\n\\n    require(\\n      excludedAccounts[account].exists,\\n      \\\"HEROToken#15\\\"\\n    );\\n\\n    accountBalances[account] = accountBalances[account].sub(amount);\\n\\n    summary.totalSupply = summary.totalSupply.sub(amount);\\n    summary.totalExcluded = summary.totalExcluded.sub(amount);\\n\\n    _emitTransfer(\\n      account,\\n      address(0),\\n      amount\\n    );\\n  }\\n\\n  function _transfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    require(\\n      sender != address(0),\\n      \\\"HEROToken#16\\\"\\n    );\\n\\n    require(\\n      recipient != address(0),\\n      \\\"HEROToken#17\\\"\\n    );\\n\\n    require(\\n      sender != recipient,\\n      \\\"HEROToken#18\\\"\\n    );\\n\\n    require(\\n      amount != 0,\\n      \\\"HEROToken#19\\\"\\n    );\\n\\n    require(\\n      excludedAccounts[sender].exists ||\\n      presaleFinished,\\n      \\\"HEROToken#20\\\"\\n    );\\n\\n    if (\\n      !excludedAccounts[sender].exists &&\\n      !excludedAccounts[recipient].exists\\n    ) {\\n      _transferBetweenHolderAccounts(\\n        sender,\\n        recipient,\\n        amount\\n      );\\n    } else if (\\n      excludedAccounts[sender].exists &&\\n      !excludedAccounts[recipient].exists\\n    ) {\\n      _transferFromExcludedAccount(\\n        sender,\\n        recipient,\\n        amount\\n      );\\n    } else if (\\n      !excludedAccounts[sender].exists &&\\n      excludedAccounts[recipient].exists\\n    ) {\\n      _transferToExcludedAccount(\\n        sender,\\n        recipient,\\n        amount\\n      );\\n    } else {\\n      _transferBetweenExcludedAccounts(\\n        sender,\\n        recipient,\\n        amount\\n      );\\n    }\\n  }\\n\\n  function _transferBetweenHolderAccounts(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    uint256 senderAmount;\\n    uint256 senderBurnFee;\\n    uint256 senderLpFee;\\n\\n    uint256 recipientAmount;\\n    uint256 recipientBurnFee;\\n    uint256 recipientLpFee;\\n\\n    uint256 totalFee;\\n\\n    {\\n      uint256 senderTotalFee;\\n      uint256 recipientTotalFee;\\n\\n      (\\n        senderTotalFee,\\n        senderBurnFee,\\n        senderLpFee\\n      ) = _calcTransferSenderFees(amount);\\n\\n      (\\n        recipientTotalFee,\\n        recipientBurnFee,\\n        recipientLpFee\\n      ) = _calcTransferRecipientFees(amount);\\n\\n      totalFee = senderTotalFee.add(recipientTotalFee);\\n      senderAmount = amount.add(senderTotalFee);\\n      recipientAmount = amount.sub(recipientTotalFee);\\n    }\\n\\n    if (summary.totalRewards != 0) {\\n      uint256 totalHoldingWithRewards = summary.totalHolding.add(\\n        summary.totalRewards\\n      );\\n\\n      senderAmount = senderAmount.mul(summary.totalHolding).div(\\n        totalHoldingWithRewards\\n      );\\n      recipientAmount = recipientAmount.mul(summary.totalHolding).div(\\n        totalHoldingWithRewards\\n      );\\n      totalFee = totalFee.mul(summary.totalHolding).div(\\n        totalHoldingWithRewards\\n      );\\n    }\\n\\n    require(\\n      accountBalances[sender] >= senderAmount,\\n      \\\"HEROToken#21\\\"\\n    );\\n\\n    accountBalances[sender] = accountBalances[sender].sub(senderAmount);\\n    accountBalances[recipient] = accountBalances[recipient].add(recipientAmount);\\n\\n    _emitTransfer(\\n      sender,\\n      recipient,\\n      amount\\n    );\\n\\n    _emitTransfer(\\n      sender,\\n      address(0),\\n      senderBurnFee\\n    );\\n\\n    _emitTransfer(\\n      sender,\\n      address(lpManager),\\n      senderLpFee\\n    );\\n\\n    summary.totalSupply = summary.totalSupply.sub(senderBurnFee).sub(recipientBurnFee);\\n    summary.totalHolding = summary.totalHolding.sub(totalFee);\\n\\n    _increaseTotalLP(senderLpFee.add(recipientLpFee));\\n\\n    _updateTotalRewards();\\n  }\\n\\n  function _transferFromExcludedAccount(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    require(\\n      accountBalances[sender] >= amount,\\n      \\\"HEROToken#22\\\"\\n    );\\n\\n    uint256 recipientTotalFee;\\n    uint256 recipientBurnFee;\\n    uint256 recipientLPFee;\\n\\n    if (!excludedAccounts[sender].excludeRecipientFromFee) {\\n      (\\n        recipientTotalFee,\\n        recipientBurnFee,\\n        recipientLPFee\\n      ) = _calcTransferRecipientFees(amount);\\n    }\\n\\n    uint256 recipientAmount = amount.sub(recipientTotalFee);\\n\\n    accountBalances[sender] = accountBalances[sender].sub(amount);\\n    accountBalances[recipient] = accountBalances[recipient].add(recipientAmount);\\n\\n    _emitTransfer(\\n      sender,\\n      recipient,\\n      amount\\n    );\\n\\n    _emitTransfer(\\n      recipient,\\n      address(0),\\n      recipientBurnFee\\n    );\\n\\n    _emitTransfer(\\n      recipient,\\n      address(lpManager),\\n      recipientLPFee\\n    );\\n\\n    summary.totalSupply = summary.totalSupply.sub(recipientBurnFee);\\n    summary.totalExcluded = summary.totalExcluded.sub(amount);\\n    summary.totalHolding = summary.totalHolding.add(recipientAmount);\\n\\n    _increaseTotalLP(recipientLPFee);\\n\\n    _updateTotalRewards();\\n  }\\n\\n  function _transferToExcludedAccount(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    uint256 senderTotalFee;\\n    uint256 senderBurnFee;\\n    uint256 senderLpFee;\\n\\n    if (!excludedAccounts[recipient].excludeSenderFromFee) {\\n      (\\n        senderTotalFee,\\n        senderBurnFee,\\n        senderLpFee\\n      ) = _calcTransferSenderFees(amount);\\n    }\\n\\n    uint256 senderAmount = amount.add(senderTotalFee);\\n\\n    if (summary.totalRewards != 0) {\\n      uint256 totalHoldingWithRewards = summary.totalHolding.add(\\n        summary.totalRewards\\n      );\\n\\n      senderAmount = senderAmount.mul(summary.totalHolding).div(\\n        totalHoldingWithRewards\\n      );\\n    }\\n\\n    require(\\n      accountBalances[sender] >= senderAmount,\\n      \\\"HEROToken#23\\\"\\n    );\\n\\n    accountBalances[sender] = accountBalances[sender].sub(senderAmount);\\n    accountBalances[recipient] = accountBalances[recipient].add(amount);\\n\\n    _emitTransfer(\\n      sender,\\n      recipient,\\n      amount\\n    );\\n\\n    _emitTransfer(\\n      sender,\\n      address(0),\\n      senderBurnFee\\n    );\\n\\n    _emitTransfer(\\n      sender,\\n      address(lpManager),\\n      senderLpFee\\n    );\\n\\n    summary.totalSupply = summary.totalSupply.sub(senderBurnFee);\\n    summary.totalExcluded = summary.totalExcluded.add(amount);\\n    summary.totalHolding = summary.totalHolding.sub(senderAmount);\\n\\n    _increaseTotalLP(senderLpFee);\\n\\n    _updateTotalRewards();\\n  }\\n\\n  function _transferBetweenExcludedAccounts(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    require(\\n      accountBalances[sender] >= amount,\\n      \\\"HEROToken#24\\\"\\n    );\\n\\n    accountBalances[sender] = accountBalances[sender].sub(amount);\\n    accountBalances[recipient] = accountBalances[recipient].add(amount);\\n\\n    _emitTransfer(\\n      sender,\\n      recipient,\\n      amount\\n    );\\n  }\\n\\n  function _emitTransfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    if (amount != 0) {\\n      emit Transfer(\\n        sender,\\n        recipient,\\n        amount\\n      );\\n    }\\n  }\\n\\n  function _increaseTotalLP(\\n    uint256 amount\\n  )\\n    private\\n  {\\n    if (amount != 0) {\\n      accountBalances[address(lpManager)] = accountBalances[address(lpManager)].add(amount);\\n\\n      summary.totalExcluded = summary.totalExcluded.add(amount);\\n\\n      lpManager.syncLP();\\n    }\\n  }\\n\\n  function _updateTotalRewards()\\n    private\\n  {\\n    uint256 totalRewards = summary.totalSupply\\n    .sub(summary.totalExcluded)\\n    .sub(summary.totalHolding);\\n\\n    if (totalRewards != summary.totalRewards) {\\n      summary.totalRewards = totalRewards;\\n\\n      emit TotalRewardsUpdated(\\n        totalRewards\\n      );\\n    }\\n  }\\n\\n  // private functions (views)\\n\\n  function _calcRewards(\\n    address account\\n  )\\n    private\\n    view\\n    returns (uint256 result)\\n  {\\n    if (\\n      !excludedAccounts[account].exists &&\\n      summary.totalRewards != 0\\n    ) {\\n      result = summary.totalRewards\\n        .mul(accountBalances[account])\\n        .div(summary.totalHolding);\\n    }\\n\\n    return result;\\n  }\\n\\n  function _calcTransferSenderFees(\\n    uint256 amount\\n  )\\n    private\\n    view\\n    returns (\\n      uint256 totalFee,\\n      uint256 burnFee,\\n      uint256 lpFee\\n    )\\n  {\\n    uint256 rewardsFee = amount.percent(settings.rewardsFees.sender);\\n\\n    lpFee = amount.percent(settings.lpFees.sender);\\n    burnFee = amount.percent(settings.burnFees.sender);\\n\\n    totalFee = lpFee.add(rewardsFee).add(burnFee);\\n\\n    return (totalFee, burnFee, lpFee);\\n  }\\n\\n  function _calcTransferRecipientFees(\\n    uint256 amount\\n  )\\n    private\\n    view\\n    returns (\\n      uint256 totalFee,\\n      uint256 burnFee,\\n      uint256 lpFee\\n    )\\n  {\\n    uint256 rewardsFee = amount.percent(settings.rewardsFees.recipient);\\n\\n    lpFee = amount.percent(settings.lpFees.recipient);\\n    burnFee = amount.percent(settings.burnFees.recipient);\\n\\n    totalFee = lpFee.add(rewardsFee).add(burnFee);\\n\\n    return (totalFee, burnFee, lpFee);\\n  }\\n}\\n\",\"keccak256\":\"0x68ec2f80e088cc846ff5379313a5ae9a1b83f7ccffaabcac54d60a569e775b4d\",\"license\":\"MIT\"},\"src/access/Controlled.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Controlled\\n */\\ncontract Controlled {\\n  address public controller;\\n\\n  // modifiers\\n\\n  modifier onlyController() {\\n    require(\\n      msg.sender == controller,\\n      \\\"Controlled#1\\\"\\n    );\\n\\n    _;\\n  }\\n\\n  // events\\n\\n  event ControllerUpdated(\\n    address controller\\n  );\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor()\\n    internal\\n  {\\n    //\\n  }\\n\\n  // internal functions\\n\\n  function _initializeController(\\n    address controller_\\n  )\\n    internal\\n  {\\n    controller = controller_;\\n  }\\n\\n  function _setController(\\n    address controller_\\n  )\\n    internal\\n  {\\n    require(\\n      controller_ != address(0),\\n      \\\"Controlled#2\\\"\\n    );\\n\\n    require(\\n      controller_ != controller,\\n      \\\"Controlled#3\\\"\\n    );\\n\\n    controller = controller_;\\n\\n    emit ControllerUpdated(\\n      controller_\\n    );\\n  }\\n\\n  function _removeController()\\n    internal\\n  {\\n    require(\\n      controller != address(0),\\n      \\\"Controlled#4\\\"\\n    );\\n\\n    controller = address(0);\\n\\n    emit ControllerUpdated(\\n      address(0)\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x7a17852153173274f8335812747b2b9872b740569e5b64ac241b586f48de17db\",\"license\":\"MIT\"},\"src/access/Owned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Owned\\n */\\ncontract Owned {\\n  address public owner;\\n\\n  // modifiers\\n\\n  modifier onlyOwner() {\\n    require(\\n      msg.sender == owner,\\n      \\\"Owned#1\\\"\\n    );\\n\\n    _;\\n  }\\n\\n  // events\\n\\n  event OwnerUpdated(\\n    address owner\\n  );\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor()\\n    internal\\n  {\\n    owner = msg.sender;\\n  }\\n\\n  // external functions\\n\\n  function setOwner(\\n    address owner_\\n  )\\n    external\\n    onlyOwner\\n  {\\n    require(\\n      owner_ != address(0),\\n      \\\"Owned#2\\\"\\n    );\\n\\n    require(\\n      owner_ != owner,\\n      \\\"Owned#3\\\"\\n    );\\n\\n    owner = owner_;\\n\\n    emit OwnerUpdated(\\n      owner_\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0xfc994d9233a8e6a1581dc1511d97e29d7d45fb33dc24ce1f146f5b55e62e8d58\",\"license\":\"MIT\"},\"src/erc20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"./ERC20Metadata.sol\\\";\\nimport \\\"./ERC20Standard.sol\\\";\\n\\n\\nabstract contract ERC20 is ERC20Metadata, ERC20Standard {\\n  string public override name;\\n  string public override symbol;\\n  uint8 public override decimals;\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor (\\n    string memory name_,\\n    string memory symbol_,\\n    uint8 decimals_\\n  )\\n    internal\\n  {\\n    name = name_;\\n    symbol = symbol_;\\n    decimals = decimals_;\\n  }\\n}\\n\",\"keccak256\":\"0x263e909b5aacdfe0efbb513c92a36909d7ec7bb29310a56366e4006e893f077b\",\"license\":\"MIT\"},\"src/erc20/ERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\ninterface ERC20Metadata {\\n  // external functions (pure)\\n\\n  function name()\\n    external\\n    pure\\n    returns (string memory);\\n\\n  function symbol()\\n    external\\n    pure\\n    returns (string memory);\\n\\n  function decimals()\\n    external\\n    pure\\n    returns (uint8);\\n}\\n\",\"keccak256\":\"0xb9f2b7768748bb9daef7fb378aa85e04ce735a3577aa7c99b2c46c3d09301ca2\",\"license\":\"MIT\"},\"src/erc20/ERC20Standard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\ninterface ERC20Standard {\\n  // events\\n\\n  event Approval(\\n    address indexed owner,\\n    address indexed spender,\\n    uint256 value\\n  );\\n\\n  event Transfer(\\n    address indexed from,\\n    address indexed to,\\n    uint256 value\\n  );\\n\\n  // external functions\\n\\n  function approve(\\n    address spender,\\n    uint256 value\\n  )\\n    external\\n    returns (bool);\\n\\n  function transfer(\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (bool);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (bool);\\n\\n  // external functions (views)\\n\\n  function totalSupply()\\n    external\\n    view\\n    returns (uint256);\\n\\n  function balanceOf(\\n    address owner\\n  )\\n    external\\n    view\\n    returns (uint256);\\n\\n  function allowance(\\n    address owner,\\n    address spender\\n  )\\n    external\\n    view\\n    returns (uint256);\\n}\\n\",\"keccak256\":\"0x97bfb18accd6fac80fc5c560cdf3b15b55be42dead5488f10db8aa9fffa34f56\",\"license\":\"MIT\"},\"src/lifecycle/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Initializable\\n */\\ncontract Initializable {\\n  address private initializer;\\n\\n  // events\\n\\n  event Initialized();\\n\\n  // modifiers\\n\\n  modifier onlyInitializer() {\\n    require(\\n      initializer != address(0),\\n      \\\"Initializable#1\\\"\\n    );\\n\\n    require(\\n      msg.sender == initializer,\\n      \\\"Initializable#2\\\"\\n    );\\n\\n    initializer = address(0);\\n\\n    _;\\n\\n    emit Initialized();\\n  }\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor()\\n    internal\\n  {\\n    initializer = msg.sender;\\n  }\\n\\n  // external functions (views)\\n\\n  function initialized()\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return initializer == address(0);\\n  }\\n}\\n\",\"keccak256\":\"0xe69c4567bd1e4564e316eaf1a36387a29dae6babc31ed4c21f0306e4b0ea1750\",\"license\":\"MIT\"},\"src/math/MathLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Math library\\n */\\nlibrary MathLib {\\n  function add(\\n    uint256 a,\\n    uint256 b\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    uint256 c = a + b;\\n\\n    require(\\n      c >= a,\\n      \\\"MathLib#1\\\"\\n    );\\n\\n    return c;\\n  }\\n\\n  function sub(\\n    uint256 a,\\n    uint256 b\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    require(\\n      b <= a,\\n      \\\"MathLib#2\\\"\\n    );\\n\\n    return a - b;\\n  }\\n\\n  function mul(\\n    uint256 a,\\n    uint256 b\\n  )\\n    internal\\n    pure\\n    returns (uint256 result)\\n  {\\n    if (a != 0 && b != 0) {\\n      result = a * b;\\n\\n      require(\\n        result / a == b,\\n        \\\"MathLib#3\\\"\\n      );\\n    }\\n\\n    return result;\\n  }\\n\\n  function div(\\n    uint256 a,\\n    uint256 b\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    require(\\n      b != 0,\\n      \\\"MathLib#4\\\"\\n    );\\n\\n    return a / b;\\n  }\\n\\n  function percent(\\n    uint256 a,\\n    uint256 p\\n  )\\n    internal\\n    pure\\n    returns (uint256 result)\\n  {\\n    if (a != 0 && p != 0) {\\n      result = div(mul(a, p), 100);\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0xe95188bae28c1dcdff8bb625bb6be7fcfb346186a5af3d92cffcb72402f8415f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040518060400160405280600881526020017f4d6574616865726f0000000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f4845524f00000000000000000000000000000000000000000000000000000000815250601233600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260029080519060200190620000d992919062000158565b508160039080519060200190620000f292919062000158565b5080600460006101000a81548160ff021916908360ff16021790555050505033600460016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620001fe565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200019b57805160ff1916838001178555620001cc565b82800160010185558215620001cc579182015b82811115620001cb578251825591602001919060010190620001ae565b5b509050620001db9190620001df565b5090565b5b80821115620001fa576000816000905550600101620001e0565b5090565b614676806200020e6000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c80636ea41454116100c3578063a9059cbb1161007c578063a9059cbb1461037c578063b16a867c146103ac578063b906f15a146103cd578063dd62ed3e146103eb578063e06174e41461041b578063f77c47911461043b5761014d565b80636ea41454146102cc57806370a08231146102e85780638da5cb5b1461031857806390b5e6d91461033657806395d89b4114610354578063974654c6146103725761014d565b80632197fb25116101155780632197fb25146101f857806323b872dd146102145780632d38031514610244578063313ce5671461027657806340c10f191461029457806342966c68146102b05761014d565b806306fdde0314610152578063095ea7b31461017057806313af4035146101a0578063158ef93e146101bc57806318160ddd146101da575b600080fd5b61015a610459565b6040516101679190613faa565b60405180910390f35b61018a600480360381019061018591906134cc565b6104f7565b6040516101979190613f4b565b60405180910390f35b6101ba60048036038101906101b591906133c9565b61050e565b005b6101c461071a565b6040516101d19190613f4b565b60405180910390f35b6101e2610772565b6040516101ef9190614443565b60405180910390f35b610212600480360381019061020d919061347d565b61077f565b005b61022e6004803603810190610229919061342e565b61081f565b60405161023b9190613f4b565b60405180910390f35b61025e600480360381019061025991906133c9565b610919565b60405161026d9392919061445e565b60405180910390f35b61027e610987565b60405161028b91906144da565b60405180910390f35b6102ae60048036038101906102a991906134cc565b61099a565b005b6102ca60048036038101906102c591906135c5565b610a36565b005b6102e660048036038101906102e19190613508565b610a43565b005b61030260048036038101906102fd91906133c9565b610d86565b60405161030f9190614443565b60405180910390f35b610320610de9565b60405161032d9190613f30565b60405180910390f35b61033e610e0f565b60405161034b9190613f4b565b60405180910390f35b61035c610e22565b6040516103699190613faa565b60405180910390f35b61037a610ec0565b005b610396600480360381019061039191906134cc565b610fe9565b6040516103a39190613f4b565b60405180910390f35b6103b4611000565b6040516103c49493929190614495565b60405180910390f35b6103d561101e565b6040516103e29190613f8f565b60405180910390f35b610405600480360381019061040091906133f2565b611044565b6040516104129190614443565b60405180910390f35b6104236110cb565b6040516104329392919061440c565b60405180910390f35b61044361113d565b6040516104509190613f30565b60405180910390f35b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104ef5780601f106104c4576101008083540402835291602001916104ef565b820191906000526020600020905b8154815290600101906020018083116104d257829003601f168201915b505050505081565b6000610504338484611161565b6001905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461059e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610595906143ac565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561060e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106059061432c565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561069f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610696906142cc565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f4ffd725fc4a22075e9ec71c59edf9c38cdeb588a91b24fc5b61388c5be41282b8160405161070f9190613f30565b60405180910390a150565b60008073ffffffffffffffffffffffffffffffffffffffff16600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905090565b6000600c60030154905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461080f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610806906143ac565b60405180910390fd5b61081a83838361132c565b505050565b600061082c848484611785565b6000601260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828110156108f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e79061428c565b60405180910390fd5b61090d85336109088685611c0c90919063ffffffff16565b611161565b60019150509392505050565b6000806000601160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915061096984611c5c565b905061097e8183611d3c90919063ffffffff16565b92509193909250565b600460009054906101000a900460ff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1f9061434c565b60405180910390fd5b610a328282611d91565b5050565b610a403382611fbb565b50565b600073ffffffffffffffffffffffffffffffffffffffff16600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610ad5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610acc9061424c565b60405180910390fd5b600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5c9061420c565b60405180910390fd5b6000600460016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555087600660000160008201518160000155602082015181600101559050508660066002016000820151816000015560208201518160010155905050856006600401600082015181600001556020820151816001015590505060008760000151141580610c1757506000876020015114155b15610cda57600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415610c8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c839061438c565b60405180910390fd5b84600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610cd98560008061132c565b5b610ce384612267565b60008314610d0257610cf73360018061132c565b610d013384611d91565b5b600082829050905060005b81811015610d4e57610d41848483818110610d2457fe5b9050602002016020810190610d3991906133c9565b60008061132c565b8080600101915050610d0d565b50507f5daa87a0e9463431830481fd4b6e3403442dfb9a12b9c07597e9f61d50b633c860405160405180910390a15050505050505050565b6000610de2610d9483611c5c565b601160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d3c90919063ffffffff16565b9050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b601060009054906101000a900460ff1681565b60038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610eb85780601f10610e8d57610100808354040283529160200191610eb8565b820191906000526020600020905b815481529060010190602001808311610e9b57829003601f168201915b505050505081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f47906143ac565b60405180910390fd5b601060009054906101000a900460ff1615610fa0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f979061412c565b60405180910390fd5b6001601060006101000a81548160ff0219169083151502179055507f0b5ca8ee9a23a12c9bb341511e83987d73bee14e96dc855aeaea8840c54ea0bd60405160405180910390a1565b6000610ff6338484611785565b6001905092915050565b600c8060000154908060010154908060020154908060030154905084565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000601260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60068060000160405180604001604052908160008201548152602001600182015481525050908060020160405180604001604052908160008201548152602001600182015481525050908060040160405180604001604052908160008201548152602001600182015481525050905083565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156111d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111c89061430c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611241576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611238906140ec565b60405180910390fd5b80601260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161131f9190614443565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561139c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113939061410c565b60405180910390fd5b601360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff161561159e57811515601360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff1615151415806114a65750801515601360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160029054906101000a900460ff16151514155b6114e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114dc9061404c565b60405180910390fd5b81601360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160016101000a81548160ff02191690831515021790555080601360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160026101000a81548160ff021916908315150217905550611730565b6000601160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414611620576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611617906142ec565b60405180910390fd5b6001601360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff02191690831515021790555081601360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160016101000a81548160ff02191690831515021790555080601360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160026101000a81548160ff0219169083151502179055505b8273ffffffffffffffffffffffffffffffffffffffff167f32007f1d99093107aa587b30e94adbad373aaa061b0ed208485221eecf52ac218383604051611778929190613f66565b60405180910390a2505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156117f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117ec906142ac565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611865576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161185c9061422c565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156118d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118cb9061426c565b60405180910390fd5b6000811415611918576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190f906141ac565b60405180910390fd5b601360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff168061197f5750601060009054906101000a900460ff165b6119be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119b5906143cc565b60405180910390fd5b601360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16158015611a685750601360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16155b15611a7d57611a788383836122aa565b611c07565b601360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff168015611b265750601360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16155b15611b3b57611b3683838361264a565b611c06565b601360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16158015611be45750601360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff165b15611bf957611bf483838361293d565b611c05565b611c04838383612c8c565b5b5b5b505050565b600082821115611c51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c489061402c565b60405180910390fd5b818303905092915050565b6000601360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16158015611cc157506000600c6002015414155b15611d3757611d34600c60010154611d26601160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600c60020154612e4890919063ffffffff16565b612eb790919063ffffffff16565b90505b919050565b600080828401905083811015611d87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d7e9061408c565b60405180910390fd5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611e01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611df8906141ec565b60405180910390fd5b6000811415611e45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e3c9061418c565b60405180910390fd5b601360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16611ed4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ecb906140ac565b60405180910390fd5b611eec81600c60030154611d3c90919063ffffffff16565b600c60030181905550611f0d81600c60000154611d3c90919063ffffffff16565b600c60000181905550611f6881601160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d3c90919063ffffffff16565b601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611fb760008383612f0e565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561202b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120229061400c565b60405180910390fd5b600081141561206f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120669061436c565b60405180910390fd5b80601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156120f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120e8906143ec565b60405180910390fd5b601360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16612180576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121779061406c565b60405180910390fd5b6121d281601160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c0c90919063ffffffff16565b601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061222d81600c60030154611c0c90919063ffffffff16565b600c6003018190555061224e81600c60000154611c0c90919063ffffffff16565b600c6000018190555061226382600083612f0e565b5050565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060008060008060008060006122c18a612f81565b809950819a508294505050506122d68a61300d565b8096508197508293505050506122f58183611d3c90919063ffffffff16565b925061230a828b611d3c90919063ffffffff16565b985061231f818b611c0c90919063ffffffff16565b955050506000600c60020154146123d757600061234f600c60020154600c60010154611d3c90919063ffffffff16565b905061237b8161236d600c600101548b612e4890919063ffffffff16565b612eb790919063ffffffff16565b97506123a781612399600c6001015488612e4890919063ffffffff16565b612eb790919063ffffffff16565b94506123d3816123c5600c6001015485612e4890919063ffffffff16565b612eb790919063ffffffff16565b9150505b86601160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015612459576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124509061416c565b60405180910390fd5b6124ab87601160008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c0c90919063ffffffff16565b601160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061254084601160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d3c90919063ffffffff16565b601160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061258e8a8a8a612f0e565b61259a8a600088612f0e565b6125c78a600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687612f0e565b6125f1836125e388600c60030154611c0c90919063ffffffff16565b611c0c90919063ffffffff16565b600c6003018190555061261281600c60010154611c0c90919063ffffffff16565b600c600101819055506126366126318387611d3c90919063ffffffff16565b613099565b61263e613221565b50505050505050505050565b80601160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156126cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126c3906140cc565b60405180910390fd5b6000806000601360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160029054906101000a900460ff1661273b5761272e8461300d565b8093508194508295505050505b60006127508486611c0c90919063ffffffff16565b90506127a485601160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c0c90919063ffffffff16565b601160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061283981601160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d3c90919063ffffffff16565b601160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612887878787612f0e565b61289386600085612f0e565b6128c086600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684612f0e565b6128d883600c60030154611c0c90919063ffffffff16565b600c600301819055506128f985600c60000154611c0c90919063ffffffff16565b600c6000018190555061291a81600c60010154611d3c90919063ffffffff16565b600c6001018190555061292c82613099565b612934613221565b50505050505050565b6000806000601360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff166129ac5761299f84612f81565b8093508194508295505050505b60006129c18486611d3c90919063ffffffff16565b90506000600c6002015414612a1f5760006129ef600c60020154600c60010154611d3c90919063ffffffff16565b9050612a1b81612a0d600c6001015485612e4890919063ffffffff16565b612eb790919063ffffffff16565b9150505b80601160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015612aa1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a9890613fcc565b60405180910390fd5b612af381601160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c0c90919063ffffffff16565b601160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612b8885601160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d3c90919063ffffffff16565b601160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612bd6878787612f0e565b612be287600085612f0e565b612c0f87600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684612f0e565b612c2783600c60030154611c0c90919063ffffffff16565b600c60030181905550612c4885600c60000154611d3c90919063ffffffff16565b600c60000181905550612c6981600c60010154611c0c90919063ffffffff16565b600c60010181905550612c7b82613099565b612c83613221565b50505050505050565b80601160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015612d0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d05906141cc565b60405180910390fd5b612d6081601160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c0c90919063ffffffff16565b601160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612df581601160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d3c90919063ffffffff16565b601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612e43838383612f0e565b505050565b6000808314158015612e5b575060008214155b15612eb157818302905081838281612e6f57fe5b0414612eb0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ea79061414c565b60405180910390fd5b5b92915050565b600080821415612efc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ef390613fec565b60405180910390fd5b818381612f0557fe5b04905092915050565b60008114612f7c578173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051612f739190614443565b60405180910390a35b505050565b600080600080612fa2600660040160000154866132aa90919063ffffffff16565b9050612fbf600660020160000154866132aa90919063ffffffff16565b9150612fdc600660000160000154866132aa90919063ffffffff16565b925061300383612ff58385611d3c90919063ffffffff16565b611d3c90919063ffffffff16565b9350509193909250565b60008060008061302e600660040160010154866132aa90919063ffffffff16565b905061304b600660020160010154866132aa90919063ffffffff16565b9150613068600660000160010154866132aa90919063ffffffff16565b925061308f836130818385611d3c90919063ffffffff16565b611d3c90919063ffffffff16565b9350509193909250565b6000811461321e576131158160116000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d3c90919063ffffffff16565b60116000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061319281600c60000154611d3c90919063ffffffff16565b600c60000181905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166339071c9e6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561320557600080fd5b505af1158015613219573d6000803e3d6000fd5b505050505b50565b6000613257600c60010154613249600c60000154600c60030154611c0c90919063ffffffff16565b611c0c90919063ffffffff16565b9050600c6002015481146132a75780600c600201819055507f8629690313970e9e42939fc905246bd1ff3a69dae5efc961f8b40a91a838dffe8160405161329e9190614443565b60405180910390a15b50565b60008083141580156132bd575060008214155b156132d9576132d66132cf8484612e48565b6064612eb7565b90505b92915050565b6000813590506132ee8161460d565b92915050565b60008135905061330381614624565b92915050565b60008083601f84011261331b57600080fd5b8235905067ffffffffffffffff81111561333457600080fd5b60208301915083602082028301111561334c57600080fd5b9250929050565b6000813590506133628161463b565b92915050565b60006040828403121561337a57600080fd5b61338460406144f5565b90506000613394848285016133b4565b60008301525060206133a8848285016133b4565b60208301525092915050565b6000813590506133c381614652565b92915050565b6000602082840312156133db57600080fd5b60006133e9848285016132df565b91505092915050565b6000806040838503121561340557600080fd5b6000613413858286016132df565b9250506020613424858286016132df565b9150509250929050565b60008060006060848603121561344357600080fd5b6000613451868287016132df565b9350506020613462868287016132df565b9250506040613473868287016133b4565b9150509250925092565b60008060006060848603121561349257600080fd5b60006134a0868287016132df565b93505060206134b186828701613353565b92505060406134c286828701613353565b9150509250925092565b600080604083850312156134df57600080fd5b60006134ed858286016132df565b92505060206134fe858286016133b4565b9150509250929050565b600080600080600080600080610140898b03121561352557600080fd5b60006135338b828c01613368565b98505060406135448b828c01613368565b97505060806135558b828c01613368565b96505060c06135668b828c016132f4565b95505060e06135778b828c016132df565b9450506101006135898b828c016133b4565b93505061012089013567ffffffffffffffff8111156135a757600080fd5b6135b38b828c01613309565b92509250509295985092959890939650565b6000602082840312156135d757600080fd5b60006135e5848285016133b4565b91505092915050565b6135f78161453e565b82525050565b61360681614562565b82525050565b613615816145a5565b82525050565b600061362682614522565b613630818561452d565b93506136408185602086016145c9565b613649816145fc565b840191505092915050565b6000613661600c8361452d565b91507f4845524f546f6b656e23323300000000000000000000000000000000000000006000830152602082019050919050565b60006136a160098361452d565b91507f4d6174684c6962233400000000000000000000000000000000000000000000006000830152602082019050919050565b60006136e1600c8361452d565b91507f4845524f546f6b656e23313200000000000000000000000000000000000000006000830152602082019050919050565b600061372160098361452d565b91507f4d6174684c6962233200000000000000000000000000000000000000000000006000830152602082019050919050565b6000613761600b8361452d565b91507f4845524f546f6b656e23350000000000000000000000000000000000000000006000830152602082019050919050565b60006137a1600c8361452d565b91507f4845524f546f6b656e23313500000000000000000000000000000000000000006000830152602082019050919050565b60006137e160098361452d565b91507f4d6174684c6962233100000000000000000000000000000000000000000000006000830152602082019050919050565b6000613821600c8361452d565b91507f4845524f546f6b656e23313100000000000000000000000000000000000000006000830152602082019050919050565b6000613861600c8361452d565b91507f4845524f546f6b656e23323200000000000000000000000000000000000000006000830152602082019050919050565b60006138a1600b8361452d565b91507f4845524f546f6b656e23380000000000000000000000000000000000000000006000830152602082019050919050565b60006138e1600b8361452d565b91507f4845524f546f6b656e23340000000000000000000000000000000000000000006000830152602082019050919050565b6000613921600b8361452d565b91507f4845524f546f6b656e23320000000000000000000000000000000000000000006000830152602082019050919050565b600061396160098361452d565b91507f4d6174684c6962233300000000000000000000000000000000000000000000006000830152602082019050919050565b60006139a1600c8361452d565b91507f4845524f546f6b656e23323100000000000000000000000000000000000000006000830152602082019050919050565b60006139e1600c8361452d565b91507f4845524f546f6b656e23313000000000000000000000000000000000000000006000830152602082019050919050565b6000613a21600c8361452d565b91507f4845524f546f6b656e23313900000000000000000000000000000000000000006000830152602082019050919050565b6000613a61600c8361452d565b91507f4845524f546f6b656e23323400000000000000000000000000000000000000006000830152602082019050919050565b6000613aa1600b8361452d565b91507f4845524f546f6b656e23390000000000000000000000000000000000000000006000830152602082019050919050565b6000613ae1600f8361452d565b91507f496e697469616c697a61626c65233200000000000000000000000000000000006000830152602082019050919050565b6000613b21600c8361452d565b91507f4845524f546f6b656e23313700000000000000000000000000000000000000006000830152602082019050919050565b6000613b61600f8361452d565b91507f496e697469616c697a61626c65233100000000000000000000000000000000006000830152602082019050919050565b6000613ba1600c8361452d565b91507f4845524f546f6b656e23313800000000000000000000000000000000000000006000830152602082019050919050565b6000613be1600b8361452d565b91507f4845524f546f6b656e23330000000000000000000000000000000000000000006000830152602082019050919050565b6000613c21600c8361452d565b91507f4845524f546f6b656e23313600000000000000000000000000000000000000006000830152602082019050919050565b6000613c6160078361452d565b91507f4f776e65642333000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000613ca1600b8361452d565b91507f4845524f546f6b656e23360000000000000000000000000000000000000000006000830152602082019050919050565b6000613ce1600b8361452d565b91507f4845524f546f6b656e23370000000000000000000000000000000000000000006000830152602082019050919050565b6000613d2160078361452d565b91507f4f776e65642332000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000613d61600c8361452d565b91507f436f6e74726f6c6c6564233100000000000000000000000000000000000000006000830152602082019050919050565b6000613da1600c8361452d565b91507f4845524f546f6b656e23313300000000000000000000000000000000000000006000830152602082019050919050565b6000613de1600b8361452d565b91507f4845524f546f6b656e23310000000000000000000000000000000000000000006000830152602082019050919050565b6000613e2160078361452d565b91507f4f776e65642331000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000613e61600c8361452d565b91507f4845524f546f6b656e23323000000000000000000000000000000000000000006000830152602082019050919050565b6000613ea1600c8361452d565b91507f4845524f546f6b656e23313400000000000000000000000000000000000000006000830152602082019050919050565b604082016000820151613eea6000850182613f03565b506020820151613efd6020850182613f03565b50505050565b613f0c8161458e565b82525050565b613f1b8161458e565b82525050565b613f2a81614598565b82525050565b6000602082019050613f4560008301846135ee565b92915050565b6000602082019050613f6060008301846135fd565b92915050565b6000604082019050613f7b60008301856135fd565b613f8860208301846135fd565b9392505050565b6000602082019050613fa4600083018461360c565b92915050565b60006020820190508181036000830152613fc4818461361b565b905092915050565b60006020820190508181036000830152613fe581613654565b9050919050565b6000602082019050818103600083015261400581613694565b9050919050565b60006020820190508181036000830152614025816136d4565b9050919050565b6000602082019050818103600083015261404581613714565b9050919050565b6000602082019050818103600083015261406581613754565b9050919050565b6000602082019050818103600083015261408581613794565b9050919050565b600060208201905081810360008301526140a5816137d4565b9050919050565b600060208201905081810360008301526140c581613814565b9050919050565b600060208201905081810360008301526140e581613854565b9050919050565b6000602082019050818103600083015261410581613894565b9050919050565b60006020820190508181036000830152614125816138d4565b9050919050565b6000602082019050818103600083015261414581613914565b9050919050565b6000602082019050818103600083015261416581613954565b9050919050565b6000602082019050818103600083015261418581613994565b9050919050565b600060208201905081810360008301526141a5816139d4565b9050919050565b600060208201905081810360008301526141c581613a14565b9050919050565b600060208201905081810360008301526141e581613a54565b9050919050565b6000602082019050818103600083015261420581613a94565b9050919050565b6000602082019050818103600083015261422581613ad4565b9050919050565b6000602082019050818103600083015261424581613b14565b9050919050565b6000602082019050818103600083015261426581613b54565b9050919050565b6000602082019050818103600083015261428581613b94565b9050919050565b600060208201905081810360008301526142a581613bd4565b9050919050565b600060208201905081810360008301526142c581613c14565b9050919050565b600060208201905081810360008301526142e581613c54565b9050919050565b6000602082019050818103600083015261430581613c94565b9050919050565b6000602082019050818103600083015261432581613cd4565b9050919050565b6000602082019050818103600083015261434581613d14565b9050919050565b6000602082019050818103600083015261436581613d54565b9050919050565b6000602082019050818103600083015261438581613d94565b9050919050565b600060208201905081810360008301526143a581613dd4565b9050919050565b600060208201905081810360008301526143c581613e14565b9050919050565b600060208201905081810360008301526143e581613e54565b9050919050565b6000602082019050818103600083015261440581613e94565b9050919050565b600060c0820190506144216000830186613ed4565b61442e6040830185613ed4565b61443b6080830184613ed4565b949350505050565b60006020820190506144586000830184613f12565b92915050565b60006060820190506144736000830186613f12565b6144806020830185613f12565b61448d6040830184613f12565b949350505050565b60006080820190506144aa6000830187613f12565b6144b76020830186613f12565b6144c46040830185613f12565b6144d16060830184613f12565b95945050505050565b60006020820190506144ef6000830184613f21565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561451857600080fd5b8060405250919050565b600081519050919050565b600082825260208201905092915050565b60006145498261456e565b9050919050565b600061455b8261456e565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006145b0826145b7565b9050919050565b60006145c28261456e565b9050919050565b60005b838110156145e75780820151818401526020810190506145cc565b838111156145f6576000848401525b50505050565b6000601f19601f8301169050919050565b6146168161453e565b811461462157600080fd5b50565b61462d81614550565b811461463857600080fd5b50565b61464481614562565b811461464f57600080fd5b50565b61465b8161458e565b811461466657600080fd5b5056fea164736f6c634300060c000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014d5760003560e01c80636ea41454116100c3578063a9059cbb1161007c578063a9059cbb1461037c578063b16a867c146103ac578063b906f15a146103cd578063dd62ed3e146103eb578063e06174e41461041b578063f77c47911461043b5761014d565b80636ea41454146102cc57806370a08231146102e85780638da5cb5b1461031857806390b5e6d91461033657806395d89b4114610354578063974654c6146103725761014d565b80632197fb25116101155780632197fb25146101f857806323b872dd146102145780632d38031514610244578063313ce5671461027657806340c10f191461029457806342966c68146102b05761014d565b806306fdde0314610152578063095ea7b31461017057806313af4035146101a0578063158ef93e146101bc57806318160ddd146101da575b600080fd5b61015a610459565b6040516101679190613faa565b60405180910390f35b61018a600480360381019061018591906134cc565b6104f7565b6040516101979190613f4b565b60405180910390f35b6101ba60048036038101906101b591906133c9565b61050e565b005b6101c461071a565b6040516101d19190613f4b565b60405180910390f35b6101e2610772565b6040516101ef9190614443565b60405180910390f35b610212600480360381019061020d919061347d565b61077f565b005b61022e6004803603810190610229919061342e565b61081f565b60405161023b9190613f4b565b60405180910390f35b61025e600480360381019061025991906133c9565b610919565b60405161026d9392919061445e565b60405180910390f35b61027e610987565b60405161028b91906144da565b60405180910390f35b6102ae60048036038101906102a991906134cc565b61099a565b005b6102ca60048036038101906102c591906135c5565b610a36565b005b6102e660048036038101906102e19190613508565b610a43565b005b61030260048036038101906102fd91906133c9565b610d86565b60405161030f9190614443565b60405180910390f35b610320610de9565b60405161032d9190613f30565b60405180910390f35b61033e610e0f565b60405161034b9190613f4b565b60405180910390f35b61035c610e22565b6040516103699190613faa565b60405180910390f35b61037a610ec0565b005b610396600480360381019061039191906134cc565b610fe9565b6040516103a39190613f4b565b60405180910390f35b6103b4611000565b6040516103c49493929190614495565b60405180910390f35b6103d561101e565b6040516103e29190613f8f565b60405180910390f35b610405600480360381019061040091906133f2565b611044565b6040516104129190614443565b60405180910390f35b6104236110cb565b6040516104329392919061440c565b60405180910390f35b61044361113d565b6040516104509190613f30565b60405180910390f35b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104ef5780601f106104c4576101008083540402835291602001916104ef565b820191906000526020600020905b8154815290600101906020018083116104d257829003601f168201915b505050505081565b6000610504338484611161565b6001905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461059e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610595906143ac565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561060e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106059061432c565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561069f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610696906142cc565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f4ffd725fc4a22075e9ec71c59edf9c38cdeb588a91b24fc5b61388c5be41282b8160405161070f9190613f30565b60405180910390a150565b60008073ffffffffffffffffffffffffffffffffffffffff16600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905090565b6000600c60030154905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461080f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610806906143ac565b60405180910390fd5b61081a83838361132c565b505050565b600061082c848484611785565b6000601260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828110156108f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e79061428c565b60405180910390fd5b61090d85336109088685611c0c90919063ffffffff16565b611161565b60019150509392505050565b6000806000601160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915061096984611c5c565b905061097e8183611d3c90919063ffffffff16565b92509193909250565b600460009054906101000a900460ff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1f9061434c565b60405180910390fd5b610a328282611d91565b5050565b610a403382611fbb565b50565b600073ffffffffffffffffffffffffffffffffffffffff16600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610ad5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610acc9061424c565b60405180910390fd5b600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5c9061420c565b60405180910390fd5b6000600460016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555087600660000160008201518160000155602082015181600101559050508660066002016000820151816000015560208201518160010155905050856006600401600082015181600001556020820151816001015590505060008760000151141580610c1757506000876020015114155b15610cda57600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415610c8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c839061438c565b60405180910390fd5b84600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610cd98560008061132c565b5b610ce384612267565b60008314610d0257610cf73360018061132c565b610d013384611d91565b5b600082829050905060005b81811015610d4e57610d41848483818110610d2457fe5b9050602002016020810190610d3991906133c9565b60008061132c565b8080600101915050610d0d565b50507f5daa87a0e9463431830481fd4b6e3403442dfb9a12b9c07597e9f61d50b633c860405160405180910390a15050505050505050565b6000610de2610d9483611c5c565b601160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d3c90919063ffffffff16565b9050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b601060009054906101000a900460ff1681565b60038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610eb85780601f10610e8d57610100808354040283529160200191610eb8565b820191906000526020600020905b815481529060010190602001808311610e9b57829003601f168201915b505050505081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f47906143ac565b60405180910390fd5b601060009054906101000a900460ff1615610fa0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f979061412c565b60405180910390fd5b6001601060006101000a81548160ff0219169083151502179055507f0b5ca8ee9a23a12c9bb341511e83987d73bee14e96dc855aeaea8840c54ea0bd60405160405180910390a1565b6000610ff6338484611785565b6001905092915050565b600c8060000154908060010154908060020154908060030154905084565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000601260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60068060000160405180604001604052908160008201548152602001600182015481525050908060020160405180604001604052908160008201548152602001600182015481525050908060040160405180604001604052908160008201548152602001600182015481525050905083565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156111d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111c89061430c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611241576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611238906140ec565b60405180910390fd5b80601260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161131f9190614443565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561139c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113939061410c565b60405180910390fd5b601360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff161561159e57811515601360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff1615151415806114a65750801515601360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160029054906101000a900460ff16151514155b6114e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114dc9061404c565b60405180910390fd5b81601360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160016101000a81548160ff02191690831515021790555080601360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160026101000a81548160ff021916908315150217905550611730565b6000601160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414611620576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611617906142ec565b60405180910390fd5b6001601360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff02191690831515021790555081601360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160016101000a81548160ff02191690831515021790555080601360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160026101000a81548160ff0219169083151502179055505b8273ffffffffffffffffffffffffffffffffffffffff167f32007f1d99093107aa587b30e94adbad373aaa061b0ed208485221eecf52ac218383604051611778929190613f66565b60405180910390a2505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156117f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117ec906142ac565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611865576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161185c9061422c565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156118d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118cb9061426c565b60405180910390fd5b6000811415611918576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190f906141ac565b60405180910390fd5b601360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff168061197f5750601060009054906101000a900460ff165b6119be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119b5906143cc565b60405180910390fd5b601360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16158015611a685750601360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16155b15611a7d57611a788383836122aa565b611c07565b601360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff168015611b265750601360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16155b15611b3b57611b3683838361264a565b611c06565b601360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16158015611be45750601360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff165b15611bf957611bf483838361293d565b611c05565b611c04838383612c8c565b5b5b5b505050565b600082821115611c51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c489061402c565b60405180910390fd5b818303905092915050565b6000601360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16158015611cc157506000600c6002015414155b15611d3757611d34600c60010154611d26601160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600c60020154612e4890919063ffffffff16565b612eb790919063ffffffff16565b90505b919050565b600080828401905083811015611d87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d7e9061408c565b60405180910390fd5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611e01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611df8906141ec565b60405180910390fd5b6000811415611e45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e3c9061418c565b60405180910390fd5b601360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16611ed4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ecb906140ac565b60405180910390fd5b611eec81600c60030154611d3c90919063ffffffff16565b600c60030181905550611f0d81600c60000154611d3c90919063ffffffff16565b600c60000181905550611f6881601160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d3c90919063ffffffff16565b601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611fb760008383612f0e565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561202b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120229061400c565b60405180910390fd5b600081141561206f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120669061436c565b60405180910390fd5b80601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156120f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120e8906143ec565b60405180910390fd5b601360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16612180576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121779061406c565b60405180910390fd5b6121d281601160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c0c90919063ffffffff16565b601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061222d81600c60030154611c0c90919063ffffffff16565b600c6003018190555061224e81600c60000154611c0c90919063ffffffff16565b600c6000018190555061226382600083612f0e565b5050565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060008060008060008060006122c18a612f81565b809950819a508294505050506122d68a61300d565b8096508197508293505050506122f58183611d3c90919063ffffffff16565b925061230a828b611d3c90919063ffffffff16565b985061231f818b611c0c90919063ffffffff16565b955050506000600c60020154146123d757600061234f600c60020154600c60010154611d3c90919063ffffffff16565b905061237b8161236d600c600101548b612e4890919063ffffffff16565b612eb790919063ffffffff16565b97506123a781612399600c6001015488612e4890919063ffffffff16565b612eb790919063ffffffff16565b94506123d3816123c5600c6001015485612e4890919063ffffffff16565b612eb790919063ffffffff16565b9150505b86601160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015612459576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124509061416c565b60405180910390fd5b6124ab87601160008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c0c90919063ffffffff16565b601160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061254084601160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d3c90919063ffffffff16565b601160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061258e8a8a8a612f0e565b61259a8a600088612f0e565b6125c78a600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687612f0e565b6125f1836125e388600c60030154611c0c90919063ffffffff16565b611c0c90919063ffffffff16565b600c6003018190555061261281600c60010154611c0c90919063ffffffff16565b600c600101819055506126366126318387611d3c90919063ffffffff16565b613099565b61263e613221565b50505050505050505050565b80601160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156126cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126c3906140cc565b60405180910390fd5b6000806000601360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160029054906101000a900460ff1661273b5761272e8461300d565b8093508194508295505050505b60006127508486611c0c90919063ffffffff16565b90506127a485601160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c0c90919063ffffffff16565b601160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061283981601160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d3c90919063ffffffff16565b601160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612887878787612f0e565b61289386600085612f0e565b6128c086600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684612f0e565b6128d883600c60030154611c0c90919063ffffffff16565b600c600301819055506128f985600c60000154611c0c90919063ffffffff16565b600c6000018190555061291a81600c60010154611d3c90919063ffffffff16565b600c6001018190555061292c82613099565b612934613221565b50505050505050565b6000806000601360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff166129ac5761299f84612f81565b8093508194508295505050505b60006129c18486611d3c90919063ffffffff16565b90506000600c6002015414612a1f5760006129ef600c60020154600c60010154611d3c90919063ffffffff16565b9050612a1b81612a0d600c6001015485612e4890919063ffffffff16565b612eb790919063ffffffff16565b9150505b80601160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015612aa1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a9890613fcc565b60405180910390fd5b612af381601160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c0c90919063ffffffff16565b601160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612b8885601160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d3c90919063ffffffff16565b601160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612bd6878787612f0e565b612be287600085612f0e565b612c0f87600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684612f0e565b612c2783600c60030154611c0c90919063ffffffff16565b600c60030181905550612c4885600c60000154611d3c90919063ffffffff16565b600c60000181905550612c6981600c60010154611c0c90919063ffffffff16565b600c60010181905550612c7b82613099565b612c83613221565b50505050505050565b80601160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015612d0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d05906141cc565b60405180910390fd5b612d6081601160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c0c90919063ffffffff16565b601160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612df581601160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d3c90919063ffffffff16565b601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612e43838383612f0e565b505050565b6000808314158015612e5b575060008214155b15612eb157818302905081838281612e6f57fe5b0414612eb0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ea79061414c565b60405180910390fd5b5b92915050565b600080821415612efc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ef390613fec565b60405180910390fd5b818381612f0557fe5b04905092915050565b60008114612f7c578173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051612f739190614443565b60405180910390a35b505050565b600080600080612fa2600660040160000154866132aa90919063ffffffff16565b9050612fbf600660020160000154866132aa90919063ffffffff16565b9150612fdc600660000160000154866132aa90919063ffffffff16565b925061300383612ff58385611d3c90919063ffffffff16565b611d3c90919063ffffffff16565b9350509193909250565b60008060008061302e600660040160010154866132aa90919063ffffffff16565b905061304b600660020160010154866132aa90919063ffffffff16565b9150613068600660000160010154866132aa90919063ffffffff16565b925061308f836130818385611d3c90919063ffffffff16565b611d3c90919063ffffffff16565b9350509193909250565b6000811461321e576131158160116000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d3c90919063ffffffff16565b60116000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061319281600c60000154611d3c90919063ffffffff16565b600c60000181905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166339071c9e6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561320557600080fd5b505af1158015613219573d6000803e3d6000fd5b505050505b50565b6000613257600c60010154613249600c60000154600c60030154611c0c90919063ffffffff16565b611c0c90919063ffffffff16565b9050600c6002015481146132a75780600c600201819055507f8629690313970e9e42939fc905246bd1ff3a69dae5efc961f8b40a91a838dffe8160405161329e9190614443565b60405180910390a15b50565b60008083141580156132bd575060008214155b156132d9576132d66132cf8484612e48565b6064612eb7565b90505b92915050565b6000813590506132ee8161460d565b92915050565b60008135905061330381614624565b92915050565b60008083601f84011261331b57600080fd5b8235905067ffffffffffffffff81111561333457600080fd5b60208301915083602082028301111561334c57600080fd5b9250929050565b6000813590506133628161463b565b92915050565b60006040828403121561337a57600080fd5b61338460406144f5565b90506000613394848285016133b4565b60008301525060206133a8848285016133b4565b60208301525092915050565b6000813590506133c381614652565b92915050565b6000602082840312156133db57600080fd5b60006133e9848285016132df565b91505092915050565b6000806040838503121561340557600080fd5b6000613413858286016132df565b9250506020613424858286016132df565b9150509250929050565b60008060006060848603121561344357600080fd5b6000613451868287016132df565b9350506020613462868287016132df565b9250506040613473868287016133b4565b9150509250925092565b60008060006060848603121561349257600080fd5b60006134a0868287016132df565b93505060206134b186828701613353565b92505060406134c286828701613353565b9150509250925092565b600080604083850312156134df57600080fd5b60006134ed858286016132df565b92505060206134fe858286016133b4565b9150509250929050565b600080600080600080600080610140898b03121561352557600080fd5b60006135338b828c01613368565b98505060406135448b828c01613368565b97505060806135558b828c01613368565b96505060c06135668b828c016132f4565b95505060e06135778b828c016132df565b9450506101006135898b828c016133b4565b93505061012089013567ffffffffffffffff8111156135a757600080fd5b6135b38b828c01613309565b92509250509295985092959890939650565b6000602082840312156135d757600080fd5b60006135e5848285016133b4565b91505092915050565b6135f78161453e565b82525050565b61360681614562565b82525050565b613615816145a5565b82525050565b600061362682614522565b613630818561452d565b93506136408185602086016145c9565b613649816145fc565b840191505092915050565b6000613661600c8361452d565b91507f4845524f546f6b656e23323300000000000000000000000000000000000000006000830152602082019050919050565b60006136a160098361452d565b91507f4d6174684c6962233400000000000000000000000000000000000000000000006000830152602082019050919050565b60006136e1600c8361452d565b91507f4845524f546f6b656e23313200000000000000000000000000000000000000006000830152602082019050919050565b600061372160098361452d565b91507f4d6174684c6962233200000000000000000000000000000000000000000000006000830152602082019050919050565b6000613761600b8361452d565b91507f4845524f546f6b656e23350000000000000000000000000000000000000000006000830152602082019050919050565b60006137a1600c8361452d565b91507f4845524f546f6b656e23313500000000000000000000000000000000000000006000830152602082019050919050565b60006137e160098361452d565b91507f4d6174684c6962233100000000000000000000000000000000000000000000006000830152602082019050919050565b6000613821600c8361452d565b91507f4845524f546f6b656e23313100000000000000000000000000000000000000006000830152602082019050919050565b6000613861600c8361452d565b91507f4845524f546f6b656e23323200000000000000000000000000000000000000006000830152602082019050919050565b60006138a1600b8361452d565b91507f4845524f546f6b656e23380000000000000000000000000000000000000000006000830152602082019050919050565b60006138e1600b8361452d565b91507f4845524f546f6b656e23340000000000000000000000000000000000000000006000830152602082019050919050565b6000613921600b8361452d565b91507f4845524f546f6b656e23320000000000000000000000000000000000000000006000830152602082019050919050565b600061396160098361452d565b91507f4d6174684c6962233300000000000000000000000000000000000000000000006000830152602082019050919050565b60006139a1600c8361452d565b91507f4845524f546f6b656e23323100000000000000000000000000000000000000006000830152602082019050919050565b60006139e1600c8361452d565b91507f4845524f546f6b656e23313000000000000000000000000000000000000000006000830152602082019050919050565b6000613a21600c8361452d565b91507f4845524f546f6b656e23313900000000000000000000000000000000000000006000830152602082019050919050565b6000613a61600c8361452d565b91507f4845524f546f6b656e23323400000000000000000000000000000000000000006000830152602082019050919050565b6000613aa1600b8361452d565b91507f4845524f546f6b656e23390000000000000000000000000000000000000000006000830152602082019050919050565b6000613ae1600f8361452d565b91507f496e697469616c697a61626c65233200000000000000000000000000000000006000830152602082019050919050565b6000613b21600c8361452d565b91507f4845524f546f6b656e23313700000000000000000000000000000000000000006000830152602082019050919050565b6000613b61600f8361452d565b91507f496e697469616c697a61626c65233100000000000000000000000000000000006000830152602082019050919050565b6000613ba1600c8361452d565b91507f4845524f546f6b656e23313800000000000000000000000000000000000000006000830152602082019050919050565b6000613be1600b8361452d565b91507f4845524f546f6b656e23330000000000000000000000000000000000000000006000830152602082019050919050565b6000613c21600c8361452d565b91507f4845524f546f6b656e23313600000000000000000000000000000000000000006000830152602082019050919050565b6000613c6160078361452d565b91507f4f776e65642333000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000613ca1600b8361452d565b91507f4845524f546f6b656e23360000000000000000000000000000000000000000006000830152602082019050919050565b6000613ce1600b8361452d565b91507f4845524f546f6b656e23370000000000000000000000000000000000000000006000830152602082019050919050565b6000613d2160078361452d565b91507f4f776e65642332000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000613d61600c8361452d565b91507f436f6e74726f6c6c6564233100000000000000000000000000000000000000006000830152602082019050919050565b6000613da1600c8361452d565b91507f4845524f546f6b656e23313300000000000000000000000000000000000000006000830152602082019050919050565b6000613de1600b8361452d565b91507f4845524f546f6b656e23310000000000000000000000000000000000000000006000830152602082019050919050565b6000613e2160078361452d565b91507f4f776e65642331000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000613e61600c8361452d565b91507f4845524f546f6b656e23323000000000000000000000000000000000000000006000830152602082019050919050565b6000613ea1600c8361452d565b91507f4845524f546f6b656e23313400000000000000000000000000000000000000006000830152602082019050919050565b604082016000820151613eea6000850182613f03565b506020820151613efd6020850182613f03565b50505050565b613f0c8161458e565b82525050565b613f1b8161458e565b82525050565b613f2a81614598565b82525050565b6000602082019050613f4560008301846135ee565b92915050565b6000602082019050613f6060008301846135fd565b92915050565b6000604082019050613f7b60008301856135fd565b613f8860208301846135fd565b9392505050565b6000602082019050613fa4600083018461360c565b92915050565b60006020820190508181036000830152613fc4818461361b565b905092915050565b60006020820190508181036000830152613fe581613654565b9050919050565b6000602082019050818103600083015261400581613694565b9050919050565b60006020820190508181036000830152614025816136d4565b9050919050565b6000602082019050818103600083015261404581613714565b9050919050565b6000602082019050818103600083015261406581613754565b9050919050565b6000602082019050818103600083015261408581613794565b9050919050565b600060208201905081810360008301526140a5816137d4565b9050919050565b600060208201905081810360008301526140c581613814565b9050919050565b600060208201905081810360008301526140e581613854565b9050919050565b6000602082019050818103600083015261410581613894565b9050919050565b60006020820190508181036000830152614125816138d4565b9050919050565b6000602082019050818103600083015261414581613914565b9050919050565b6000602082019050818103600083015261416581613954565b9050919050565b6000602082019050818103600083015261418581613994565b9050919050565b600060208201905081810360008301526141a5816139d4565b9050919050565b600060208201905081810360008301526141c581613a14565b9050919050565b600060208201905081810360008301526141e581613a54565b9050919050565b6000602082019050818103600083015261420581613a94565b9050919050565b6000602082019050818103600083015261422581613ad4565b9050919050565b6000602082019050818103600083015261424581613b14565b9050919050565b6000602082019050818103600083015261426581613b54565b9050919050565b6000602082019050818103600083015261428581613b94565b9050919050565b600060208201905081810360008301526142a581613bd4565b9050919050565b600060208201905081810360008301526142c581613c14565b9050919050565b600060208201905081810360008301526142e581613c54565b9050919050565b6000602082019050818103600083015261430581613c94565b9050919050565b6000602082019050818103600083015261432581613cd4565b9050919050565b6000602082019050818103600083015261434581613d14565b9050919050565b6000602082019050818103600083015261436581613d54565b9050919050565b6000602082019050818103600083015261438581613d94565b9050919050565b600060208201905081810360008301526143a581613dd4565b9050919050565b600060208201905081810360008301526143c581613e14565b9050919050565b600060208201905081810360008301526143e581613e54565b9050919050565b6000602082019050818103600083015261440581613e94565b9050919050565b600060c0820190506144216000830186613ed4565b61442e6040830185613ed4565b61443b6080830184613ed4565b949350505050565b60006020820190506144586000830184613f12565b92915050565b60006060820190506144736000830186613f12565b6144806020830185613f12565b61448d6040830184613f12565b949350505050565b60006080820190506144aa6000830187613f12565b6144b76020830186613f12565b6144c46040830185613f12565b6144d16060830184613f12565b95945050505050565b60006020820190506144ef6000830184613f21565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561451857600080fd5b8060405250919050565b600081519050919050565b600082825260208201905092915050565b60006145498261456e565b9050919050565b600061455b8261456e565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006145b0826145b7565b9050919050565b60006145c28261456e565b9050919050565b60005b838110156145e75780820151818401526020810190506145cc565b838111156145f6576000848401525b50505050565b6000601f19601f8301169050919050565b6146168161453e565b811461462157600080fd5b50565b61462d81614550565b811461463857600080fd5b50565b61464481614562565b811461464f57600080fd5b50565b61465b8161458e565b811461466657600080fd5b5056fea164736f6c634300060c000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Public constructor"
      }
    },
    "title": "HERO token",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2924,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "controller",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3072,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3168,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 3171,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 3174,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "decimals",
        "offset": 0,
        "slot": "4",
        "type": "t_uint8"
      },
      {
        "astId": 3290,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "initializer",
        "offset": 1,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 1310,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "lpManager",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(HEROLPManager)113"
      },
      {
        "astId": 1312,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "settings",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(Settings)1283_storage"
      },
      {
        "astId": 1314,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "summary",
        "offset": 0,
        "slot": "12",
        "type": "t_struct(Summary)1292_storage"
      },
      {
        "astId": 1316,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "presaleFinished",
        "offset": 0,
        "slot": "16",
        "type": "t_bool"
      },
      {
        "astId": 1320,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "accountBalances",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1326,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "accountAllowances",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1330,
        "contract": "src/HEROToken.sol:HEROToken",
        "label": "excludedAccounts",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_struct(ExcludedAccount)1299_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(HEROLPManager)113": {
        "encoding": "inplace",
        "label": "contract HEROLPManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(ExcludedAccount)1299_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct HEROToken.ExcludedAccount)",
        "numberOfBytes": "32",
        "value": "t_struct(ExcludedAccount)1299_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ExcludedAccount)1299_storage": {
        "encoding": "inplace",
        "label": "struct HEROToken.ExcludedAccount",
        "members": [
          {
            "astId": 1294,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "exists",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1296,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "excludeSenderFromFee",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1298,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "excludeRecipientFromFee",
            "offset": 2,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Fees)1276_storage": {
        "encoding": "inplace",
        "label": "struct HEROToken.Fees",
        "members": [
          {
            "astId": 1273,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "sender",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1275,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "recipient",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Settings)1283_storage": {
        "encoding": "inplace",
        "label": "struct HEROToken.Settings",
        "members": [
          {
            "astId": 1278,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "burnFees",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Fees)1276_storage"
          },
          {
            "astId": 1280,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "lpFees",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(Fees)1276_storage"
          },
          {
            "astId": 1282,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "rewardsFees",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(Fees)1276_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Summary)1292_storage": {
        "encoding": "inplace",
        "label": "struct HEROToken.Summary",
        "members": [
          {
            "astId": 1285,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "totalExcluded",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1287,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "totalHolding",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1289,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "totalRewards",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1291,
            "contract": "src/HEROToken.sol:HEROToken",
            "label": "totalSupply",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}