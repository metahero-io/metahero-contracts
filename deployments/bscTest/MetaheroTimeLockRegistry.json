{
  "address": "0xB96E2A891e72B9aE5AA822C0Fe3Bd7F5E373eE0a",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "claimerWallet",
          "type": "address"
        }
      ],
      "name": "ClaimerWalletCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "claimerWallet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "TokensLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "claimerWallet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "TokensUnlocked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "claimTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "claimTokensTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        }
      ],
      "name": "computeClaimerWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "result",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        }
      ],
      "name": "createClaimerWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        }
      ],
      "name": "getClaimerTimeLocks",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct MetaheroTimeLockRegistry.TimeLock[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unlockedIn",
          "type": "uint256"
        }
      ],
      "name": "lockTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unlockedIn",
          "type": "uint256"
        }
      ],
      "name": "lockTokensTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract MetaheroToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3db0995dd6565ec17b83e98f516fa7be7c06844a5f9d6541f20fa0dcb39ff0ac",
  "receipt": {
    "to": null,
    "from": "0x2101F46D23b84eEa6a310B1dBa58f66DCE17A0Cf",
    "contractAddress": "0xB96E2A891e72B9aE5AA822C0Fe3Bd7F5E373eE0a",
    "transactionIndex": 2,
    "gasUsed": "2683287",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xb646287e076a35bb7026c379fcda902025850a2a82d31a1f41f77bb8e9c26376",
    "transactionHash": "0x3db0995dd6565ec17b83e98f516fa7be7c06844a5f9d6541f20fa0dcb39ff0ac",
    "logs": [],
    "blockNumber": 10410442,
    "cumulativeGasUsed": "2725287",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "fab365b889fcb24061489606cb788823",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimerWallet\",\"type\":\"address\"}],\"name\":\"ClaimerWalletCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimerWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"TokensLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimerWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"TokensUnlocked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"claimTokensTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"computeClaimerWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"result\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"createClaimerWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"getClaimerTimeLocks\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct MetaheroTimeLockRegistry.TimeLock[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedIn\",\"type\":\"uint256\"}],\"name\":\"lockTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedIn\",\"type\":\"uint256\"}],\"name\":\"lockTokensTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract MetaheroToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Stanis\\u0142aw G\\u0142ogowski <stan@metahero.io>\",\"events\":{\"ClaimerWalletCreated(address,address)\":{\"details\":\"Emitted when the claimer wallet is created\",\"params\":{\"claimer\":\"claimer address\",\"claimerWallet\":\"claimer wallet address\"}},\"Initialized(address)\":{\"details\":\"Emitted when the contract is initialized\",\"params\":{\"token\":\"token address\"}},\"TokensLocked(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when tokens are locked\",\"params\":{\"amount\":\"tokens amount\",\"claimer\":\"claimer address\",\"claimerWallet\":\"claimer wallet address\",\"deadline\":\"deadline in seconds\",\"spender\":\"spender address\"}},\"TokensUnlocked(address,address,address,address,uint256,uint256)\":{\"details\":\"Emitted when tokens are unlocked\",\"params\":{\"amount\":\"tokens amount\",\"claimer\":\"claimer address\",\"claimerWallet\":\"claimer wallet address\",\"deadline\":\"deadline in seconds\",\"recipient\":\"recipient address\",\"spender\":\"spender address\"}}},\"kind\":\"dev\",\"methods\":{\"claimTokens()\":{\"details\":\"Claims tokens\"},\"claimTokensTo(address)\":{\"details\":\"Claims tokens to recipient\",\"params\":{\"recipient\":\"recipient address\"}},\"computeClaimerWallet(address)\":{\"details\":\"Computes claimer wallet\",\"params\":{\"claimer\":\"claimer address\"},\"returns\":{\"result\":\"claimer wallet address\"}},\"constructor\":{\"details\":\"Public constructor\"},\"createClaimerWallet(address)\":{\"details\":\"Creates claimer wallet\",\"params\":{\"claimer\":\"claimer address\"}},\"getClaimerTimeLocks(address)\":{\"details\":\"Gets claimer time locks\",\"params\":{\"claimer\":\"claimer address\"},\"returns\":{\"_0\":\"array of time locks\"}},\"initialize(address)\":{\"details\":\"Initializes the contract\",\"params\":{\"token_\":\"token address\"}},\"initialized()\":{\"returns\":{\"_0\":\"true when contract is initialized\"}},\"lockTokens(uint256,uint256)\":{\"details\":\"Locks own tokens\",\"params\":{\"amount\":\"tokens amount\",\"unlockedIn\":\"seconds to unlock\"}},\"lockTokensTo(address,uint256,uint256)\":{\"details\":\"Locks tokens to claimer\",\"params\":{\"amount\":\"tokens amount\",\"claimer\":\"claimer address\",\"unlockedIn\":\"seconds to unlock\"}}},\"stateVariables\":{\"token\":{\"return\":\"token address\"}},\"title\":\"Metahero time lock registry\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initialized()\":{\"notice\":\"Checks if contract is initialized\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/MetaheroTimeLockRegistry.sol\":\"MetaheroTimeLockRegistry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/IMetaheroDAO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Metahero DAO interface\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@metahero.io>\\n */\\ninterface IMetaheroDAO {\\n  // external functions\\n\\n  /**\\n   * @notice Called by a token to sync a dao member\\n   * @param member member address\\n   * @param memberWeight member weight\\n   * @param totalWeight all members weight\\n   */\\n  function syncMember(\\n    address member,\\n    uint256 memberWeight,\\n    uint256 totalWeight\\n  )\\n    external;\\n\\n  /**\\n   * @notice Called by a token to sync a dao members\\n   * @param memberA member A address\\n   * @param memberAWeight member A weight\\n   * @param memberB member B address\\n   * @param memberBWeight member B weight\\n   * @param totalWeight all members weight\\n   */\\n  function syncMembers(\\n    address memberA,\\n    uint256 memberAWeight,\\n    address memberB,\\n    uint256 memberBWeight,\\n    uint256 totalWeight\\n  )\\n    external;\\n}\\n\",\"keccak256\":\"0xaa68c9443d03578bfe95ea1c70344c80fb414c9878b72b66541d63cb7cea26a2\",\"license\":\"MIT\"},\"src/MetaheroLPM.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"./core/access/Lockable.sol\\\";\\nimport \\\"./core/access/Owned.sol\\\";\\nimport \\\"./core/lifecycle/Initializable.sol\\\";\\nimport \\\"./core/math/SafeMathLib.sol\\\";\\nimport \\\"./MetaheroToken.sol\\\";\\n\\n\\n/**\\n * @title Metahero abstract liquidity pool manager\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@metahero.io>\\n */\\nabstract contract MetaheroLPM is Lockable, Owned, Initializable {\\n  using SafeMathLib for uint256;\\n\\n  /**\\n   * @return token address\\n   */\\n  MetaheroToken public token;\\n\\n  // modifiers\\n\\n  /**\\n   * @dev Throws if msg.sender is not the token\\n   */\\n  modifier onlyToken() {\\n    require(\\n      msg.sender == address(token),\\n      \\\"MetaheroLPM#1\\\" // msg.sender is not the token\\n    );\\n\\n    _;\\n  }\\n\\n  // events\\n\\n  /**\\n   * @dev Emitted when tokens from the liquidity pool are burned\\n   * @param amount burnt amount\\n   */\\n  event LPBurnt(\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor ()\\n    internal\\n    Lockable()\\n    Owned()\\n    Initializable()\\n  {\\n    //\\n  }\\n\\n  // external functions\\n\\n  /**\\n   * @notice Syncs liquidity pool\\n   */\\n  function syncLP()\\n    external\\n    onlyToken\\n    lock\\n  {\\n    _syncLP();\\n  }\\n\\n  /**\\n   * @notice Burns tokens from the liquidity pool\\n   * @param amount tokens amount\\n   */\\n  function burnLP(\\n    uint256 amount\\n  )\\n    external\\n    onlyOwner\\n    lockOrThrowError\\n  {\\n    require(\\n      amount != 0,\\n      \\\"MetaheroLPM#2\\\" // amount is zero\\n    );\\n\\n    _burnLP(amount);\\n\\n    emit LPBurnt(\\n      amount\\n    );\\n  }\\n\\n  // external functions (views)\\n\\n  function canSyncLP(\\n    address sender,\\n    address recipient\\n  )\\n    external\\n    view\\n    virtual\\n    returns (\\n      bool shouldSyncLPBefore,\\n      bool shouldSyncLPAfter\\n    );\\n\\n  // internal functions\\n\\n  function _initialize(\\n    address token_\\n  )\\n    internal\\n  {\\n    require(\\n      token_ != address(0),\\n      \\\"MetaheroLPM#3\\\" // token is the zero address\\n    );\\n\\n    token = MetaheroToken(token_);\\n  }\\n\\n  function _syncLP()\\n    internal\\n    virtual;\\n\\n  function _burnLP(\\n    uint256 amount\\n  )\\n    internal\\n    virtual;\\n}\\n\",\"keccak256\":\"0x471162c079f9176e3ab754e90964ac14bac1764edc9af77b3fa740b8b9744c40\",\"license\":\"MIT\"},\"src/MetaheroTimeLockRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./core/lifecycle/Initializable.sol\\\";\\nimport \\\"./core/math/SafeMathLib.sol\\\";\\nimport \\\"./MetaheroTimeLockWallet.sol\\\";\\nimport \\\"./MetaheroToken.sol\\\";\\n\\n\\n/**\\n * @title Metahero time lock registry\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@metahero.io>\\n */\\ncontract MetaheroTimeLockRegistry is Initializable {\\n  using SafeMathLib for uint256;\\n\\n  struct TimeLock {\\n    address spender;\\n    uint256 amount;\\n    uint256 deadline;\\n  }\\n\\n  /**\\n   * @return token address\\n   */\\n  MetaheroToken public token;\\n\\n  mapping (address => address) private claimerWallets;\\n  mapping (address => TimeLock[]) private claimerTimeLocks;\\n\\n  // events\\n\\n  /**\\n   * @dev Emitted when the contract is initialized\\n   * @param token token address\\n   */\\n  event Initialized(\\n    address token\\n  );\\n\\n  /**\\n   * @dev Emitted when the claimer wallet is created\\n   * @param claimer claimer address\\n   * @param claimerWallet claimer wallet address\\n   */\\n  event ClaimerWalletCreated(\\n    address indexed claimer,\\n    address claimerWallet\\n  );\\n\\n  /**\\n   * @dev Emitted when tokens are locked\\n   * @param spender spender address\\n   * @param claimer claimer address\\n   * @param claimerWallet claimer wallet address\\n   * @param amount tokens amount\\n   * @param deadline deadline in seconds\\n   */\\n  event TokensLocked(\\n    address indexed spender,\\n    address indexed claimer,\\n    address claimerWallet,\\n    uint256 amount,\\n    uint256 deadline\\n  );\\n\\n  /**\\n   * @dev Emitted when tokens are unlocked\\n   * @param spender spender address\\n   * @param claimer claimer address\\n   * @param claimerWallet claimer wallet address\\n   * @param recipient recipient address\\n   * @param amount tokens amount\\n   * @param deadline deadline in seconds\\n   */\\n  event TokensUnlocked(\\n    address indexed spender,\\n    address indexed claimer,\\n    address claimerWallet,\\n    address recipient,\\n    uint256 amount,\\n    uint256 deadline\\n  );\\n\\n  /**\\n   * @dev Public constructor\\n   */\\n  constructor ()\\n    public\\n    Initializable()\\n  {\\n    //\\n  }\\n\\n  // external functions\\n\\n  /**\\n   * @dev Initializes the contract\\n   * @param token_ token address\\n   */\\n  function initialize(\\n    address token_\\n  )\\n    external\\n    onlyInitializer\\n  {\\n    require(\\n      token_ != address(0),\\n      \\\"MetaheroTimeLockRegistry#1\\\" // token is the zero address\\n    );\\n\\n    token = MetaheroToken(token_);\\n\\n    emit Initialized(\\n      token_\\n    );\\n  }\\n\\n  /**\\n   * @dev Creates claimer wallet\\n   * @param claimer claimer address\\n   */\\n  function createClaimerWallet(\\n    address claimer\\n  )\\n    external\\n  {\\n    require(\\n      claimer != address(0),\\n      \\\"MetaheroTimeLockRegistry#2\\\" // claimer is the zero address\\n    );\\n\\n    require(\\n      claimerWallets[claimer] == address(0),\\n      \\\"MetaheroTimeLockRegistry#3\\\" // claimer wallet already created\\n    );\\n\\n    _createClaimerWallet(claimer);\\n  }\\n\\n  /**\\n   * @dev Locks tokens to claimer\\n   * @param claimer claimer address\\n   * @param amount tokens amount\\n   * @param unlockedIn seconds to unlock\\n   */\\n  function lockTokensTo(\\n    address claimer,\\n    uint256 amount,\\n    uint256 unlockedIn\\n  )\\n    external\\n  {\\n    _lockTokens(\\n      msg.sender,\\n      claimer,\\n      amount,\\n      unlockedIn\\n    );\\n  }\\n\\n  /**\\n   * @dev Locks own tokens\\n   * @param amount tokens amount\\n   * @param unlockedIn seconds to unlock\\n   */\\n  function lockTokens(\\n    uint256 amount,\\n    uint256 unlockedIn\\n  )\\n    external\\n  {\\n    _lockTokens(\\n      msg.sender,\\n      msg.sender,\\n      amount,\\n      unlockedIn\\n    );\\n  }\\n\\n  /**\\n   * @dev Claims tokens\\n   */\\n  function claimTokens()\\n    external\\n  {\\n    _claimTokens(\\n      msg.sender,\\n      msg.sender\\n    );\\n  }\\n\\n  /**\\n   * @dev Claims tokens to recipient\\n   * @param recipient recipient address\\n   */\\n  function claimTokensTo(\\n    address recipient\\n  )\\n    external\\n  {\\n    _claimTokens(\\n      msg.sender,\\n      recipient\\n    );\\n  }\\n\\n  // external functions (views)\\n\\n  /**\\n   * @dev Computes claimer wallet\\n   * @param claimer claimer address\\n   * @return result claimer wallet address\\n   */\\n  function computeClaimerWallet(\\n    address claimer\\n  )\\n    external\\n    view\\n    returns (address result)\\n  {\\n    if (claimer != address(0)) {\\n      if (claimerWallets[claimer] != address(0)) {\\n        result = claimerWallets[claimer];\\n      } else {\\n        bytes32 salt = keccak256(abi.encodePacked(claimer));\\n\\n        bytes memory creationCode = abi.encodePacked(\\n          type(MetaheroTimeLockWallet).creationCode,\\n          bytes12(0),\\n          address(token)\\n        );\\n\\n        bytes32 hash = keccak256(\\n          abi.encodePacked(\\n            bytes1(0xff),\\n            address(this),\\n            salt,\\n            keccak256(creationCode)\\n          )\\n        );\\n\\n        return address(uint160(uint256(hash)));\\n      }\\n    }\\n\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Gets claimer time locks\\n   * @param claimer claimer address\\n   * @return array of time locks\\n   */\\n  function getClaimerTimeLocks(\\n    address claimer\\n  )\\n    external\\n    view\\n    returns (TimeLock[] memory)\\n  {\\n    return claimerTimeLocks[claimer];\\n  }\\n\\n  // private functions\\n\\n  function _createClaimerWallet(\\n    address claimer\\n  )\\n    private\\n  {\\n    bytes32 salt = keccak256(abi.encodePacked(claimer));\\n\\n    address claimerWallet = address(new MetaheroTimeLockWallet{salt: salt}(\\n        address(token)\\n      ));\\n\\n    claimerWallets[claimer] = claimerWallet;\\n\\n    emit ClaimerWalletCreated(\\n      claimer,\\n      claimerWallet\\n    );\\n  }\\n\\n  function _lockTokens(\\n    address spender,\\n    address claimer,\\n    uint256 amount,\\n    uint256 unlockedIn\\n  )\\n    private\\n  {\\n    require(\\n      claimer != address(0),\\n      \\\"MetaheroTimeLockRegistry#4\\\" // claimer is the zero address\\n    );\\n\\n    require(\\n      amount != 0,\\n      \\\"MetaheroTimeLockRegistry#5\\\" // amount is zero\\n    );\\n\\n    // create claimer wallet if not created yet\\n    if (claimerWallets[claimer] == address(0)) {\\n      _createClaimerWallet(claimer);\\n    }\\n\\n    uint256 deadline = block.timestamp.add(unlockedIn); // solhint-disable-line not-rely-on-time\\n\\n    address claimerWallet = claimerWallets[claimer];\\n\\n    bool excluded;\\n\\n    if (spender != claimer) {\\n      (excluded,,) = token.getExcludedAccount(spender);\\n\\n      require(\\n        excluded,\\n        \\\"MetaheroTimeLockRegistry#6\\\" // spender is not the excluded account\\n      );\\n    }\\n\\n    (excluded,,) = token.getExcludedAccount(claimer);\\n\\n    require(\\n      excluded,\\n      \\\"MetaheroTimeLockRegistry#7\\\" // claimer is not the excluded account\\n    );\\n\\n    (excluded,,) = token.getExcludedAccount(claimerWallet);\\n\\n    require(\\n      excluded,\\n      \\\"MetaheroTimeLockRegistry#8\\\" // claimer wallet is not the excluded account\\n    );\\n\\n    token.transferFrom(\\n      spender,\\n      claimerWallet,\\n      amount\\n    );\\n\\n    TimeLock memory timeLock;\\n\\n    timeLock.spender = spender;\\n    timeLock.amount = amount;\\n    timeLock.deadline = deadline;\\n\\n    claimerTimeLocks[claimer].push(timeLock);\\n\\n    emit TokensLocked(\\n      spender,\\n      claimer,\\n      claimerWallet,\\n      amount,\\n      deadline\\n    );\\n  }\\n\\n  function _claimTokens(\\n    address claimer,\\n    address recipient\\n  )\\n    private\\n  {\\n    require(\\n      claimerWallets[claimer] != address(0),\\n      \\\"MetaheroTimeLockRegistry#9\\\" // claimer wallet doesn't exist\\n    );\\n\\n    require(\\n      recipient != address(0),\\n      \\\"MetaheroTimeLockRegistry#10\\\" // claimer is the zero address\\n    );\\n\\n    if (recipient != claimer) {\\n      (bool excluded,,) = token.getExcludedAccount(recipient);\\n\\n      require(\\n        excluded,\\n        \\\"MetaheroTimeLockRegistry#11\\\" // recipient is not the excluded account\\n      );\\n    }\\n\\n    uint256 amount;\\n    uint256 len = claimerTimeLocks[claimer].length;\\n\\n    if (len != 0) {\\n      uint256 lastIndex = len - 1;\\n\\n      TimeLock memory timeLock;\\n\\n      for (uint256 index; index <= lastIndex; ) {\\n        timeLock = claimerTimeLocks[claimer][index];\\n\\n        if (timeLock.deadline <= block.timestamp) { // solhint-disable-line not-rely-on-time\\n          if (index != lastIndex) {\\n            claimerTimeLocks[claimer][index] = claimerTimeLocks[claimer][lastIndex];\\n            lastIndex--;\\n          } else {\\n            index++;\\n          }\\n\\n          amount = amount.add(timeLock.amount);\\n\\n          emit TokensUnlocked(\\n            timeLock.spender,\\n            claimer,\\n            claimerWallets[claimer],\\n            recipient,\\n            timeLock.amount,\\n            timeLock.deadline\\n          );\\n\\n          claimerTimeLocks[claimer].pop();\\n        } else {\\n          index++;\\n        }\\n      }\\n    }\\n\\n    require(\\n      amount != 0,\\n      \\\"MetaheroTimeLockRegistry#12\\\" // amount is zero\\n    );\\n\\n    MetaheroTimeLockWallet(claimerWallets[claimer]).transferTokens(recipient, amount);\\n  }\\n}\\n\",\"keccak256\":\"0x73eabfa43e336ba2221b1ccbc04c94f4e4b7c2969069ae496cf0f69e69158a13\",\"license\":\"MIT\"},\"src/MetaheroTimeLockWallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./core/lifecycle/Initializable.sol\\\";\\nimport \\\"./core/math/SafeMathLib.sol\\\";\\nimport \\\"./MetaheroToken.sol\\\";\\n\\n\\n/**\\n * @title Metahero time lock wallet\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@metahero.io>\\n */\\ncontract MetaheroTimeLockWallet {\\n  bytes4 private constant ERC20_TRANSFER_SELECTOR = 0xa9059cbb; // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n\\n  /**\\n   * @return token address\\n   */\\n  address public token;\\n\\n  /**\\n   * @return registry address\\n   */\\n  address public registry;\\n\\n  /**\\n   * @dev Public constructor\\n   * @param token_ token address\\n   */\\n  constructor (\\n    address token_\\n  )\\n    public\\n  {\\n    token = token_;\\n    registry = msg.sender;\\n  }\\n\\n  // external functions\\n\\n  /**\\n   * @dev Transfers tokens\\n   * @param recipient recipient address\\n   * @param amount tokens amount\\n   */\\n  function transferTokens(\\n    address recipient,\\n    uint256 amount\\n  )\\n    external\\n  {\\n    require(\\n      msg.sender == registry,\\n      \\\"MetaheroTimeLockWallet#1\\\" // msg.sender is not the registry\\n    );\\n\\n    (bool success, bytes memory response) = address(token).call( // solhint-disable-line avoid-low-level-calls\\n      abi.encodeWithSelector(ERC20_TRANSFER_SELECTOR, recipient, amount)\\n    );\\n\\n    require(\\n      success && (\\n        response.length == 0 ||\\n        abi.decode(response, (bool))\\n      ),\\n      \\\"MetaheroTimeLockWallet#2\\\" // transfer failed\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0xfafc95c34cf5e098fc9e5eca3a06b1c760a51ba4d1a731a3a68d3c899beb4352\",\"license\":\"MIT\"},\"src/MetaheroToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./core/access/Controlled.sol\\\";\\nimport \\\"./core/access/Owned.sol\\\";\\nimport \\\"./core/erc20/ERC20.sol\\\";\\nimport \\\"./core/lifecycle/Initializable.sol\\\";\\nimport \\\"./core/math/MathLib.sol\\\";\\nimport \\\"./core/math/SafeMathLib.sol\\\";\\nimport \\\"./IMetaheroDAO.sol\\\";\\nimport \\\"./MetaheroLPM.sol\\\";\\n\\n\\n/**\\n * @title Metahero token\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@metahero.io>\\n */\\ncontract MetaheroToken is Controlled, Owned, ERC20, Initializable {\\n  using MathLib for uint256;\\n  using SafeMathLib for uint256;\\n\\n  struct Fees {\\n    uint256 sender; // percent from sender\\n    uint256 recipient; // percent from recipient\\n  }\\n\\n  struct Settings {\\n    Fees burnFees; // fee taken and burned\\n    Fees lpFees; // fee taken and added to the liquidity pool manager\\n    Fees rewardsFees; // fee taken and added to rewards\\n    uint256 minTotalSupply; // min amount of tokens total supply\\n  }\\n\\n  struct Summary {\\n    uint256 totalExcluded; // total held by excluded accounts\\n    uint256 totalHolding; // total held by holder accounts\\n    uint256 totalRewards; // total rewards\\n    uint256 totalSupply; // total supply\\n  }\\n\\n  struct ExcludedAccount {\\n    bool exists; // true if exists\\n    bool excludeSenderFromFee; // removes the fee from all sender accounts on incoming transfers\\n    bool excludeRecipientFromFee; // removes the fee from all recipient accounts on outgoing transfers\\n  }\\n\\n  // globals\\n\\n  uint256 private constant MAX_FEE = 30; // max sum of all fees - 30%\\n\\n  // metadata\\n\\n  string private constant TOKEN_NAME = \\\"Metahero\\\";\\n  string private constant TOKEN_SYMBOL = \\\"HERO\\\";\\n  uint8 private constant TOKEN_DECIMALS = 18; // 0.000000000000000000\\n\\n  /**\\n   * @return dao address\\n   */\\n  IMetaheroDAO public dao;\\n\\n  /**\\n   * @return liquidity pool manager address\\n   */\\n  MetaheroLPM public lpm;\\n\\n  /**\\n   * @return settings object\\n   */\\n  Settings public settings;\\n\\n  /**\\n   * @return summary object\\n   */\\n  Summary public summary;\\n\\n  /**\\n   * @return return true when presale is finished\\n   */\\n  bool public presaleFinished;\\n\\n  mapping (address => uint256) private accountBalances;\\n  mapping (address => mapping (address => uint256)) private accountAllowances;\\n  mapping (address => ExcludedAccount) private excludedAccounts;\\n\\n  // events\\n\\n  /**\\n   * @dev Emitted when the contract is initialized\\n   * @param burnFees burn fees\\n   * @param lpFees liquidity pool fees\\n   * @param rewardsFees rewards fees\\n   * @param minTotalSupply min total supply\\n   * @param lpm liquidity pool manager address\\n   * @param controller controller address\\n   */\\n  event Initialized(\\n    Fees burnFees,\\n    Fees lpFees,\\n    Fees rewardsFees,\\n    uint256 minTotalSupply,\\n    address lpm,\\n    address controller\\n  );\\n\\n  /**\\n   * @dev Emitted when the dao is updated\\n   * @param dao dao address\\n   */\\n  event DAOUpdated(\\n    address dao\\n  );\\n\\n  /**\\n   * @dev Emitted when fees are updated\\n   * @param burnFees burn fees\\n   * @param lpFees liquidity pool fees\\n   * @param rewardsFees rewards fees\\n   */\\n  event FeesUpdated(\\n    Fees burnFees,\\n    Fees lpFees,\\n    Fees rewardsFees\\n  );\\n\\n  /**\\n   * @dev Emitted when the presale is finished\\n   */\\n  event PresaleFinished();\\n\\n  /**\\n   * @dev Emitted when account is excluded\\n   * @param account account address\\n   * @param excludeSenderFromFee exclude sender from fee\\n   * @param excludeRecipientFromFee exclude recipient from fee\\n   */\\n  event AccountExcluded(\\n    address indexed account,\\n    bool excludeSenderFromFee,\\n    bool excludeRecipientFromFee\\n  );\\n\\n  /**\\n   * @dev Emitted when total rewards amount is updated\\n   * @param totalRewards total rewards amount\\n   */\\n  event TotalRewardsUpdated(\\n    uint256 totalRewards\\n  );\\n\\n  // modifiers\\n\\n  /**\\n   * @dev Throws if msg.sender is not the dao\\n   */\\n  modifier onlyDAO() {\\n    require(\\n      msg.sender == address(dao),\\n      \\\"MetaheroToken#1\\\" // msg.sender is not the dao\\n    );\\n\\n    _;\\n  }\\n\\n  /**\\n   * @dev Throws if msg.sender is not the excluded account\\n   */\\n  modifier onlyExcludedAccount() {\\n    require(\\n      excludedAccounts[msg.sender].exists,\\n      \\\"MetaheroToken#2\\\" // msg.sender is not the excluded account\\n    );\\n\\n    _;\\n  }\\n\\n  /**\\n   * @dev Public constructor\\n   */\\n  constructor ()\\n    public\\n    Controlled()\\n    Owned()\\n    ERC20(TOKEN_NAME, TOKEN_SYMBOL, TOKEN_DECIMALS) // sets metadata\\n    Initializable()\\n  {\\n    //\\n  }\\n\\n  // external functions\\n\\n  /**\\n   * @dev Initializes the contract\\n   * @param burnFees burn fees\\n   * @param lpFees liquidity pool fees\\n   * @param rewardsFees rewards fees\\n   * @param minTotalSupply min total supply\\n   * @param lpm_ liquidity pool manager address\\n   * @param controller_ controller address\\n   * @param totalSupply_ total supply\\n   */\\n  function initialize(\\n    Fees memory burnFees,\\n    Fees memory lpFees,\\n    Fees memory rewardsFees,\\n    uint256 minTotalSupply,\\n    address payable lpm_,\\n    address controller_,\\n    uint256 totalSupply_,\\n    address[] calldata excludedAccounts_\\n  )\\n    external\\n    onlyInitializer\\n  {\\n    _verifyFees(burnFees, lpFees, rewardsFees);\\n\\n    settings.burnFees = burnFees;\\n    settings.lpFees = lpFees;\\n    settings.rewardsFees = rewardsFees;\\n    settings.minTotalSupply = minTotalSupply;\\n\\n    if (\\n      lpFees.sender != 0 ||\\n      lpFees.recipient != 0\\n    ) {\\n      require(\\n        lpm_ != address(0),\\n        \\\"MetaheroToken#3\\\" // lpm is the zero address\\n      );\\n\\n      lpm = MetaheroLPM(lpm_);\\n    }\\n\\n    _initializeController(controller_);\\n\\n    emit Initialized(\\n      burnFees,\\n      lpFees,\\n      rewardsFees,\\n      minTotalSupply,\\n      lpm_,\\n      controller_\\n    );\\n\\n    // excludes owner account\\n    _excludeAccount(msg.sender, true, true);\\n\\n    if (totalSupply_ != 0) {\\n      _mint(\\n        msg.sender,\\n        totalSupply_\\n      );\\n    }\\n\\n    // adds predefined excluded accounts\\n    uint256 excludedAccountsLen = excludedAccounts_.length;\\n\\n    for (uint256 index; index < excludedAccountsLen; index++) {\\n      _excludeAccount(excludedAccounts_[index], false, false);\\n    }\\n  }\\n\\n  /**\\n   * @dev Sets the dao\\n   * @param dao_ dao address\\n   */\\n  function setDAO(\\n    address dao_\\n  )\\n    external\\n    onlyOwner\\n  {\\n    require(\\n      dao_ != address(0),\\n      \\\"MetaheroToken#4\\\" // lpm is the zero address\\n    );\\n\\n    dao = IMetaheroDAO(dao_);\\n\\n    emit DAOUpdated(\\n      dao_\\n    );\\n\\n    // makes a dao an owner\\n    _setOwner(dao_);\\n  }\\n\\n  /**\\n   * @dev Updates fees\\n   * @param burnFees burn fees\\n   * @param lpFees liquidity pool fees\\n   * @param rewardsFees rewards fees\\n   */\\n  function updateFees(\\n    Fees memory burnFees,\\n    Fees memory lpFees,\\n    Fees memory rewardsFees\\n  )\\n    external\\n    onlyDAO // only for dao\\n  {\\n    _verifyFees(burnFees, lpFees, rewardsFees);\\n\\n    settings.burnFees = burnFees;\\n    settings.lpFees = lpFees;\\n    settings.rewardsFees = rewardsFees;\\n\\n    emit FeesUpdated(\\n      burnFees,\\n      lpFees,\\n      rewardsFees\\n    );\\n  }\\n\\n  /**\\n   * @dev Set the presale as finished\\n   */\\n  function setPresaleAsFinished()\\n    external\\n    onlyOwner\\n  {\\n    require(\\n      !presaleFinished,\\n      \\\"MetaheroToken#5\\\" // the presale is already finished\\n    );\\n\\n    presaleFinished = true;\\n\\n    emit PresaleFinished();\\n  }\\n\\n  /**\\n   * @dev Excludes account\\n   * @param account account address\\n   * @param excludeSenderFromFee exclude sender from fee\\n   * @param excludeRecipientFromFee exclude recipient from fee\\n   */\\n  function excludeAccount(\\n    address account,\\n    bool excludeSenderFromFee,\\n    bool excludeRecipientFromFee\\n  )\\n    external\\n    onlyOwner\\n  {\\n    _excludeAccount(\\n      account,\\n      excludeSenderFromFee,\\n      excludeRecipientFromFee\\n    );\\n  }\\n\\n  /**\\n   * @dev Approve spending limit\\n   * @param spender spender address\\n   * @param amount spending limit\\n   */\\n  function approve(\\n    address spender,\\n    uint256 amount\\n  )\\n    external\\n    override\\n    returns (bool)\\n  {\\n    _approve(\\n      msg.sender,\\n      spender,\\n      amount\\n    );\\n\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Mints tokens to recipient\\n   * @param recipient recipient address\\n   * @param amount tokens amount\\n   */\\n  function mintTo(\\n    address recipient,\\n    uint256 amount\\n  )\\n    external\\n    onlyController\\n  {\\n    _mint(\\n      recipient,\\n      amount\\n    );\\n  }\\n\\n  /**\\n   * @dev Burns tokens from msg.sender\\n   * @param amount tokens amount\\n   */\\n  function burn(\\n    uint256 amount\\n  )\\n    external\\n    onlyExcludedAccount\\n  {\\n    _burn(\\n      msg.sender,\\n      amount\\n    );\\n  }\\n\\n  /**\\n   * @dev Burns tokens from sender\\n   * @param sender sender address\\n   * @param amount tokens amount\\n   */\\n  function burnFrom(\\n    address sender,\\n    uint256 amount\\n  )\\n    external\\n    onlyController\\n  {\\n    _burn(\\n      sender,\\n      amount\\n    );\\n  }\\n\\n  /**\\n   * @dev Transfers tokens to recipient\\n   * @param recipient recipient address\\n   * @param amount tokens amount\\n   */\\n  function transfer(\\n    address recipient,\\n    uint256 amount\\n  )\\n    external\\n    override\\n    returns (bool)\\n  {\\n    _transfer(\\n      msg.sender,\\n      recipient,\\n      amount\\n    );\\n\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Transfers tokens from sender to recipient\\n   * @param sender sender address\\n   * @param recipient recipient address\\n   * @param amount tokens amount\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    external\\n    override\\n    returns (bool)\\n  {\\n    _transfer(\\n      sender,\\n      recipient,\\n      amount\\n    );\\n\\n    uint256 allowance = accountAllowances[sender][msg.sender];\\n\\n    require(\\n      allowance >= amount,\\n      \\\"MetaheroToken#6\\\"  // amount exceeds allowance\\n    );\\n\\n    _approve( // update allowance\\n      sender,\\n      msg.sender,\\n      allowance.sub(amount)\\n    );\\n\\n    return true;\\n  }\\n\\n  // external functions (views)\\n\\n  /**\\n   * @dev Gets excluded account\\n   * @param account account address\\n   */\\n  function getExcludedAccount(\\n    address account\\n  )\\n    external\\n    view\\n    returns (\\n      bool exists,\\n      bool excludeSenderFromFee,\\n      bool excludeRecipientFromFee\\n    )\\n  {\\n    return (\\n      excludedAccounts[account].exists,\\n      excludedAccounts[account].excludeSenderFromFee,\\n      excludedAccounts[account].excludeRecipientFromFee\\n    );\\n  }\\n\\n  /**\\n   * @dev Gets total supply\\n   * @return total supply\\n   */\\n  function totalSupply()\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return summary.totalSupply;\\n  }\\n\\n  /**\\n   * @dev Gets allowance\\n   * @param owner owner address\\n   * @param spender spender address\\n   * @return allowance\\n   */\\n  function allowance(\\n    address owner,\\n    address spender\\n  )\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return accountAllowances[owner][spender];\\n  }\\n\\n  /**\\n   * @dev Gets balance of\\n   * @param account account address\\n   * @return result account balance\\n   */\\n  function balanceOf(\\n    address account\\n  )\\n    external\\n    view\\n    override\\n    returns (uint256 result)\\n  {\\n    result = accountBalances[account].add(\\n      _calcRewards(account)\\n    );\\n\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Gets balance summary\\n   * @param account account address\\n   */\\n  function getBalanceSummary(\\n    address account\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 totalBalance,\\n      uint256 holdingBalance,\\n      uint256 totalRewards\\n    )\\n  {\\n    holdingBalance = accountBalances[account];\\n    totalRewards = _calcRewards(account);\\n    totalBalance = holdingBalance.add(totalRewards);\\n\\n    return (totalBalance, holdingBalance, totalRewards);\\n  }\\n\\n  // private functions\\n\\n  function _excludeAccount(\\n    address account,\\n    bool excludeSenderFromFee,\\n    bool excludeRecipientFromFee\\n  )\\n    private\\n  {\\n    require(\\n      account != address(0),\\n      \\\"MetaheroToken#7\\\" // account is the zero address\\n    );\\n\\n    // if already excluded\\n    if (excludedAccounts[account].exists) {\\n      require(\\n        excludedAccounts[account].excludeSenderFromFee != excludeSenderFromFee ||\\n        excludedAccounts[account].excludeRecipientFromFee != excludeRecipientFromFee,\\n        \\\"MetaheroToken#8\\\" // does not update exclude account\\n      );\\n\\n      excludedAccounts[account].excludeSenderFromFee = excludeSenderFromFee;\\n      excludedAccounts[account].excludeRecipientFromFee = excludeRecipientFromFee;\\n    } else {\\n      require(\\n        accountBalances[account] == 0,\\n        \\\"MetaheroToken#9\\\" // can not exclude holder account\\n      );\\n\\n      excludedAccounts[account].exists = true;\\n      excludedAccounts[account].excludeSenderFromFee = excludeSenderFromFee;\\n      excludedAccounts[account].excludeRecipientFromFee = excludeRecipientFromFee;\\n    }\\n\\n    emit AccountExcluded(\\n      account,\\n      excludeSenderFromFee,\\n      excludeRecipientFromFee\\n    );\\n  }\\n\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    require(\\n      spender != address(0),\\n      \\\"MetaheroToken#11\\\" // spender is the zero address\\n    );\\n\\n    accountAllowances[owner][spender] = amount;\\n\\n    emit Approval(\\n      owner,\\n      spender,\\n      amount\\n    );\\n  }\\n\\n  function _mint(\\n    address recipient,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    require(\\n      recipient != address(0),\\n      \\\"MetaheroToken#12\\\" // recipient is the zero address\\n    );\\n\\n    require(\\n      amount != 0,\\n      \\\"MetaheroToken#13\\\" // amount is zero\\n    );\\n\\n    summary.totalSupply = summary.totalSupply.add(amount);\\n\\n    // if exclude account\\n    if (excludedAccounts[recipient].exists) {\\n      summary.totalExcluded = summary.totalExcluded.add(amount);\\n\\n      accountBalances[recipient] = accountBalances[recipient].add(amount);\\n    } else {\\n      _updateHoldingBalance(\\n        recipient,\\n        accountBalances[recipient].add(amount),\\n        summary.totalHolding.add(amount)\\n      );\\n    }\\n\\n    _emitTransfer(\\n      address(0),\\n      recipient,\\n      amount\\n    );\\n  }\\n\\n  function _burn(\\n    address sender,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    require(\\n      sender != address(0),\\n      \\\"MetaheroToken#14\\\" // sender is the zero address\\n    );\\n\\n    require(\\n      amount != 0,\\n      \\\"MetaheroToken#15\\\" // amount is zero\\n    );\\n\\n    require(\\n      accountBalances[sender] >= amount,\\n      \\\"MetaheroToken#16\\\" // amount exceeds sender balance\\n    );\\n\\n    uint256 totalSupply_ = summary.totalSupply.sub(amount);\\n\\n    if (settings.minTotalSupply != 0) {\\n      require(\\n        totalSupply_ >= settings.minTotalSupply,\\n        \\\"MetaheroToken#17\\\" // new total supply exceeds min total supply\\n      );\\n    }\\n\\n    summary.totalSupply = totalSupply_;\\n\\n    // if exclude account\\n    if (excludedAccounts[sender].exists) {\\n      summary.totalExcluded = summary.totalExcluded.sub(amount);\\n\\n      accountBalances[sender] = accountBalances[sender].sub(amount);\\n    } else {\\n      _updateHoldingBalance(\\n        sender,\\n        accountBalances[sender].sub(amount),\\n        summary.totalHolding.sub(amount)\\n      );\\n    }\\n\\n    _emitTransfer(\\n      sender,\\n      address(0),\\n      amount\\n    );\\n  }\\n\\n  function _transfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    require(\\n      sender != address(0),\\n      \\\"MetaheroToken#18\\\" // sender is the zero address\\n    );\\n\\n    require(\\n      recipient != address(0),\\n      \\\"MetaheroToken#19\\\" // recipient is the zero address\\n    );\\n\\n    if (sender == recipient) { // special transfer type\\n      _syncLP(); // sync only LP\\n\\n      _emitTransfer(\\n        sender,\\n        recipient,\\n        0\\n      );\\n    } else {\\n      require(\\n        excludedAccounts[sender].exists ||\\n        presaleFinished,\\n        \\\"MetaheroToken#20\\\" // presale not finished yet\\n      );\\n\\n      require(\\n        amount != 0,\\n        \\\"MetaheroToken#21\\\" // amount is zero\\n      );\\n\\n      if (\\n        !excludedAccounts[sender].exists &&\\n        !excludedAccounts[recipient].exists\\n      ) {\\n        _transferBetweenHolderAccounts(\\n          sender,\\n          recipient,\\n          amount\\n        );\\n      } else if (\\n        excludedAccounts[sender].exists &&\\n        !excludedAccounts[recipient].exists\\n      ) {\\n        _transferFromExcludedAccount(\\n          sender,\\n          recipient,\\n          amount\\n        );\\n      } else if (\\n        !excludedAccounts[sender].exists &&\\n        excludedAccounts[recipient].exists\\n      ) {\\n        _transferToExcludedAccount(\\n          sender,\\n          recipient,\\n          amount\\n        );\\n      } else {\\n        _transferBetweenExcludedAccounts(\\n          sender,\\n          recipient,\\n          amount\\n        );\\n      }\\n    }\\n  }\\n\\n  function _transferBetweenHolderAccounts(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    uint256 senderAmount;\\n    uint256 senderBurnFee;\\n    uint256 senderLpFee;\\n\\n    uint256 recipientAmount;\\n    uint256 recipientBurnFee;\\n    uint256 recipientLpFee;\\n\\n    uint256 totalFee;\\n\\n    {\\n      uint256 totalSupply_ = summary.totalSupply;\\n\\n      // calc fees for sender and recipient\\n      {\\n        uint256 senderTotalFee;\\n        uint256 recipientTotalFee;\\n\\n        (\\n          senderTotalFee,\\n          senderBurnFee,\\n          senderLpFee\\n        ) = _calcTransferSenderFees(amount);\\n\\n        (\\n          totalSupply_,\\n          senderTotalFee,\\n          senderBurnFee\\n        ) = _matchTotalSupplyWithFees(totalSupply_, senderTotalFee, senderBurnFee);\\n\\n        (\\n          recipientTotalFee,\\n          recipientBurnFee,\\n          recipientLpFee\\n        ) = _calcTransferRecipientFees(amount);\\n\\n        (\\n          totalSupply_,\\n          recipientTotalFee,\\n          recipientBurnFee\\n        ) = _matchTotalSupplyWithFees(totalSupply_, recipientTotalFee, recipientBurnFee);\\n\\n        totalFee = senderTotalFee.add(recipientTotalFee);\\n        senderAmount = amount.add(senderTotalFee);\\n        recipientAmount = amount.sub(recipientTotalFee);\\n      }\\n\\n      // appends total rewards\\n      if (summary.totalRewards != 0) {\\n        uint256 totalHoldingWithRewards = summary.totalHolding.add(\\n          summary.totalRewards\\n        );\\n\\n        senderAmount = senderAmount.mul(summary.totalHolding).div(\\n          totalHoldingWithRewards\\n        );\\n        recipientAmount = recipientAmount.mul(summary.totalHolding).div(\\n          totalHoldingWithRewards\\n        );\\n        totalFee = totalFee.mul(summary.totalHolding).div(\\n          totalHoldingWithRewards\\n        );\\n      }\\n\\n      require(\\n        accountBalances[sender] >= senderAmount,\\n        \\\"MetaheroToken#22\\\" // amount exceeds sender balance\\n      );\\n\\n      summary.totalSupply = totalSupply_;\\n\\n      // reduce local vars\\n      senderAmount = accountBalances[sender].sub(senderAmount);\\n      recipientAmount = accountBalances[recipient].add(recipientAmount);\\n\\n      _updateHoldingBalances(\\n        sender,\\n        senderAmount,\\n        recipient,\\n        recipientAmount,\\n        summary.totalHolding.sub(totalFee)\\n      );\\n\\n      _increaseTotalLP(senderLpFee.add(recipientLpFee));\\n    }\\n\\n    // emits events\\n\\n    {\\n      _emitTransfer(\\n        sender,\\n        recipient,\\n        amount\\n      );\\n\\n      _emitTransfer(\\n        sender,\\n        address(0),\\n        senderBurnFee\\n      );\\n\\n      _emitTransfer(\\n        sender,\\n        address(lpm),\\n        senderLpFee\\n      );\\n\\n      _emitTransfer(\\n        recipient,\\n        address(0),\\n        recipientBurnFee\\n      );\\n\\n      _emitTransfer(\\n        recipient,\\n        address(lpm),\\n        recipientLpFee\\n      );\\n\\n      _updateTotalRewards();\\n\\n      _syncLP();\\n    }\\n  }\\n\\n  function _transferFromExcludedAccount(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    require(\\n      accountBalances[sender] >= amount,\\n      \\\"MetaheroToken#23\\\" // amount exceeds sender balance\\n    );\\n\\n    (\\n      bool shouldSyncLPBefore,\\n      bool shouldSyncLPAfter\\n    ) = _canSyncLP(\\n      sender,\\n      address(0)\\n    );\\n\\n    if (shouldSyncLPBefore) {\\n      lpm.syncLP();\\n    }\\n\\n    uint256 recipientTotalFee;\\n    uint256 recipientBurnFee;\\n    uint256 recipientLPFee;\\n\\n    uint256 totalSupply_ = summary.totalSupply;\\n\\n    // when sender does not remove the fee from the recipient\\n    if (!excludedAccounts[sender].excludeRecipientFromFee) {\\n      (\\n        recipientTotalFee,\\n        recipientBurnFee,\\n        recipientLPFee\\n      ) = _calcTransferRecipientFees(amount);\\n\\n      (\\n        totalSupply_,\\n        recipientTotalFee,\\n        recipientBurnFee\\n      ) = _matchTotalSupplyWithFees(totalSupply_, recipientTotalFee, recipientBurnFee);\\n    }\\n\\n    uint256 recipientAmount = amount.sub(recipientTotalFee);\\n\\n    summary.totalSupply = totalSupply_;\\n    summary.totalExcluded = summary.totalExcluded.sub(amount);\\n\\n    accountBalances[sender] = accountBalances[sender].sub(amount);\\n\\n    _updateHoldingBalance(\\n      recipient,\\n      accountBalances[recipient].add(recipientAmount),\\n      summary.totalHolding.add(recipientAmount)\\n    );\\n\\n    _increaseTotalLP(recipientLPFee);\\n\\n    // emits events\\n\\n    _emitTransfer(\\n      sender,\\n      recipient,\\n      amount\\n    );\\n\\n    _emitTransfer(\\n      recipient,\\n      address(0),\\n      recipientBurnFee\\n    );\\n\\n    _emitTransfer(\\n      recipient,\\n      address(lpm),\\n      recipientLPFee\\n    );\\n\\n    _updateTotalRewards();\\n\\n    if (shouldSyncLPAfter) {\\n      lpm.syncLP();\\n    }\\n  }\\n\\n  function _transferToExcludedAccount(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    (\\n      bool shouldSyncLPBefore,\\n      bool shouldSyncLPAfter\\n    ) = _canSyncLP(\\n      address(0),\\n      recipient\\n    );\\n\\n    if (shouldSyncLPBefore) {\\n      lpm.syncLP();\\n    }\\n\\n    uint256 senderTotalFee;\\n    uint256 senderBurnFee;\\n    uint256 senderLpFee;\\n\\n    uint256 totalSupply_ = summary.totalSupply;\\n\\n    // when recipient does not remove the fee from the sender\\n    if (!excludedAccounts[recipient].excludeSenderFromFee) {\\n      (\\n        senderTotalFee,\\n        senderBurnFee,\\n        senderLpFee\\n      ) = _calcTransferSenderFees(amount);\\n\\n      (\\n        totalSupply_,\\n        senderTotalFee,\\n        senderBurnFee\\n      ) = _matchTotalSupplyWithFees(totalSupply_, senderTotalFee, senderBurnFee);\\n    }\\n\\n    uint256 senderAmount = amount.add(senderTotalFee);\\n\\n    // append total rewards\\n    if (summary.totalRewards != 0) {\\n      uint256 totalHoldingWithRewards = summary.totalHolding.add(\\n        summary.totalRewards\\n      );\\n\\n      senderAmount = senderAmount.mul(summary.totalHolding).div(\\n        totalHoldingWithRewards\\n      );\\n    }\\n\\n    require(\\n      accountBalances[sender] >= senderAmount,\\n      \\\"MetaheroToken#24\\\" // amount exceeds sender balance\\n    );\\n\\n    summary.totalSupply = totalSupply_;\\n    summary.totalExcluded = summary.totalExcluded.add(amount);\\n\\n    accountBalances[recipient] = accountBalances[recipient].add(amount);\\n\\n    _updateHoldingBalance(\\n      sender,\\n      accountBalances[sender].sub(senderAmount),\\n      summary.totalHolding.sub(senderAmount)\\n    );\\n\\n    _increaseTotalLP(senderLpFee);\\n\\n    // emits events\\n\\n    _emitTransfer(\\n      sender,\\n      recipient,\\n      amount\\n    );\\n\\n    _emitTransfer(\\n      sender,\\n      address(0),\\n      senderBurnFee\\n    );\\n\\n    _emitTransfer(\\n      sender,\\n      address(lpm),\\n      senderLpFee\\n    );\\n\\n    _updateTotalRewards();\\n\\n    if (shouldSyncLPAfter) {\\n      lpm.syncLP();\\n    }\\n  }\\n\\n  function _transferBetweenExcludedAccounts(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    require(\\n      accountBalances[sender] >= amount,\\n      \\\"MetaheroToken#25\\\" // amount exceeds sender balance\\n    );\\n\\n    (\\n      bool shouldSyncLPBefore,\\n      bool shouldSyncLPAfter\\n    ) = _canSyncLP(\\n      address(0),\\n      recipient\\n    );\\n\\n    if (shouldSyncLPBefore) {\\n      lpm.syncLP();\\n    }\\n\\n    accountBalances[sender] = accountBalances[sender].sub(amount);\\n    accountBalances[recipient] = accountBalances[recipient].add(amount);\\n\\n    _emitTransfer(\\n      sender,\\n      recipient,\\n      amount\\n    );\\n\\n    if (shouldSyncLPAfter) {\\n      lpm.syncLP();\\n    }\\n  }\\n\\n  function _updateHoldingBalance(\\n    address holder,\\n    uint256 holderBalance,\\n    uint256 totalHolding\\n  )\\n    private\\n  {\\n    accountBalances[holder] = holderBalance;\\n    summary.totalHolding = totalHolding;\\n\\n    if (address(dao) != address(0)) { // if dao is not the zero address\\n      dao.syncMember(\\n        holder,\\n        holderBalance,\\n        totalHolding\\n      );\\n    }\\n  }\\n\\n  function _updateHoldingBalances(\\n    address holderA,\\n    uint256 holderABalance,\\n    address holderB,\\n    uint256 holderBBalance,\\n    uint256 totalHolding\\n  )\\n    private\\n  {\\n    accountBalances[holderA] = holderABalance;\\n    accountBalances[holderB] = holderBBalance;\\n    summary.totalHolding = totalHolding;\\n\\n    if (address(dao) != address(0)) { // if dao is not the zero address\\n      dao.syncMembers(\\n        holderA,\\n        holderABalance,\\n        holderB,\\n        holderBBalance,\\n        totalHolding\\n      );\\n    }\\n  }\\n\\n  function _emitTransfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    if (amount != 0) { // when amount is not zero\\n      emit Transfer(\\n        sender,\\n        recipient,\\n        amount\\n      );\\n    }\\n  }\\n\\n  function _increaseTotalLP(\\n    uint256 amount\\n  )\\n    private\\n  {\\n    if (amount != 0) { // when amount is not zero\\n      accountBalances[address(lpm)] = accountBalances[address(lpm)].add(amount);\\n\\n      summary.totalExcluded = summary.totalExcluded.add(amount);\\n    }\\n  }\\n\\n  function _syncLP()\\n    private\\n  {\\n    if (address(lpm) != address(0)) { // if lpm is not the zero address\\n      lpm.syncLP();\\n    }\\n  }\\n\\n  function _updateTotalRewards()\\n    private\\n  {\\n    // totalRewards = totalSupply - totalExcluded - totalHolding\\n    uint256 totalRewards = summary.totalSupply\\n    .sub(summary.totalExcluded)\\n    .sub(summary.totalHolding);\\n\\n    if (totalRewards != summary.totalRewards) {\\n      summary.totalRewards = totalRewards;\\n\\n      emit TotalRewardsUpdated(\\n        totalRewards\\n      );\\n    }\\n  }\\n\\n  // private functions (views)\\n\\n  function _matchTotalSupplyWithFees(\\n    uint256 totalSupply_,\\n    uint256 totalFee,\\n    uint256 burnFee\\n  )\\n    private\\n    view\\n    returns (uint256, uint256, uint256)\\n  {\\n    if (burnFee != 0) {\\n      uint256 newTotalSupply = totalSupply_.sub(burnFee);\\n\\n      if (newTotalSupply >= settings.minTotalSupply) {\\n        totalSupply_ = newTotalSupply;\\n      } else  { // turn of burn fee\\n        totalFee = totalFee.sub(burnFee);\\n        burnFee = 0;\\n      }\\n    }\\n\\n    return (totalSupply_, totalFee, burnFee);\\n  }\\n\\n\\n  function _canSyncLP(\\n    address sender,\\n    address recipient\\n  )\\n    private\\n    view\\n    returns (\\n      bool shouldSyncLPBefore,\\n      bool shouldSyncLPAfter\\n    )\\n  {\\n    if (address(lpm) != address(0)) { // if lpm is not the zero address\\n      (shouldSyncLPBefore, shouldSyncLPAfter) = lpm.canSyncLP(\\n        sender,\\n        recipient\\n      );\\n    }\\n\\n    return (shouldSyncLPBefore, shouldSyncLPAfter);\\n  }\\n\\n  function _calcRewards(\\n    address account\\n  )\\n    private\\n    view\\n    returns (uint256 result)\\n  {\\n    if (\\n      !excludedAccounts[account].exists && // only for holders\\n      summary.totalRewards != 0\\n    ) {\\n      result = summary.totalRewards\\n        .mul(accountBalances[account])\\n        .div(summary.totalHolding);\\n    }\\n\\n    return result;\\n  }\\n\\n  function _calcTransferSenderFees(\\n    uint256 amount\\n  )\\n    private\\n    view\\n    returns (\\n      uint256 totalFee,\\n      uint256 burnFee,\\n      uint256 lpFee\\n    )\\n  {\\n    uint256 rewardsFee = amount.percent(settings.rewardsFees.sender);\\n\\n    lpFee = amount.percent(settings.lpFees.sender);\\n    burnFee = amount.percent(settings.burnFees.sender);\\n\\n    totalFee = lpFee.add(rewardsFee).add(burnFee);\\n\\n    return (totalFee, burnFee, lpFee);\\n  }\\n\\n  function _calcTransferRecipientFees(\\n    uint256 amount\\n  )\\n    private\\n    view\\n    returns (\\n      uint256 totalFee,\\n      uint256 burnFee,\\n      uint256 lpFee\\n    )\\n  {\\n    uint256 rewardsFee = amount.percent(settings.rewardsFees.recipient);\\n\\n    lpFee = amount.percent(settings.lpFees.recipient);\\n    burnFee = amount.percent(settings.burnFees.recipient);\\n\\n    totalFee = lpFee.add(rewardsFee).add(burnFee);\\n\\n    return (totalFee, burnFee, lpFee);\\n  }\\n\\n  // private functions (pure)\\n\\n  function _verifyFees(\\n    Fees memory burnFees,\\n    Fees memory lpFees,\\n    Fees memory rewardsFees\\n  )\\n    private\\n    pure\\n  {\\n    uint256 totalFee = burnFees.sender.add(\\n      burnFees.recipient\\n    ).add(\\n      lpFees.sender.add(lpFees.recipient)\\n    ).add(\\n      rewardsFees.sender.add(rewardsFees.recipient)\\n    );\\n\\n    require(\\n      totalFee <= MAX_FEE,\\n      \\\"MetaheroToken#26\\\" // the total fee is too high\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x0add457e556d5395295037a9acc65a7d22833fcd448812ddf845f87ea4f9b633\",\"license\":\"MIT\"},\"src/core/access/Controlled.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Controlled\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@metahero.io>\\n */\\ncontract Controlled {\\n  /**\\n   * @return controller address\\n   */\\n  address public controller;\\n\\n  // modifiers\\n\\n  /**\\n   * @dev Throws if msg.sender is not the controller\\n   */\\n  modifier onlyController() {\\n    require(\\n      msg.sender == controller,\\n      \\\"Controlled#1\\\" // msg.sender is not the controller\\n    );\\n\\n    _;\\n  }\\n\\n  // events\\n\\n  /**\\n   * @dev Emitted when the controller is updated\\n   * @param controller new controller address\\n   */\\n  event ControllerUpdated(\\n    address controller\\n  );\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor()\\n    internal\\n  {\\n    //\\n  }\\n\\n  // internal functions\\n\\n  function _initializeController(\\n    address controller_\\n  )\\n    internal\\n  {\\n    controller = controller_;\\n  }\\n\\n  function _setController(\\n    address controller_\\n  )\\n    internal\\n  {\\n    require(\\n      controller_ != address(0),\\n      \\\"Controlled#2\\\" // controller is the zero address\\n    );\\n\\n    require(\\n      controller_ != controller,\\n      \\\"Controlled#3\\\" // does not update the controller\\n    );\\n\\n    controller = controller_;\\n\\n    emit ControllerUpdated(\\n      controller_\\n    );\\n  }\\n\\n  function _removeController()\\n    internal\\n  {\\n    require(\\n      controller != address(0),\\n      \\\"Controlled#4\\\" // controller is the zero address\\n    );\\n\\n    controller = address(0);\\n\\n    emit ControllerUpdated(\\n      address(0)\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x6fd7d2734e5013ec71b009a7348b2de27330370bad175c62ffd39285eefeaaee\",\"license\":\"MIT\"},\"src/core/access/Lockable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Lockable\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@metahero.io>\\n */\\ncontract Lockable {\\n  /**\\n   * @return true when contract is locked\\n   */\\n  bool public locked;\\n\\n  // modifiers\\n\\n\\n  /**\\n   * @dev Calls only when contract is unlocked\\n   */\\n  modifier lock() {\\n    if (!locked) {\\n      locked = true;\\n\\n      _;\\n\\n      locked = false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Throws if contract is locked\\n   */\\n  modifier lockOrThrowError() {\\n    require(\\n      !locked,\\n      \\\"Lockable#1\\\" // contract is locked\\n    );\\n\\n    locked = true;\\n\\n    _;\\n\\n    locked = false;\\n  }\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor()\\n    internal\\n  {\\n    //\\n  }\\n}\\n\",\"keccak256\":\"0x99756073634c8bff46b02af4a3f69176b803a03415a9293478d2c635285c9ae6\",\"license\":\"MIT\"},\"src/core/access/Owned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Owned\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@metahero.io>\\n */\\ncontract Owned {\\n  /**\\n   * @return owner address\\n   */\\n  address public owner;\\n\\n  // modifiers\\n\\n  /**\\n   * @dev Throws if msg.sender is not the owner\\n   */\\n  modifier onlyOwner() {\\n    require(\\n      msg.sender == owner,\\n      \\\"Owned#1\\\" // msg.sender is not the owner\\n    );\\n\\n    _;\\n  }\\n\\n  // events\\n\\n  /**\\n   * @dev Emitted when the owner is updated\\n   * @param owner new owner address\\n   */\\n  event OwnerUpdated(\\n    address owner\\n  );\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor()\\n    internal\\n  {\\n    owner = msg.sender;\\n  }\\n\\n  // external functions\\n\\n  /**\\n   * @notice Sets a new owner\\n   * @param owner_ owner address\\n   */\\n  function setOwner(\\n    address owner_\\n  )\\n    external\\n    onlyOwner\\n  {\\n    _setOwner(owner_);\\n  }\\n\\n  // internal functions\\n\\n  function _setOwner(\\n    address owner_\\n  )\\n    internal\\n  {\\n    require(\\n      owner_ != address(0),\\n      \\\"Owned#2\\\" // owner is the zero address\\n    );\\n\\n    require(\\n      owner_ != owner,\\n      \\\"Owned#3\\\" // does not update the owner\\n    );\\n\\n    owner = owner_;\\n\\n    emit OwnerUpdated(\\n      owner_\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0xf51e5a9b2810c8dac7bd959f56d334ba9221f0c87dd7d79062188a25f634ca68\",\"license\":\"MIT\"},\"src/core/erc20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n\\n/**\\n * @title ERC20 abstract token\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@metahero.io>\\n */\\nabstract contract ERC20 is IERC20 {\\n  string public override name;\\n  string public override symbol;\\n  uint8 public override decimals;\\n\\n  /**\\n   * @dev Internal constructor\\n   * @param name_ name\\n   * @param symbol_ symbol\\n   * @param decimals_ decimals amount\\n   */\\n  constructor (\\n    string memory name_,\\n    string memory symbol_,\\n    uint8 decimals_\\n  )\\n    internal\\n  {\\n    name = name_;\\n    symbol = symbol_;\\n    decimals = decimals_;\\n  }\\n}\\n\",\"keccak256\":\"0x7bf37353ffc0e4a6c0991a3d43d9bc3ffeae5f1dad6cc37ebd65eea009121821\",\"license\":\"MIT\"},\"src/core/erc20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title ERC20 token interface\\n *\\n * @notice See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\\n */\\ninterface IERC20 {\\n  // events\\n\\n  event Approval(\\n    address indexed owner,\\n    address indexed spender,\\n    uint256 value\\n  );\\n\\n  event Transfer(\\n    address indexed from,\\n    address indexed to,\\n    uint256 value\\n  );\\n\\n  // external functions\\n\\n  function approve(\\n    address spender,\\n    uint256 value\\n  )\\n    external\\n    returns (bool);\\n\\n  function transfer(\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (bool);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (bool);\\n\\n  // external functions (views)\\n\\n  function totalSupply()\\n    external\\n    view\\n    returns (uint256);\\n\\n  function balanceOf(\\n    address owner\\n  )\\n    external\\n    view\\n    returns (uint256);\\n\\n  function allowance(\\n    address owner,\\n    address spender\\n  )\\n    external\\n    view\\n    returns (uint256);\\n\\n  // external functions (pure)\\n\\n  function name()\\n    external\\n    pure\\n    returns (string memory);\\n\\n  function symbol()\\n    external\\n    pure\\n    returns (string memory);\\n\\n  function decimals()\\n    external\\n    pure\\n    returns (uint8);\\n}\\n\",\"keccak256\":\"0x724e6080597d9117b6b78581bad2dc6faa30bf63e015ec583df6cb10ce7fb7c8\",\"license\":\"MIT\"},\"src/core/lifecycle/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Initializable\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@metahero.io>\\n */\\ncontract Initializable {\\n  address private initializer;\\n\\n  // modifiers\\n\\n  /**\\n   * @dev Throws if msg.sender is not the initializer\\n   */\\n  modifier onlyInitializer() {\\n    require(\\n      initializer != address(0),\\n      \\\"Initializable#1\\\" // already initialized\\n    );\\n\\n    require(\\n      msg.sender == initializer,\\n      \\\"Initializable#2\\\" // msg.sender is not the initializer\\n    );\\n\\n    /// @dev removes initializer\\n    initializer = address(0);\\n\\n    _;\\n  }\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor()\\n    internal\\n  {\\n    initializer = msg.sender;\\n  }\\n\\n  // external functions (views)\\n\\n  /**\\n   * @notice Checks if contract is initialized\\n   * @return true when contract is initialized\\n   */\\n  function initialized()\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return initializer == address(0);\\n  }\\n}\\n\",\"keccak256\":\"0xe4741a154e5f2e6db7ba837b33e3d2f9c32179217de0c13cbda888170be5e24d\",\"license\":\"MIT\"},\"src/core/math/MathLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"./SafeMathLib.sol\\\";\\n\\n\\n/**\\n * @title Math library\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@metahero.io>\\n */\\nlibrary MathLib {\\n  using SafeMathLib for uint256;\\n\\n  // internal functions (pure)\\n\\n  /**\\n   * @notice Calcs a x p / 100\\n   */\\n  function percent(\\n    uint256 a,\\n    uint256 p\\n  )\\n    internal\\n    pure\\n    returns (uint256 result)\\n  {\\n    if (a != 0 && p != 0) {\\n      result = a.mul(p).div(100);\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0xeb9ba17d84220387df239090b90907a7d14cae4f82fd5e9aa67dfd710b1625ef\",\"license\":\"MIT\"},\"src/core/math/SafeMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Safe math library\\n *\\n * @notice Based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/5fe8f4e93bd1d4f5cc9a6899d7f24f5ffe4c14aa/contracts/math/SafeMath.sol\\n */\\nlibrary SafeMathLib {\\n  // internal functions (pure)\\n\\n  /**\\n   * @notice Calcs a + b\\n   */\\n  function add(\\n    uint256 a,\\n    uint256 b\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    uint256 c = a + b;\\n\\n    require(\\n      c >= a,\\n      \\\"SafeMathLib#1\\\"\\n    );\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @notice Calcs a - b\\n   */\\n  function sub(\\n    uint256 a,\\n    uint256 b\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    require(\\n      b <= a,\\n      \\\"SafeMathLib#2\\\"\\n    );\\n\\n    return a - b;\\n  }\\n\\n  /**\\n   * @notice Calcs a x b\\n   */\\n  function mul(\\n    uint256 a,\\n    uint256 b\\n  )\\n    internal\\n    pure\\n    returns (uint256 result)\\n  {\\n    if (a != 0 && b != 0) {\\n      result = a * b;\\n\\n      require(\\n        result / a == b,\\n        \\\"SafeMathLib#3\\\"\\n      );\\n    }\\n\\n    return result;\\n  }\\n\\n  /**\\n   * @notice Calcs a / b\\n   */\\n  function div(\\n    uint256 a,\\n    uint256 b\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    require(\\n      b != 0,\\n      \\\"SafeMathLib#4\\\"\\n    );\\n\\n    return a / b;\\n  }\\n}\\n\",\"keccak256\":\"0xb4d920f8a4ce97a5cd5a7afe9943be07e05abb3ea267c772473644173f5b71e2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612f71806100606000396000f3fe60806040523480156200001157600080fd5b5060043610620000ac5760003560e01c8063ad9d0337116200006f578063ad9d03371462000155578063b6332d7b146200018b578063c4d66de814620001ab578063f03cdcfb14620001cb578063fc0c546a14620001eb57620000ac565b8063158ef93e14620000b157806335def8b314620000d357806348c54b9d14620000f357806357725dec14620000ff57806389158d8e1462000135575b600080fd5b620000bb6200020d565b604051620000ca9190620023e3565b60405180910390f35b620000f16004803603810190620000eb919062001b30565b62000263565b005b620000fd62000276565b005b6200011d600480360381019062000117919062001b04565b62000284565b6040516200012c9190620022ae565b60405180910390f35b6200015360048036038101906200014d919062001c08565b620004ac565b005b6200017360048036038101906200016d919062001b04565b620004be565b604051620001829190620023bf565b60405180910390f35b620001a96004803603810190620001a3919062001b04565b620005c8565b005b620001c96004803603810190620001c3919062001b04565b6200071a565b005b620001e96004803603810190620001e3919062001b04565b6200096f565b005b620001f56200097e565b60405162000204919062002400565b60405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905090565b6200027133848484620009a4565b505050565b620002823333620010ed565b565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614620004a657600073ffffffffffffffffffffffffffffffffffffffff16600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614620003b657600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050620004a5565b600082604051602001620003cb9190620021fc565b604051602081830303815290604052805190602001209050606060405180602001620003f79062001a7a565b6020820181038252601f19601f82011660405250600060a01b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405160200162000447939291906200226f565b6040516020818303038152906040529050600060ff60f81b308484805190602001206040516020016200047e949392919062002219565b6040516020818303038152906040528051906020012090508060001c9350505050620004a7565b5b5b919050565b620004ba33338484620009a4565b5050565b6060600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015620005bd57838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481525050815260200190600101906200051f565b505050509050919050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156200063b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200063290620025b5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146200070c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000703906200252d565b60405180910390fd5b6200071781620018be565b50565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415620007ad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620007a49062002571565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146200083e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000835906200254f565b60405180910390fd5b60008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620008f2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620008e99062002461565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f908408e307fc569b417f6cbec5d5a06f44a0a505ac0479b47d421a4b2fd6a1e681604051620009649190620022ae565b60405180910390a150565b6200097b3382620010ed565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141562000a17576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000a0e906200241d565b60405180910390fd5b600082141562000a5e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000a55906200243f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141562000aff5762000afe83620018be565b5b600062000b16824262001a2290919063ffffffff16565b90506000600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161462000cae57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663da498b83886040518263ffffffff1660e01b815260040162000c0f9190620022ae565b60606040518083038186803b15801562000c2857600080fd5b505afa15801562000c3d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c63919062001bb2565b905050809150508062000cad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000ca490620025d7565b60405180910390fd5b5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663da498b83876040518263ffffffff1660e01b815260040162000d0b9190620022ae565b60606040518083038186803b15801562000d2457600080fd5b505afa15801562000d39573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d5f919062001bb2565b905050809150508062000da9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000da0906200250b565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663da498b83836040518263ffffffff1660e01b815260040162000e069190620022ae565b60606040518083038186803b15801562000e1f57600080fd5b505afa15801562000e34573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e5a919062001bb2565b905050809150508062000ea4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000e9b90620024c7565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8884886040518463ffffffff1660e01b815260040162000f0593929190620022cb565b602060405180830381600087803b15801562000f2057600080fd5b505af115801562000f35573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f5b919062001b86565b5062000f6662001a88565b87816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508581602001818152505083816040018181525050600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015550508673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167f0f7ae9891fe5b877ffdd33621970db3e5d162185914f1db43da2474c9fbc2948858988604051620010db9392919062002382565b60405180910390a35050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff16600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415620011bf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620011b690620024a5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141562001232576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200122990620024e9565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161462001362576000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663da498b83836040518263ffffffff1660e01b8152600401620012c59190620022ae565b60606040518083038186803b158015620012de57600080fd5b505afa158015620012f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001319919062001bb2565b505090508062001360576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200135790620025f9565b60405180910390fd5b505b600080600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050905060008114620017a1576000600182039050620013c562001a88565b60005b8281116200179d57600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081815481106200141b57fe5b90600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815250509150428260400151116200178e57828114620015f357600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208381548110620014ff57fe5b9060005260206000209060030201600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106200155857fe5b90600052602060002090600302016000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001820154816001015560028201548160020155905050828060019003935050620015fc565b80806001019150505b6200161582602001518662001a2290919063ffffffff16565b94508673ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff167fdd2282cf3fa66052eb013bd9fb1898f86ba7367d1be59d3f3c7dabdd0a00ced0600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168986602001518760400151604051620016e7949392919062002308565b60405180910390a3600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806200173857fe5b6001900381819060005260206000209060030201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000905560028201600090555050905562001797565b80806001019150505b620013c8565b5050505b6000821415620017e8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620017df9062002593565b60405180910390fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bec3fa1784846040518363ffffffff1660e01b81526004016200188492919062002355565b600060405180830381600087803b1580156200189f57600080fd5b505af1158015620018b4573d6000803e3d6000fd5b5050505050505050565b600081604051602001620018d39190620021fc565b604051602081830303815290604052805190602001209050600081600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516200191f9062001a7a565b6200192b9190620022ae565b8190604051809103906000f59050801580156200194c573d6000803e3d6000fd5b50905080600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff167f78ad32478b43e6ce1e20ccc71466410de348e267c4b0812e1f60fcb81094a0d48260405162001a159190620022ae565b60405180910390a2505050565b60008082840190508381101562001a70576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001a679062002483565b60405180910390fd5b8091505092915050565b61073e806200282783390190565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b60008135905062001ad081620027d8565b92915050565b60008151905062001ae781620027f2565b92915050565b60008135905062001afe816200280c565b92915050565b60006020828403121562001b1757600080fd5b600062001b278482850162001abf565b91505092915050565b60008060006060848603121562001b4657600080fd5b600062001b568682870162001abf565b935050602062001b698682870162001aed565b925050604062001b7c8682870162001aed565b9150509250925092565b60006020828403121562001b9957600080fd5b600062001ba98482850162001ad6565b91505092915050565b60008060006060848603121562001bc857600080fd5b600062001bd88682870162001ad6565b935050602062001beb8682870162001ad6565b925050604062001bfe8682870162001ad6565b9150509250925092565b6000806040838503121562001c1c57600080fd5b600062001c2c8582860162001aed565b925050602062001c3f8582860162001aed565b9150509250929050565b600062001c57838362002192565b60608301905092915050565b62001c6e816200267b565b82525050565b62001c7f816200267b565b82525050565b62001c9a62001c94826200267b565b62002785565b82525050565b600062001cad826200262b565b62001cb981856200264e565b935062001cc6836200261b565b8060005b8381101562001cfd57815162001ce1888262001c49565b975062001cee8362002641565b92505060018101905062001cca565b5085935050505092915050565b62001d15816200268f565b82525050565b62001d3062001d2a82620026c7565b620027a3565b82525050565b62001d4b62001d45826200269b565b62002799565b82525050565b62001d6662001d6082620026f3565b620027ad565b82525050565b600062001d798262002636565b62001d8581856200265f565b935062001d978185602086016200274f565b80840191505092915050565b62001dae8162002727565b82525050565b600062001dc3601a836200266a565b91507f4d6574616865726f54696d654c6f636b526567697374727923340000000000006000830152602082019050919050565b600062001e05601a836200266a565b91507f4d6574616865726f54696d654c6f636b526567697374727923350000000000006000830152602082019050919050565b600062001e47601a836200266a565b91507f4d6574616865726f54696d654c6f636b526567697374727923310000000000006000830152602082019050919050565b600062001e89600d836200266a565b91507f536166654d6174684c69622331000000000000000000000000000000000000006000830152602082019050919050565b600062001ecb601a836200266a565b91507f4d6574616865726f54696d654c6f636b526567697374727923390000000000006000830152602082019050919050565b600062001f0d601a836200266a565b91507f4d6574616865726f54696d654c6f636b526567697374727923380000000000006000830152602082019050919050565b600062001f4f601b836200266a565b91507f4d6574616865726f54696d654c6f636b526567697374727923313000000000006000830152602082019050919050565b600062001f91601a836200266a565b91507f4d6574616865726f54696d654c6f636b526567697374727923370000000000006000830152602082019050919050565b600062001fd3601a836200266a565b91507f4d6574616865726f54696d654c6f636b526567697374727923330000000000006000830152602082019050919050565b600062002015600f836200266a565b91507f496e697469616c697a61626c65233200000000000000000000000000000000006000830152602082019050919050565b600062002057600f836200266a565b91507f496e697469616c697a61626c65233100000000000000000000000000000000006000830152602082019050919050565b600062002099601b836200266a565b91507f4d6574616865726f54696d654c6f636b526567697374727923313200000000006000830152602082019050919050565b6000620020db601a836200266a565b91507f4d6574616865726f54696d654c6f636b526567697374727923320000000000006000830152602082019050919050565b60006200211d601a836200266a565b91507f4d6574616865726f54696d654c6f636b526567697374727923360000000000006000830152602082019050919050565b60006200215f601b836200266a565b91507f4d6574616865726f54696d654c6f636b526567697374727923313100000000006000830152602082019050919050565b606082016000820151620021aa600085018262001c63565b506020820151620021bf6020850182620021da565b506040820151620021d46040850182620021da565b50505050565b620021e5816200271d565b82525050565b620021f6816200271d565b82525050565b60006200220a828462001c85565b60148201915081905092915050565b600062002227828762001d36565b60018201915062002239828662001c85565b6014820191506200224b828562001d51565b6020820191506200225d828462001d51565b60208201915081905095945050505050565b60006200227d828662001d6c565b91506200228b828562001d1b565b600c820191506200229d828462001c85565b601482019150819050949350505050565b6000602082019050620022c5600083018462001c74565b92915050565b6000606082019050620022e2600083018662001c74565b620022f1602083018562001c74565b620023006040830184620021eb565b949350505050565b60006080820190506200231f600083018762001c74565b6200232e602083018662001c74565b6200233d6040830185620021eb565b6200234c6060830184620021eb565b95945050505050565b60006040820190506200236c600083018562001c74565b6200237b6020830184620021eb565b9392505050565b600060608201905062002399600083018662001c74565b620023a86020830185620021eb565b620023b76040830184620021eb565b949350505050565b60006020820190508181036000830152620023db818462001ca0565b905092915050565b6000602082019050620023fa600083018462001d0a565b92915050565b600060208201905062002417600083018462001da3565b92915050565b60006020820190508181036000830152620024388162001db4565b9050919050565b600060208201905081810360008301526200245a8162001df6565b9050919050565b600060208201905081810360008301526200247c8162001e38565b9050919050565b600060208201905081810360008301526200249e8162001e7a565b9050919050565b60006020820190508181036000830152620024c08162001ebc565b9050919050565b60006020820190508181036000830152620024e28162001efe565b9050919050565b60006020820190508181036000830152620025048162001f40565b9050919050565b60006020820190508181036000830152620025268162001f82565b9050919050565b60006020820190508181036000830152620025488162001fc4565b9050919050565b600060208201905081810360008301526200256a8162002006565b9050919050565b600060208201905081810360008301526200258c8162002048565b9050919050565b60006020820190508181036000830152620025ae816200208a565b9050919050565b60006020820190508181036000830152620025d081620020cc565b9050919050565b60006020820190508181036000830152620025f2816200210e565b9050919050565b60006020820190508181036000830152620026148162002150565b9050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006200268882620026fd565b9050919050565b60008115159050919050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b60007fffffffffffffffffffffffff000000000000000000000000000000000000000082169050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600062002734826200273b565b9050919050565b60006200274882620026fd565b9050919050565b60005b838110156200276f57808201518184015260208101905062002752565b838111156200277f576000848401525b50505050565b60006200279282620027b7565b9050919050565b6000819050919050565b6000819050919050565b6000819050919050565b6000620027c482620027cb565b9050919050565b60008160601b9050919050565b620027e3816200267b565b8114620027ef57600080fd5b50565b620027fd816200268f565b81146200280957600080fd5b50565b62002817816200271d565b81146200282357600080fd5b5056fe608060405234801561001057600080fd5b5060405161073e38038061073e833981810160405281019061003291906100ce565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610140565b6000815190506100c881610129565b92915050565b6000602082840312156100e057600080fd5b60006100ee848285016100b9565b91505092915050565b600061010282610109565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b610132816100f7565b811461013d57600080fd5b50565b6105ef8061014f6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80637b10399914610046578063bec3fa1714610064578063fc0c546a14610080575b600080fd5b61004e61009e565b60405161005b9190610477565b60405180910390f35b61007e6004803603810190610079919061032c565b6100c4565b005b6100886102c9565b6040516100959190610477565b60405180910390f35b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610154576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161014b906104db565b60405180910390fd5b6000606060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b85856040516024016101aa929190610492565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516102149190610460565b6000604051808303816000865af19150503d8060008114610251576040519150601f19603f3d011682016040523d82523d6000602084013e610256565b606091505b509150915081801561028457506000815114806102835750808060200190518101906102829190610368565b5b5b6102c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ba906104bb565b60405180910390fd5b50505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000813590506102fc8161059d565b92915050565b600081519050610311816105b4565b92915050565b600081359050610326816105cb565b92915050565b6000806040838503121561033f57600080fd5b600061034d858286016102ed565b925050602061035e85828601610317565b9150509250929050565b60006020828403121561037a57600080fd5b600061038884828501610302565b91505092915050565b61039a81610522565b82525050565b60006103ab826104fb565b6103b58185610506565b93506103c581856020860161056a565b80840191505092915050565b60006103de601883610511565b91507f4d6574616865726f54696d654c6f636b57616c6c6574233200000000000000006000830152602082019050919050565b600061041e601883610511565b91507f4d6574616865726f54696d654c6f636b57616c6c6574233100000000000000006000830152602082019050919050565b61045a81610560565b82525050565b600061046c82846103a0565b915081905092915050565b600060208201905061048c6000830184610391565b92915050565b60006040820190506104a76000830185610391565b6104b46020830184610451565b9392505050565b600060208201905081810360008301526104d4816103d1565b9050919050565b600060208201905081810360008301526104f481610411565b9050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600061052d82610540565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b8381101561058857808201518184015260208101905061056d565b83811115610597576000848401525b50505050565b6105a681610522565b81146105b157600080fd5b50565b6105bd81610534565b81146105c857600080fd5b50565b6105d481610560565b81146105df57600080fd5b5056fea164736f6c634300060c000aa164736f6c634300060c000a",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000ac5760003560e01c8063ad9d0337116200006f578063ad9d03371462000155578063b6332d7b146200018b578063c4d66de814620001ab578063f03cdcfb14620001cb578063fc0c546a14620001eb57620000ac565b8063158ef93e14620000b157806335def8b314620000d357806348c54b9d14620000f357806357725dec14620000ff57806389158d8e1462000135575b600080fd5b620000bb6200020d565b604051620000ca9190620023e3565b60405180910390f35b620000f16004803603810190620000eb919062001b30565b62000263565b005b620000fd62000276565b005b6200011d600480360381019062000117919062001b04565b62000284565b6040516200012c9190620022ae565b60405180910390f35b6200015360048036038101906200014d919062001c08565b620004ac565b005b6200017360048036038101906200016d919062001b04565b620004be565b604051620001829190620023bf565b60405180910390f35b620001a96004803603810190620001a3919062001b04565b620005c8565b005b620001c96004803603810190620001c3919062001b04565b6200071a565b005b620001e96004803603810190620001e3919062001b04565b6200096f565b005b620001f56200097e565b60405162000204919062002400565b60405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905090565b6200027133848484620009a4565b505050565b620002823333620010ed565b565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614620004a657600073ffffffffffffffffffffffffffffffffffffffff16600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614620003b657600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050620004a5565b600082604051602001620003cb9190620021fc565b604051602081830303815290604052805190602001209050606060405180602001620003f79062001a7a565b6020820181038252601f19601f82011660405250600060a01b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405160200162000447939291906200226f565b6040516020818303038152906040529050600060ff60f81b308484805190602001206040516020016200047e949392919062002219565b6040516020818303038152906040528051906020012090508060001c9350505050620004a7565b5b5b919050565b620004ba33338484620009a4565b5050565b6060600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015620005bd57838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481525050815260200190600101906200051f565b505050509050919050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156200063b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200063290620025b5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146200070c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000703906200252d565b60405180910390fd5b6200071781620018be565b50565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415620007ad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620007a49062002571565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146200083e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000835906200254f565b60405180910390fd5b60008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620008f2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620008e99062002461565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f908408e307fc569b417f6cbec5d5a06f44a0a505ac0479b47d421a4b2fd6a1e681604051620009649190620022ae565b60405180910390a150565b6200097b3382620010ed565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141562000a17576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000a0e906200241d565b60405180910390fd5b600082141562000a5e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000a55906200243f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141562000aff5762000afe83620018be565b5b600062000b16824262001a2290919063ffffffff16565b90506000600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161462000cae57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663da498b83886040518263ffffffff1660e01b815260040162000c0f9190620022ae565b60606040518083038186803b15801562000c2857600080fd5b505afa15801562000c3d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c63919062001bb2565b905050809150508062000cad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000ca490620025d7565b60405180910390fd5b5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663da498b83876040518263ffffffff1660e01b815260040162000d0b9190620022ae565b60606040518083038186803b15801562000d2457600080fd5b505afa15801562000d39573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d5f919062001bb2565b905050809150508062000da9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000da0906200250b565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663da498b83836040518263ffffffff1660e01b815260040162000e069190620022ae565b60606040518083038186803b15801562000e1f57600080fd5b505afa15801562000e34573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e5a919062001bb2565b905050809150508062000ea4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000e9b90620024c7565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8884886040518463ffffffff1660e01b815260040162000f0593929190620022cb565b602060405180830381600087803b15801562000f2057600080fd5b505af115801562000f35573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f5b919062001b86565b5062000f6662001a88565b87816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508581602001818152505083816040018181525050600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015550508673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167f0f7ae9891fe5b877ffdd33621970db3e5d162185914f1db43da2474c9fbc2948858988604051620010db9392919062002382565b60405180910390a35050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff16600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415620011bf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620011b690620024a5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141562001232576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200122990620024e9565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161462001362576000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663da498b83836040518263ffffffff1660e01b8152600401620012c59190620022ae565b60606040518083038186803b158015620012de57600080fd5b505afa158015620012f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001319919062001bb2565b505090508062001360576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200135790620025f9565b60405180910390fd5b505b600080600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050905060008114620017a1576000600182039050620013c562001a88565b60005b8281116200179d57600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081815481106200141b57fe5b90600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815250509150428260400151116200178e57828114620015f357600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208381548110620014ff57fe5b9060005260206000209060030201600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106200155857fe5b90600052602060002090600302016000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001820154816001015560028201548160020155905050828060019003935050620015fc565b80806001019150505b6200161582602001518662001a2290919063ffffffff16565b94508673ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff167fdd2282cf3fa66052eb013bd9fb1898f86ba7367d1be59d3f3c7dabdd0a00ced0600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168986602001518760400151604051620016e7949392919062002308565b60405180910390a3600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806200173857fe5b6001900381819060005260206000209060030201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000905560028201600090555050905562001797565b80806001019150505b620013c8565b5050505b6000821415620017e8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620017df9062002593565b60405180910390fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bec3fa1784846040518363ffffffff1660e01b81526004016200188492919062002355565b600060405180830381600087803b1580156200189f57600080fd5b505af1158015620018b4573d6000803e3d6000fd5b5050505050505050565b600081604051602001620018d39190620021fc565b604051602081830303815290604052805190602001209050600081600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516200191f9062001a7a565b6200192b9190620022ae565b8190604051809103906000f59050801580156200194c573d6000803e3d6000fd5b50905080600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff167f78ad32478b43e6ce1e20ccc71466410de348e267c4b0812e1f60fcb81094a0d48260405162001a159190620022ae565b60405180910390a2505050565b60008082840190508381101562001a70576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001a679062002483565b60405180910390fd5b8091505092915050565b61073e806200282783390190565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b60008135905062001ad081620027d8565b92915050565b60008151905062001ae781620027f2565b92915050565b60008135905062001afe816200280c565b92915050565b60006020828403121562001b1757600080fd5b600062001b278482850162001abf565b91505092915050565b60008060006060848603121562001b4657600080fd5b600062001b568682870162001abf565b935050602062001b698682870162001aed565b925050604062001b7c8682870162001aed565b9150509250925092565b60006020828403121562001b9957600080fd5b600062001ba98482850162001ad6565b91505092915050565b60008060006060848603121562001bc857600080fd5b600062001bd88682870162001ad6565b935050602062001beb8682870162001ad6565b925050604062001bfe8682870162001ad6565b9150509250925092565b6000806040838503121562001c1c57600080fd5b600062001c2c8582860162001aed565b925050602062001c3f8582860162001aed565b9150509250929050565b600062001c57838362002192565b60608301905092915050565b62001c6e816200267b565b82525050565b62001c7f816200267b565b82525050565b62001c9a62001c94826200267b565b62002785565b82525050565b600062001cad826200262b565b62001cb981856200264e565b935062001cc6836200261b565b8060005b8381101562001cfd57815162001ce1888262001c49565b975062001cee8362002641565b92505060018101905062001cca565b5085935050505092915050565b62001d15816200268f565b82525050565b62001d3062001d2a82620026c7565b620027a3565b82525050565b62001d4b62001d45826200269b565b62002799565b82525050565b62001d6662001d6082620026f3565b620027ad565b82525050565b600062001d798262002636565b62001d8581856200265f565b935062001d978185602086016200274f565b80840191505092915050565b62001dae8162002727565b82525050565b600062001dc3601a836200266a565b91507f4d6574616865726f54696d654c6f636b526567697374727923340000000000006000830152602082019050919050565b600062001e05601a836200266a565b91507f4d6574616865726f54696d654c6f636b526567697374727923350000000000006000830152602082019050919050565b600062001e47601a836200266a565b91507f4d6574616865726f54696d654c6f636b526567697374727923310000000000006000830152602082019050919050565b600062001e89600d836200266a565b91507f536166654d6174684c69622331000000000000000000000000000000000000006000830152602082019050919050565b600062001ecb601a836200266a565b91507f4d6574616865726f54696d654c6f636b526567697374727923390000000000006000830152602082019050919050565b600062001f0d601a836200266a565b91507f4d6574616865726f54696d654c6f636b526567697374727923380000000000006000830152602082019050919050565b600062001f4f601b836200266a565b91507f4d6574616865726f54696d654c6f636b526567697374727923313000000000006000830152602082019050919050565b600062001f91601a836200266a565b91507f4d6574616865726f54696d654c6f636b526567697374727923370000000000006000830152602082019050919050565b600062001fd3601a836200266a565b91507f4d6574616865726f54696d654c6f636b526567697374727923330000000000006000830152602082019050919050565b600062002015600f836200266a565b91507f496e697469616c697a61626c65233200000000000000000000000000000000006000830152602082019050919050565b600062002057600f836200266a565b91507f496e697469616c697a61626c65233100000000000000000000000000000000006000830152602082019050919050565b600062002099601b836200266a565b91507f4d6574616865726f54696d654c6f636b526567697374727923313200000000006000830152602082019050919050565b6000620020db601a836200266a565b91507f4d6574616865726f54696d654c6f636b526567697374727923320000000000006000830152602082019050919050565b60006200211d601a836200266a565b91507f4d6574616865726f54696d654c6f636b526567697374727923360000000000006000830152602082019050919050565b60006200215f601b836200266a565b91507f4d6574616865726f54696d654c6f636b526567697374727923313100000000006000830152602082019050919050565b606082016000820151620021aa600085018262001c63565b506020820151620021bf6020850182620021da565b506040820151620021d46040850182620021da565b50505050565b620021e5816200271d565b82525050565b620021f6816200271d565b82525050565b60006200220a828462001c85565b60148201915081905092915050565b600062002227828762001d36565b60018201915062002239828662001c85565b6014820191506200224b828562001d51565b6020820191506200225d828462001d51565b60208201915081905095945050505050565b60006200227d828662001d6c565b91506200228b828562001d1b565b600c820191506200229d828462001c85565b601482019150819050949350505050565b6000602082019050620022c5600083018462001c74565b92915050565b6000606082019050620022e2600083018662001c74565b620022f1602083018562001c74565b620023006040830184620021eb565b949350505050565b60006080820190506200231f600083018762001c74565b6200232e602083018662001c74565b6200233d6040830185620021eb565b6200234c6060830184620021eb565b95945050505050565b60006040820190506200236c600083018562001c74565b6200237b6020830184620021eb565b9392505050565b600060608201905062002399600083018662001c74565b620023a86020830185620021eb565b620023b76040830184620021eb565b949350505050565b60006020820190508181036000830152620023db818462001ca0565b905092915050565b6000602082019050620023fa600083018462001d0a565b92915050565b600060208201905062002417600083018462001da3565b92915050565b60006020820190508181036000830152620024388162001db4565b9050919050565b600060208201905081810360008301526200245a8162001df6565b9050919050565b600060208201905081810360008301526200247c8162001e38565b9050919050565b600060208201905081810360008301526200249e8162001e7a565b9050919050565b60006020820190508181036000830152620024c08162001ebc565b9050919050565b60006020820190508181036000830152620024e28162001efe565b9050919050565b60006020820190508181036000830152620025048162001f40565b9050919050565b60006020820190508181036000830152620025268162001f82565b9050919050565b60006020820190508181036000830152620025488162001fc4565b9050919050565b600060208201905081810360008301526200256a8162002006565b9050919050565b600060208201905081810360008301526200258c8162002048565b9050919050565b60006020820190508181036000830152620025ae816200208a565b9050919050565b60006020820190508181036000830152620025d081620020cc565b9050919050565b60006020820190508181036000830152620025f2816200210e565b9050919050565b60006020820190508181036000830152620026148162002150565b9050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006200268882620026fd565b9050919050565b60008115159050919050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b60007fffffffffffffffffffffffff000000000000000000000000000000000000000082169050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600062002734826200273b565b9050919050565b60006200274882620026fd565b9050919050565b60005b838110156200276f57808201518184015260208101905062002752565b838111156200277f576000848401525b50505050565b60006200279282620027b7565b9050919050565b6000819050919050565b6000819050919050565b6000819050919050565b6000620027c482620027cb565b9050919050565b60008160601b9050919050565b620027e3816200267b565b8114620027ef57600080fd5b50565b620027fd816200268f565b81146200280957600080fd5b50565b62002817816200271d565b81146200282357600080fd5b5056fe608060405234801561001057600080fd5b5060405161073e38038061073e833981810160405281019061003291906100ce565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610140565b6000815190506100c881610129565b92915050565b6000602082840312156100e057600080fd5b60006100ee848285016100b9565b91505092915050565b600061010282610109565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b610132816100f7565b811461013d57600080fd5b50565b6105ef8061014f6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80637b10399914610046578063bec3fa1714610064578063fc0c546a14610080575b600080fd5b61004e61009e565b60405161005b9190610477565b60405180910390f35b61007e6004803603810190610079919061032c565b6100c4565b005b6100886102c9565b6040516100959190610477565b60405180910390f35b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610154576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161014b906104db565b60405180910390fd5b6000606060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b85856040516024016101aa929190610492565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516102149190610460565b6000604051808303816000865af19150503d8060008114610251576040519150601f19603f3d011682016040523d82523d6000602084013e610256565b606091505b509150915081801561028457506000815114806102835750808060200190518101906102829190610368565b5b5b6102c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ba906104bb565b60405180910390fd5b50505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000813590506102fc8161059d565b92915050565b600081519050610311816105b4565b92915050565b600081359050610326816105cb565b92915050565b6000806040838503121561033f57600080fd5b600061034d858286016102ed565b925050602061035e85828601610317565b9150509250929050565b60006020828403121561037a57600080fd5b600061038884828501610302565b91505092915050565b61039a81610522565b82525050565b60006103ab826104fb565b6103b58185610506565b93506103c581856020860161056a565b80840191505092915050565b60006103de601883610511565b91507f4d6574616865726f54696d654c6f636b57616c6c6574233200000000000000006000830152602082019050919050565b600061041e601883610511565b91507f4d6574616865726f54696d654c6f636b57616c6c6574233100000000000000006000830152602082019050919050565b61045a81610560565b82525050565b600061046c82846103a0565b915081905092915050565b600060208201905061048c6000830184610391565b92915050565b60006040820190506104a76000830185610391565b6104b46020830184610451565b9392505050565b600060208201905081810360008301526104d4816103d1565b9050919050565b600060208201905081810360008301526104f481610411565b9050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600061052d82610540565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b8381101561058857808201518184015260208101905061056d565b83811115610597576000848401525b50505050565b6105a681610522565b81146105b157600080fd5b50565b6105bd81610534565b81146105c857600080fd5b50565b6105d481610560565b81146105df57600080fd5b5056fea164736f6c634300060c000aa164736f6c634300060c000a",
  "devdoc": {
    "author": "Stanisław Głogowski <stan@metahero.io>",
    "events": {
      "ClaimerWalletCreated(address,address)": {
        "details": "Emitted when the claimer wallet is created",
        "params": {
          "claimer": "claimer address",
          "claimerWallet": "claimer wallet address"
        }
      },
      "Initialized(address)": {
        "details": "Emitted when the contract is initialized",
        "params": {
          "token": "token address"
        }
      },
      "TokensLocked(address,address,address,uint256,uint256)": {
        "details": "Emitted when tokens are locked",
        "params": {
          "amount": "tokens amount",
          "claimer": "claimer address",
          "claimerWallet": "claimer wallet address",
          "deadline": "deadline in seconds",
          "spender": "spender address"
        }
      },
      "TokensUnlocked(address,address,address,address,uint256,uint256)": {
        "details": "Emitted when tokens are unlocked",
        "params": {
          "amount": "tokens amount",
          "claimer": "claimer address",
          "claimerWallet": "claimer wallet address",
          "deadline": "deadline in seconds",
          "recipient": "recipient address",
          "spender": "spender address"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "claimTokens()": {
        "details": "Claims tokens"
      },
      "claimTokensTo(address)": {
        "details": "Claims tokens to recipient",
        "params": {
          "recipient": "recipient address"
        }
      },
      "computeClaimerWallet(address)": {
        "details": "Computes claimer wallet",
        "params": {
          "claimer": "claimer address"
        },
        "returns": {
          "result": "claimer wallet address"
        }
      },
      "constructor": {
        "details": "Public constructor"
      },
      "createClaimerWallet(address)": {
        "details": "Creates claimer wallet",
        "params": {
          "claimer": "claimer address"
        }
      },
      "getClaimerTimeLocks(address)": {
        "details": "Gets claimer time locks",
        "params": {
          "claimer": "claimer address"
        },
        "returns": {
          "_0": "array of time locks"
        }
      },
      "initialize(address)": {
        "details": "Initializes the contract",
        "params": {
          "token_": "token address"
        }
      },
      "initialized()": {
        "returns": {
          "_0": "true when contract is initialized"
        }
      },
      "lockTokens(uint256,uint256)": {
        "details": "Locks own tokens",
        "params": {
          "amount": "tokens amount",
          "unlockedIn": "seconds to unlock"
        }
      },
      "lockTokensTo(address,uint256,uint256)": {
        "details": "Locks tokens to claimer",
        "params": {
          "amount": "tokens amount",
          "claimer": "claimer address",
          "unlockedIn": "seconds to unlock"
        }
      }
    },
    "stateVariables": {
      "token": {
        "return": "token address"
      }
    },
    "title": "Metahero time lock registry",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initialized()": {
        "notice": "Checks if contract is initialized"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5458,
        "contract": "src/MetaheroTimeLockRegistry.sol:MetaheroTimeLockRegistry",
        "label": "initializer",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1571,
        "contract": "src/MetaheroTimeLockRegistry.sol:MetaheroTimeLockRegistry",
        "label": "token",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(MetaheroToken)4624"
      },
      {
        "astId": 1575,
        "contract": "src/MetaheroTimeLockRegistry.sol:MetaheroTimeLockRegistry",
        "label": "claimerWallets",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 1580,
        "contract": "src/MetaheroTimeLockRegistry.sol:MetaheroTimeLockRegistry",
        "label": "claimerTimeLocks",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_array(t_struct(TimeLock)1568_storage)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(TimeLock)1568_storage)dyn_storage": {
        "base": "t_struct(TimeLock)1568_storage",
        "encoding": "dynamic_array",
        "label": "struct MetaheroTimeLockRegistry.TimeLock[]",
        "numberOfBytes": "32"
      },
      "t_contract(MetaheroToken)4624": {
        "encoding": "inplace",
        "label": "contract MetaheroToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_struct(TimeLock)1568_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MetaheroTimeLockRegistry.TimeLock[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(TimeLock)1568_storage)dyn_storage"
      },
      "t_struct(TimeLock)1568_storage": {
        "encoding": "inplace",
        "label": "struct MetaheroTimeLockRegistry.TimeLock",
        "members": [
          {
            "astId": 1563,
            "contract": "src/MetaheroTimeLockRegistry.sol:MetaheroTimeLockRegistry",
            "label": "spender",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1565,
            "contract": "src/MetaheroTimeLockRegistry.sol:MetaheroTimeLockRegistry",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1567,
            "contract": "src/MetaheroTimeLockRegistry.sol:MetaheroTimeLockRegistry",
            "label": "deadline",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}