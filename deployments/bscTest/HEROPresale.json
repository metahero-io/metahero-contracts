{
  "address": "0x6ac0701F5E54d68523BBfB65d97c53936b7E2F2B",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AccountAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AccountRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "DeadlineUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensAmountPerNative",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxPurchasePrice",
          "type": "uint256"
        }
      ],
      "name": "SettingsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensAmount",
          "type": "uint256"
        }
      ],
      "name": "TokensPurchased",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "addAccounts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyTokens",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deadline",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finishPresale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokensAmountPerNative",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPurchasePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadlineIn",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "removeAccounts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "controller_",
          "type": "address"
        }
      ],
      "name": "setController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "settings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokensAmountPerNative",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPurchasePrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "summary",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAccounts",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalTokens",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "syncTotalTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract HEROToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "deadlineIn_",
          "type": "uint256"
        }
      ],
      "name": "updateDeadline",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb29e0c12e4483704434b0cd0b14d8fbac2291732581b867c89e23ab8d157e763",
  "receipt": {
    "to": null,
    "from": "0x2101F46D23b84eEa6a310B1dBa58f66DCE17A0Cf",
    "contractAddress": "0x6ac0701F5E54d68523BBfB65d97c53936b7E2F2B",
    "transactionIndex": 1,
    "gasUsed": "1898760",
    "logsBloom": "0x
    "blockHash": "0xd64b444640987a1be6430be0bf3f3e7e5785708dfa823c1943d9984b63603ccd",
    "transactionHash": "0xb29e0c12e4483704434b0cd0b14d8fbac2291732581b867c89e23ab8d157e763",
    "logs": [],
    "blockNumber": 9838931,
    "cumulativeGasUsed": "2012959",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "97d8f9d5c8e18916d2d7f0fa4af6be53",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccountAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccountRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"DeadlineUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensAmountPerNative\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxPurchasePrice\",\"type\":\"uint256\"}],\"name\":\"SettingsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensAmount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"addAccounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokensAmountPerNative\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPurchasePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadlineIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"removeAccounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller_\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensAmountPerNative\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPurchasePrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"summary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAccounts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syncTotalTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract HEROToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadlineIn_\",\"type\":\"uint256\"}],\"name\":\"updateDeadline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Public constructor\"}},\"title\":\"HERO presale\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/HEROPresale.sol\":\"HEROPresale\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/HEROPresale.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"./components/Controlled.sol\\\";\\nimport \\\"./components/Initializable.sol\\\";\\nimport \\\"./libs/MathLib.sol\\\";\\nimport \\\"./HEROToken.sol\\\";\\n\\n\\n/**\\n * @title HERO presale\\n */\\ncontract HEROPresale is Controlled, Initializable {\\n  using MathLib for uint256;\\n\\n  struct Settings {\\n    uint256 tokensAmountPerNative;\\n    uint256 maxPurchasePrice; // max purchase price per whitelisted account\\n  }\\n\\n  struct Summary {\\n    uint256 totalAccounts;\\n    uint256 totalTokens;\\n  }\\n\\n  // defaults\\n\\n  uint256 private constant DEFAULT_DEADLINE_IN = 14 * 24 * 60 * 60; // 14 days\\n  uint256 private constant DEFAULT_TOKENS_AMOUNT_PER_NATIVE = 200000;\\n  uint256 private constant DEFAULT_MAX_PURCHASE_PRICE = 10 ** 18; // 10.000000000000000000\\n\\n  HEROToken public token;\\n  Settings public settings;\\n  Summary public summary;\\n  uint256 public deadline;\\n\\n  mapping (address => bool) public whitelist;\\n\\n  // events\\n\\n  event TokensPurchased(\\n    address indexed account,\\n    uint256 tokensPrice,\\n    uint256 tokensAmount\\n  );\\n\\n  event SettingsUpdated(\\n    uint256 tokensAmountPerNative,\\n    uint256 maxPurchasePrice\\n  );\\n\\n  event DeadlineUpdated(\\n    uint256 deadline\\n  );\\n\\n  event AccountAdded(\\n    address indexed account\\n  );\\n\\n  event AccountRemoved(\\n    address indexed account\\n  );\\n\\n  /**\\n   * @dev Public constructor\\n   */\\n  constructor ()\\n    public\\n    Controlled()\\n    Initializable()\\n  {\\n    //\\n  }\\n\\n  // external functions (payable)\\n\\n  function buyTokens()\\n    external\\n    payable\\n  {\\n    require(\\n      block.timestamp < deadline, // solhint-disable-line not-rely-on-time\\n      \\\"HEROPresale#1\\\"\\n    );\\n\\n    require(\\n      whitelist[msg.sender],\\n      \\\"HEROPresale#2\\\"\\n    );\\n\\n    require(\\n      msg.value != 0,\\n      \\\"HEROPresale#3\\\"\\n    );\\n\\n    require(\\n      msg.value <= settings.maxPurchasePrice,\\n      \\\"HEROPresale#4\\\"\\n    );\\n\\n    uint256 tokensAmount = msg.value.mul(settings.tokensAmountPerNative);\\n\\n    require(\\n      tokensAmount <= summary.totalTokens,\\n      \\\"HEROPresale#5\\\"\\n    );\\n\\n    whitelist[msg.sender] = false;\\n\\n    summary.totalAccounts = summary.totalAccounts.sub(1);\\n    summary.totalTokens = summary.totalTokens.sub(tokensAmount);\\n\\n    token.transfer(\\n      msg.sender,\\n      tokensAmount\\n    );\\n\\n    emit TokensPurchased(\\n      msg.sender,\\n      msg.value,\\n      tokensAmount\\n    );\\n  }\\n\\n  // external functions\\n\\n  function initialize(\\n    address payable token_,\\n    uint256 tokensAmountPerNative,\\n    uint256 maxPurchasePrice,\\n    uint256 deadlineIn, // in seconds\\n    address[] calldata accounts\\n  )\\n    external\\n    onlyInitializer\\n  {\\n    require(\\n      token_ != address(0),\\n      \\\"HEROPresale#6\\\"\\n    );\\n\\n    token = HEROToken(token_);\\n\\n    summary.totalTokens = token.balanceOf(address(this));\\n\\n    _updateSettings(\\n      tokensAmountPerNative == 0\\n        ? DEFAULT_TOKENS_AMOUNT_PER_NATIVE\\n        : tokensAmountPerNative,\\n      maxPurchasePrice == 0\\n        ? DEFAULT_MAX_PURCHASE_PRICE\\n        : maxPurchasePrice\\n    );\\n\\n    _updateDeadline(deadlineIn != 0\\n      ? deadlineIn\\n      : DEFAULT_DEADLINE_IN\\n    );\\n\\n    if (accounts.length != 0) {\\n      _addAccounts(accounts);\\n    }\\n  }\\n\\n  function syncTotalTokens()\\n    external\\n    onlyController\\n  {\\n    summary.totalTokens = token.balanceOf(address(this));\\n  }\\n\\n  function updateDeadline(\\n    uint256 deadlineIn_ // in seconds\\n  )\\n    external\\n    onlyController\\n  {\\n    _updateDeadline(deadlineIn_);\\n  }\\n\\n  function addAccounts(\\n    address[] calldata accounts\\n  )\\n    external\\n    onlyController\\n  {\\n    _addAccounts(accounts);\\n  }\\n\\n  function removeAccounts(\\n    address[] calldata accounts\\n  )\\n    external\\n    onlyController\\n  {\\n    uint256 totalRemoved;\\n    uint256 accountsLen = accounts.length;\\n\\n    for (uint256 index ; index < accountsLen ; index++) {\\n      require(\\n        accounts[index] != address(0),\\n        \\\"HEROPresale#7\\\"\\n      );\\n\\n      if (whitelist[accounts[index]]) {\\n        whitelist[accounts[index]] = false;\\n\\n        totalRemoved = totalRemoved.add(1);\\n\\n        emit AccountRemoved(\\n          accounts[index]\\n        );\\n      }\\n    }\\n\\n    require(\\n      totalRemoved != 0,\\n      \\\"HEROPresale#8\\\"\\n    );\\n\\n    summary.totalAccounts = summary.totalAccounts.sub(totalRemoved);\\n  }\\n\\n  function finishPresale()\\n    external\\n    onlyController\\n  {\\n    require(\\n      block.timestamp >= deadline, // solhint-disable-line not-rely-on-time\\n      \\\"HEROPresale#9\\\"\\n    );\\n\\n    uint256 totalTokens = token.balanceOf(address(this));\\n\\n    if (totalTokens != 0) {\\n      token.burn(\\n        totalTokens\\n      );\\n    }\\n\\n    selfdestruct(msg.sender);\\n  }\\n\\n  // private functions\\n\\n  function _updateSettings(\\n    uint256 tokensAmountPerNative,\\n    uint256 maxPurchasePrice\\n  )\\n    private\\n  {\\n    require(\\n      tokensAmountPerNative != 0,\\n      \\\"HEROPresale#10\\\"\\n    );\\n\\n    require(\\n      maxPurchasePrice != 0,\\n      \\\"HEROPresale#11\\\"\\n    );\\n\\n    settings.tokensAmountPerNative = tokensAmountPerNative;\\n    settings.maxPurchasePrice = maxPurchasePrice;\\n\\n    emit SettingsUpdated(\\n      tokensAmountPerNative,\\n      maxPurchasePrice\\n    );\\n  }\\n\\n  function _updateDeadline(\\n    uint256 deadlineIn\\n  )\\n    private\\n  {\\n    deadline = block.timestamp.add(deadlineIn); // solhint-disable-line not-rely-on-time\\n\\n    emit DeadlineUpdated(\\n      deadline\\n    );\\n  }\\n\\n  function _addAccounts(\\n    address[] memory accounts\\n  )\\n    private\\n  {\\n    uint256 totalAdded;\\n    uint256 accountsLen = accounts.length;\\n\\n    for (uint256 index ; index < accountsLen ; index++) {\\n      require(\\n        accounts[index] != address(0),\\n        \\\"HEROPresale#12\\\"\\n      );\\n\\n      if (!whitelist[accounts[index]]) {\\n        whitelist[accounts[index]] = true;\\n\\n        totalAdded = totalAdded.add(1);\\n\\n        emit AccountAdded(\\n          accounts[index]\\n        );\\n      }\\n    }\\n\\n    require(\\n      totalAdded != 0,\\n      \\\"HEROPresale#13\\\"\\n    );\\n\\n    summary.totalAccounts = summary.totalAccounts.add(totalAdded);\\n  }\\n}\\n\",\"keccak256\":\"0x4eb9cb42ef6a0145e88cd70a967a41352cb3ab6d20cad074a63071ba17e70167\",\"license\":\"MIT\"},\"src/HEROToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./components/ERC20Metadata.sol\\\";\\nimport \\\"./components/Initializable.sol\\\";\\nimport \\\"./HEROTokenLP.sol\\\";\\n\\n\\n/**\\n * @title HERO token\\n */\\ncontract HEROToken is ERC20Metadata, Initializable, HEROTokenLP {\\n  // metadata\\n  string private constant TOKEN_NAME = \\\"Metahero\\\";\\n  string private constant TOKEN_SYMBOL = \\\"HERO\\\";\\n  uint8 private constant TOKEN_DECIMALS = 18; // 0.000000000000000000\\n\\n  /**\\n   * @dev Public constructor\\n   */\\n  constructor ()\\n    public\\n    ERC20Metadata(\\n      Metadata(TOKEN_NAME, TOKEN_SYMBOL, TOKEN_DECIMALS)\\n    )\\n    Initializable()\\n    HEROTokenLP()\\n  {\\n    //\\n  }\\n\\n  // external functions\\n\\n  function initialize(\\n    Fees calldata lpFees,\\n    Fees calldata rewardsFees,\\n    uint256 totalSupply_,\\n    address[] calldata excluded_,\\n    uint256 enableBurnLPAtValue,\\n    address swapRouter_,\\n    address stableCoin_\\n  )\\n    external\\n    onlyInitializer\\n  {\\n    _initializeEconomy(\\n      lpFees,\\n      rewardsFees,\\n      totalSupply_,\\n      excluded_\\n    );\\n\\n    _initializeLP(\\n      enableBurnLPAtValue,\\n      swapRouter_,\\n      stableCoin_\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x45e43d6eaef24736859757fe188279c46ad20f9064dccaab802deb9e3eb80ae2\",\"license\":\"MIT\"},\"src/HEROTokenCommon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./components/Controlled.sol\\\";\\nimport \\\"./libs/MathLib.sol\\\";\\n\\n\\n/**\\n * @title HERO token common module\\n */\\nabstract contract HEROTokenCommon is Controlled {\\n  using MathLib for uint256;\\n\\n  struct Fees {\\n    uint256 sender; // percent\\n    uint256 recipient; // percent\\n  }\\n\\n  struct Settings {\\n    Fees lpFees;\\n    Fees rewardsFees;\\n    uint256 enableBurnLPAtValue;\\n  }\\n\\n  Settings public settings;\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor ()\\n    internal\\n    Controlled()\\n  {\\n    //\\n  }\\n}\\n\",\"keccak256\":\"0x6714c4b834a1d881702338db4a1086b09974950431dd575bae78c909061e69a4\",\"license\":\"MIT\"},\"src/HEROTokenEconomy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./components/ERC20.sol\\\";\\nimport \\\"./HEROTokenCommon.sol\\\";\\n\\n\\n/**\\n * @title HERO token economy module\\n */\\ncontract HEROTokenEconomy is ERC20, HEROTokenCommon {\\n  struct Summary {\\n    uint256 totalExcluded;\\n    uint256 totalHolding;\\n    uint256 totalRewards;\\n    uint256 totalSupply;\\n  }\\n\\n  struct ExcludedAccount {\\n    bool exists;\\n    bool excludeRecipientFromFee;\\n  }\\n\\n  // defaults\\n\\n  uint256 private constant DEFAULT_TOTAL_SUPPLY = 10000000000 * 10 ** 18; // 10,000,000,000.000000000000000000\\n\\n  Summary public summary;\\n  bool public presaleFinished;\\n\\n  mapping (address => uint256) internal accountBalances;\\n  mapping (address => mapping (address => uint256)) private accountAllowances;\\n  mapping (address => ExcludedAccount) private excludedAccounts;\\n\\n  // events\\n\\n  event PresaleFinished();\\n\\n  event AccountExcluded(\\n    address indexed account,\\n    bool excludeRecipientFromFee\\n  );\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor ()\\n    internal\\n    HEROTokenCommon()\\n  {\\n    //\\n  }\\n\\n  // external functions\\n\\n  function finishPresale()\\n    external\\n    onlyController\\n  {\\n    require(\\n      !presaleFinished,\\n      \\\"HEROTokenEconomy#1\\\"\\n    );\\n\\n    presaleFinished = true;\\n\\n    emit PresaleFinished();\\n  }\\n\\n  function excludeAccount(\\n    address account,\\n    bool excludeRecipientFromFee\\n  )\\n    external\\n    onlyController\\n  {\\n    _excludeAccount(\\n      account,\\n      excludeRecipientFromFee\\n    );\\n  }\\n\\n  function transfer(\\n    address recipient,\\n    uint256 amount\\n  )\\n    external\\n    override\\n    returns (bool)\\n  {\\n    _transfer(\\n      msg.sender,\\n      recipient,\\n      amount\\n    );\\n\\n    return true;\\n  }\\n\\n  function burn(\\n    uint256 amount\\n  )\\n    external\\n  {\\n    _burn(\\n      msg.sender,\\n      amount\\n    );\\n  }\\n\\n  function approve(\\n    address spender,\\n    uint256 amount\\n  )\\n    external\\n    override\\n    returns (bool)\\n  {\\n    _approve(\\n      msg.sender,\\n      spender,\\n      amount\\n    );\\n\\n    return true;\\n  }\\n\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    external\\n    override\\n    returns (bool)\\n  {\\n    _transfer(\\n      sender,\\n      recipient,\\n      amount\\n    );\\n\\n    uint256 allowance = accountAllowances[sender][msg.sender];\\n\\n    require(\\n      allowance >= amount,\\n      \\\"HEROTokenEconomy#2\\\"\\n    );\\n\\n    _approve(\\n      sender,\\n      msg.sender,\\n      allowance.sub(amount)\\n    );\\n\\n    return true;\\n  }\\n\\n  // external functions (views)\\n\\n  function totalSupply()\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return summary.totalSupply;\\n  }\\n\\n  function allowance(\\n    address owner,\\n    address spender\\n  )\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return accountAllowances[owner][spender];\\n  }\\n\\n  function balanceOf(\\n    address account\\n  )\\n    external\\n    view\\n    override\\n    returns (uint256 result)\\n  {\\n    result = accountBalances[account];\\n\\n    if (\\n      !excludedAccounts[account].exists &&\\n      summary.totalRewards != 0\\n    ) {\\n      result = result.add(\\n        summary.totalRewards\\n        .mul(result)\\n        .div(summary.totalHolding)\\n      );\\n    }\\n\\n    return result;\\n  }\\n\\n  // internal functions\\n\\n  function _initializeEconomy(\\n    Fees memory lpFees,\\n    Fees memory rewardsFees,\\n    uint256 totalSupply_,\\n    address[] calldata excludedAccounts_\\n  )\\n    internal\\n  {\\n    settings.lpFees = lpFees;\\n    settings.rewardsFees = rewardsFees;\\n\\n    _mint(\\n      msg.sender,\\n      totalSupply_ == 0\\n      ? DEFAULT_TOTAL_SUPPLY\\n      : totalSupply_\\n    );\\n\\n    _excludeAccount(address(this), false);\\n\\n    uint256 excludedAccountsLen = excludedAccounts_.length;\\n\\n    for (uint256 index; index < excludedAccountsLen; index++) {\\n      _excludeAccount(excludedAccounts_[index], false);\\n    }\\n  }\\n\\n  function _excludeAccount(\\n    address account,\\n    bool excludeRecipientFromFee\\n  )\\n    internal\\n  {\\n    require(\\n      account != address(0),\\n      \\\"HEROTokenEconomy#3\\\"\\n    );\\n\\n    if (excludedAccounts[account].exists) {\\n      require(\\n        excludedAccounts[account].excludeRecipientFromFee != excludeRecipientFromFee,\\n        \\\"HEROTokenEconomy#4\\\"\\n      );\\n\\n      excludedAccounts[account].excludeRecipientFromFee = excludeRecipientFromFee;\\n    } else {\\n      require(\\n        accountBalances[account] == 0,\\n        \\\"HEROTokenEconomy#5\\\"\\n      );\\n\\n      excludedAccounts[account].exists = true;\\n      excludedAccounts[account].excludeRecipientFromFee = excludeRecipientFromFee;\\n    }\\n\\n    emit AccountExcluded(\\n      account,\\n      excludeRecipientFromFee\\n    );\\n  }\\n\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  )\\n    internal\\n  {\\n    require(\\n      owner != address(0),\\n      \\\"HEROTokenEconomy#6\\\"\\n    );\\n\\n    require(\\n      spender != address(0),\\n      \\\"HEROTokenEconomy#7\\\"\\n    );\\n\\n    accountAllowances[owner][spender] = amount;\\n\\n    emit Approval(\\n      owner,\\n      spender,\\n      amount\\n    );\\n  }\\n\\n  function _mint(\\n    address account,\\n    uint256 amount\\n  )\\n    internal\\n  {\\n    require(\\n      account != address(0),\\n      \\\"HEROTokenEconomy#8\\\"\\n    );\\n\\n    require(\\n      amount != 0,\\n      \\\"HEROTokenEconomy#9\\\"\\n    );\\n\\n    _excludeAccount(account, false);\\n\\n    summary.totalSupply = summary.totalSupply.add(amount);\\n    summary.totalExcluded = summary.totalExcluded.add(amount);\\n\\n    accountBalances[account] = accountBalances[account].add(amount);\\n\\n    emit Transfer(\\n      address(0),\\n      account,\\n      amount\\n    );\\n  }\\n\\n  function _burn(\\n    address account,\\n    uint256 amount\\n  )\\n    internal\\n  {\\n    require(\\n      account != address(0),\\n      \\\"HEROTokenEconomy#10\\\"\\n    );\\n\\n    require(\\n      amount != 0,\\n      \\\"HEROTokenEconomy#11\\\"\\n    );\\n\\n    require(\\n      accountBalances[account] >= amount,\\n      \\\"HEROTokenEconomy#12\\\"\\n    );\\n\\n    require(\\n      excludedAccounts[account].exists,\\n      \\\"HEROTokenEconomy#13\\\"\\n    );\\n\\n    summary.totalSupply = summary.totalSupply.sub(amount);\\n    summary.totalExcluded = summary.totalExcluded.sub(amount);\\n\\n    accountBalances[account] = accountBalances[account].sub(amount);\\n\\n    emit Transfer(\\n      account,\\n      address(0),\\n      amount\\n    );\\n  }\\n\\n  function _transfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    internal\\n  {\\n    require(\\n      sender != address(0),\\n      \\\"HEROTokenEconomy#14\\\"\\n    );\\n\\n    require(\\n      recipient != address(0),\\n      \\\"HEROTokenEconomy#15\\\"\\n    );\\n\\n    require(\\n      sender != recipient,\\n      \\\"HEROTokenEconomy#16\\\"\\n    );\\n\\n    require(\\n      amount != 0,\\n      \\\"HEROTokenEconomy#17\\\"\\n    );\\n\\n    require(\\n      excludedAccounts[sender].exists ||\\n      presaleFinished,\\n      \\\"HEROTokenEconomy#18\\\"\\n    );\\n\\n    if (\\n      !excludedAccounts[sender].exists &&\\n      !excludedAccounts[recipient].exists\\n    ) {\\n      _transferBetweenHolderAccounts(\\n        sender,\\n        recipient,\\n        amount\\n      );\\n    } else if (\\n      excludedAccounts[sender].exists &&\\n      !excludedAccounts[recipient].exists\\n    ) {\\n      _transferFromExcludedAccount(\\n        sender,\\n        recipient,\\n        amount\\n      );\\n    } else if (\\n      !excludedAccounts[sender].exists &&\\n      excludedAccounts[recipient].exists\\n    ) {\\n      _transferToExcludedAccount(\\n        sender,\\n        recipient,\\n        amount\\n      );\\n    } else {\\n      _transferBetweenExcludedAccounts(\\n        sender,\\n        recipient,\\n        amount\\n      );\\n    }\\n\\n    emit Transfer(\\n      sender,\\n      recipient,\\n      amount\\n    );\\n  }\\n\\n  function _transferBetweenHolderAccounts(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    internal\\n  {\\n    (\\n      uint256 senderFee,\\n      uint256 lpFee\\n    ) = _calcTransferSenderFees(amount);\\n\\n    uint256 recipientFee;\\n    uint256 totalFee = senderFee;\\n\\n    {\\n      uint256 recipientLPFee;\\n\\n      (\\n        recipientFee,\\n        recipientLPFee\\n      ) = _calcTransferRecipientFees(amount);\\n\\n      lpFee = lpFee.add(recipientLPFee);\\n      totalFee = totalFee.add(recipientFee);\\n    }\\n\\n    uint256 senderAmount = amount.add(senderFee);\\n    uint256 recipientAmount = amount.sub(recipientFee);\\n\\n    if (summary.totalRewards != 0) {\\n      uint256 totalHoldingWithRewards = summary.totalHolding.add(\\n        summary.totalRewards\\n      );\\n\\n      senderAmount = senderAmount.mul(summary.totalHolding).div(\\n        totalHoldingWithRewards\\n      );\\n      recipientAmount = recipientAmount.mul(summary.totalHolding).div(\\n        totalHoldingWithRewards\\n      );\\n      totalFee = totalFee.mul(summary.totalHolding).div(\\n        totalHoldingWithRewards\\n      );\\n    }\\n\\n    require(\\n      accountBalances[sender] >= senderAmount,\\n      \\\"HEROTokenEconomy#19\\\"\\n    );\\n\\n    accountBalances[sender] = accountBalances[sender].sub(senderAmount);\\n    accountBalances[recipient] = accountBalances[recipient].add(recipientAmount);\\n\\n    summary.totalHolding = summary.totalHolding.sub(totalFee);\\n\\n    if (lpFee != 0) {\\n      _increaseTotalLP(lpFee);\\n    }\\n\\n    _updateTotalRewards();\\n  }\\n\\n  function _transferFromExcludedAccount(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    internal\\n  {\\n    require(\\n      accountBalances[sender] >= amount,\\n      \\\"HEROTokenEconomy#20\\\"\\n    );\\n\\n    uint256 recipientFee;\\n    uint256 lpFee;\\n\\n    if (!excludedAccounts[sender].excludeRecipientFromFee) {\\n      (\\n        recipientFee,\\n        lpFee\\n      ) = _calcTransferSenderFees(amount);\\n    }\\n\\n    uint256 recipientAmount = amount.sub(recipientFee);\\n\\n    accountBalances[sender] = accountBalances[sender].sub(amount);\\n    accountBalances[recipient] = accountBalances[recipient].add(recipientAmount);\\n\\n    summary.totalExcluded = summary.totalExcluded.sub(amount);\\n    summary.totalHolding = summary.totalHolding.add(recipientAmount);\\n\\n    if (lpFee != 0) {\\n      _increaseTotalLP(lpFee);\\n    }\\n\\n    _updateTotalRewards();\\n  }\\n\\n  function _transferToExcludedAccount(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    internal\\n  {\\n    (\\n      uint256 senderFee,\\n      uint256 lpFee\\n    ) = _calcTransferSenderFees(amount);\\n\\n    uint256 senderAmount = amount.add(senderFee);\\n\\n    if (summary.totalRewards != 0) {\\n      uint256 totalHoldingWithRewards = summary.totalHolding.add(\\n        summary.totalRewards\\n      );\\n\\n      senderAmount = senderAmount.mul(summary.totalHolding).div(\\n        totalHoldingWithRewards\\n      );\\n    }\\n\\n    require(\\n      accountBalances[sender] >= senderAmount,\\n      \\\"HEROTokenEconomy#21\\\"\\n    );\\n\\n    accountBalances[sender] = accountBalances[sender].sub(senderAmount);\\n    accountBalances[recipient] = accountBalances[recipient].add(amount);\\n\\n    summary.totalExcluded = summary.totalExcluded.add(amount);\\n    summary.totalHolding = summary.totalHolding.sub(senderAmount);\\n\\n    if (lpFee != 0) {\\n      _increaseTotalLP(lpFee);\\n    }\\n\\n    _updateTotalRewards();\\n  }\\n\\n  function _transferBetweenExcludedAccounts(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    internal\\n  {\\n    require(\\n      accountBalances[sender] >= amount,\\n      \\\"HEROTokenEconomy#22\\\"\\n    );\\n\\n    accountBalances[sender] = accountBalances[sender].sub(amount);\\n    accountBalances[recipient] = accountBalances[recipient].add(amount);\\n  }\\n\\n  function _increaseTotalLP(\\n    uint256 amount\\n  )\\n    internal\\n    virtual\\n  {\\n    accountBalances[address(this)] = accountBalances[address(this)].add(amount);\\n    summary.totalExcluded = summary.totalExcluded.add(amount);\\n  }\\n\\n  // private functions\\n\\n  function _updateTotalRewards()\\n    private\\n  {\\n    summary.totalRewards = summary.totalSupply\\n    .sub(summary.totalExcluded)\\n    .sub(summary.totalHolding);\\n  }\\n\\n  // private functions (views)\\n\\n  function _calcRewards(\\n    address account\\n  )\\n    private\\n    view\\n    returns (uint256 result)\\n  {\\n    if (\\n      !excludedAccounts[account].exists &&\\n      summary.totalRewards != 0\\n    ) {\\n      result = summary.totalRewards\\n        .mul(accountBalances[account])\\n        .div(summary.totalHolding);\\n    }\\n\\n    return result;\\n  }\\n\\n  function _calcTransferSenderFees(\\n    uint256 amount\\n  )\\n    private\\n    view\\n    returns (\\n      uint256 totalFee,\\n      uint256 lpFee\\n    )\\n  {\\n    uint256 rewardsFee = amount.percent(settings.rewardsFees.sender);\\n\\n    lpFee = amount.percent(settings.lpFees.sender);\\n    totalFee = lpFee.add(rewardsFee);\\n\\n    return (totalFee, lpFee);\\n  }\\n\\n  function _calcTransferRecipientFees(\\n    uint256 amount\\n  )\\n    private\\n    view\\n    returns (\\n      uint256 totalFee,\\n      uint256 lpFee\\n    )\\n  {\\n    uint256 rewardsFee = amount.percent(settings.rewardsFees.recipient);\\n\\n    lpFee = amount.percent(settings.lpFees.recipient);\\n    totalFee = lpFee.add(rewardsFee);\\n\\n    return (totalFee, lpFee);\\n  }\\n}\\n\",\"keccak256\":\"0x48dc324de8da5c2f419707eb93d15092d8de29f155d4a4e2f6d22a6714622cbe\",\"license\":\"MIT\"},\"src/HEROTokenLP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"./external/UniswapV2Factory.sol\\\";\\nimport \\\"./external/UniswapV2Pair.sol\\\";\\nimport \\\"./external/UniswapV2Router02.sol\\\";\\nimport \\\"./HEROTokenEconomy.sol\\\";\\n\\n\\n/**\\n * @title HERO token liquidity pool module\\n */\\ncontract HEROTokenLP is HEROTokenEconomy {\\n  // defaults\\n\\n  uint256 private constant DEFAULT_ENABLE_BURN_LP_AT_VALUE = 10000000 * 10 ** 18; // 10,000,000.000000000000000000\\n\\n  UniswapV2Factory public swapFactory;\\n  UniswapV2Router02 public swapRouter;\\n  UniswapV2Pair public swapPair;\\n  address public stableCoin;\\n\\n  address private wrappedNative;\\n  bool private swapLocked;\\n  uint256 private pendingLPAmount;\\n\\n  // modifiers\\n\\n  modifier lockSwap() {\\n    if (!swapLocked) {\\n      swapLocked = true;\\n\\n      _;\\n\\n      swapLocked = false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor ()\\n    internal\\n    HEROTokenEconomy()\\n  {\\n    //\\n  }\\n\\n  // external functions\\n\\n  receive()\\n    external\\n    payable\\n  {\\n    //\\n  }\\n\\n  function burnLP(\\n    uint256 amount\\n  )\\n    external\\n    onlyController\\n    lockSwap\\n  {\\n    require(\\n      amount > 1,\\n      \\\"HEROTokenLP#1\\\"\\n    );\\n\\n    (uint256 tokenAmount, ) = _getLiquidityReserves();\\n\\n    require(\\n      tokenAmount != 0,\\n      \\\"HEROTokenLP#2\\\"\\n    );\\n\\n    require(\\n      amount <= tokenAmount,\\n      \\\"HEROTokenLP#3\\\"\\n    );\\n\\n    address[] memory path = new address[](3);\\n\\n    path[0] = address(this);\\n    path[1] = wrappedNative;\\n    path[2] = stableCoin;\\n\\n    uint256[] memory amounts = swapRouter.getAmountsOut(amount, path);\\n\\n    uint256 tokensValue = amounts[2];\\n\\n    require(\\n      tokensValue > settings.enableBurnLPAtValue,\\n      \\\"HEROTokenLP#4\\\"\\n    );\\n\\n    uint256 amountValue = amount.mul(tokensValue).div(tokenAmount);\\n    uint256 maxValue = tokensValue.div(settings.enableBurnLPAtValue);\\n\\n    require(\\n      maxValue >= amountValue,\\n      \\\"HEROTokenLP#5\\\"\\n    );\\n\\n    (tokenAmount, ) = _removeLiquidity(\\n      swapPair.balanceOf(address(this))\\n    );\\n\\n    _burn(\\n      address(this),\\n      amount\\n    );\\n\\n    _addLiquidity(\\n      tokenAmount.add(amount),\\n      address(this).balance\\n    );\\n  }\\n\\n  // internal functions\\n\\n  function _initializeLP(\\n    uint256 enableBurnLPAtValue,\\n    address swapRouter_,\\n    address stableCoin_\\n  )\\n    internal\\n  {\\n    require(\\n      swapRouter_ != address(0),\\n      \\\"HEROTokenLP#6\\\"\\n    );\\n\\n    require(\\n      stableCoin_ != address(0),\\n      \\\"HEROTokenLP#7\\\"\\n    );\\n\\n    settings.enableBurnLPAtValue = enableBurnLPAtValue == 0\\n      ? DEFAULT_ENABLE_BURN_LP_AT_VALUE\\n      : enableBurnLPAtValue;\\n\\n    swapRouter = UniswapV2Router02(swapRouter_);\\n    swapFactory = UniswapV2Factory(swapRouter.factory());\\n\\n    wrappedNative = swapRouter.WETH();\\n\\n    swapPair = UniswapV2Pair(swapFactory.createPair(\\n      address(this),\\n      wrappedNative\\n    ));\\n\\n    stableCoin = stableCoin_;\\n\\n    _excludeAccount(address(swapRouter), true);\\n    _excludeAccount(address(swapPair), true);\\n  }\\n\\n  function _increaseTotalLP(\\n    uint256 amount\\n  )\\n    internal\\n    override\\n  {\\n    HEROTokenEconomy._increaseTotalLP(amount);\\n\\n    pendingLPAmount = pendingLPAmount.add(amount);\\n\\n    _swapTokensAndAddLiquidity();\\n  }\\n\\n  // private functions\\n\\n  function _swapTokensAndAddLiquidity()\\n    private\\n    lockSwap\\n  {\\n    uint256 half = pendingLPAmount.div(2);\\n    uint256 otherHalf = pendingLPAmount.sub(half);\\n\\n    pendingLPAmount = 0;\\n\\n    _swapTokens(half);\\n\\n    uint256 nativeAmount = address(this).balance;\\n\\n    _addLiquidity(\\n      otherHalf,\\n      nativeAmount\\n    );\\n  }\\n\\n  function _swapTokens(\\n    uint256 tokenAmount\\n  )\\n    private\\n  {\\n    if (tokenAmount != 0) {\\n      _approve(\\n        address(this),\\n        address(swapRouter),\\n        tokenAmount\\n      );\\n\\n      address[] memory path = new address[](2);\\n\\n      path[0] = address(this);\\n      path[1] = wrappedNative;\\n\\n      swapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        tokenAmount,\\n        0,\\n        path,\\n        address(this),\\n        block.timestamp // solhint-disable-line not-rely-on-time\\n      );\\n    }\\n  }\\n\\n  function _addLiquidity(\\n    uint256 tokenAmount,\\n    uint256 nativeAmount\\n  )\\n    private\\n  {\\n    if (tokenAmount != 0 && nativeAmount != 0) {\\n      _approve(\\n        address(this),\\n        address(swapRouter),\\n        tokenAmount\\n      );\\n\\n      swapRouter.addLiquidityETH{value : nativeAmount}(\\n        address(this),\\n        tokenAmount,\\n        0,\\n        0,\\n        address(this),\\n        block.timestamp // solhint-disable-line not-rely-on-time\\n      );\\n    }\\n  }\\n\\n  function _removeLiquidity(\\n    uint256 liquidity\\n  )\\n    private\\n    returns (\\n      uint256 tokenAmount,\\n      uint256 nativeAmount\\n    )\\n  {\\n    swapPair.approve(\\n      address(swapRouter),\\n      liquidity\\n    );\\n\\n    return swapRouter.removeLiquidityETH(\\n      address(this),\\n      liquidity,\\n      0,\\n      0,\\n      address(this),\\n      block.timestamp // solhint-disable-line not-rely-on-time\\n    );\\n  }\\n\\n  // private functions (views)\\n\\n  function _getLiquidityReserves()\\n    private\\n    view\\n    returns (\\n      uint256 tokenAmount,\\n      uint256 nativeAmount\\n    )\\n  {\\n    (\\n      uint112 reserve0,\\n      uint112 reserve1,\\n    )= swapPair.getReserves();\\n\\n    (tokenAmount, nativeAmount) = address(this) < wrappedNative\\n      ? (reserve0, reserve1)\\n      : (reserve1, reserve0);\\n\\n    return (tokenAmount, nativeAmount);\\n  }\\n\\n\\n}\\n\",\"keccak256\":\"0x5fe17cb7ba1f697e9d9d6003b1a1a5813736ec5073e23c480c50353f249c0670\",\"license\":\"MIT\"},\"src/components/Controlled.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Controlled\\n */\\ncontract Controlled {\\n  address public controller;\\n\\n  // modifiers\\n\\n  modifier onlyController() {\\n    require(\\n      msg.sender == controller,\\n      \\\"Controlled#1\\\"\\n    );\\n\\n    _;\\n  }\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor()\\n    internal\\n  {\\n    controller = msg.sender;\\n  }\\n\\n  // external functions\\n\\n  function setController(\\n    address controller_\\n  )\\n    external\\n    onlyController\\n  {\\n    require(\\n      controller_ != address(0) &&\\n      controller_ != controller,\\n      \\\"Controlled#2\\\"\\n    );\\n\\n    controller = controller_;\\n  }\\n}\\n\",\"keccak256\":\"0x3a374ea91631232f3a4afbd52a8bd2bb6dae7b6ca7b78c89eee172f733c2e7f5\",\"license\":\"MIT\"},\"src/components/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\ninterface ERC20 {\\n  // events\\n\\n  event Approval(\\n    address indexed owner,\\n    address indexed spender,\\n    uint256 value\\n  );\\n\\n  event Transfer(\\n    address indexed from,\\n    address indexed to,\\n    uint256 value\\n  );\\n\\n  // external functions\\n\\n  function approve(\\n    address spender,\\n    uint256 value\\n  )\\n    external\\n    returns (bool);\\n\\n  function transfer(\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (bool);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (bool);\\n\\n  // external functions (views)\\n\\n  function totalSupply()\\n    external\\n    view\\n    returns (uint256);\\n\\n  function balanceOf(\\n    address owner\\n  )\\n    external\\n    view\\n    returns (uint256);\\n\\n  function allowance(\\n    address owner,\\n    address spender\\n  )\\n    external\\n    view\\n    returns (uint256);\\n}\\n\",\"keccak256\":\"0x39c79bd4de8c818b1bd0af69cea9a05db0f2ba08e04752a773491107a3b964c7\",\"license\":\"MIT\"},\"src/components/ERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\ncontract ERC20Metadata {\\n  struct Metadata {\\n    string name;\\n    string symbol;\\n    uint8 decimals;\\n  }\\n\\n  Metadata private metadata;\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor (\\n    Metadata memory metadata_\\n  )\\n    internal\\n  {\\n    metadata = metadata_;\\n  }\\n\\n  // external functions (views)\\n\\n  function name()\\n    external\\n    view\\n    virtual\\n    returns (string memory)\\n  {\\n    return metadata.name;\\n  }\\n\\n  function symbol()\\n    external\\n    view\\n    virtual\\n    returns (string memory)\\n  {\\n    return metadata.symbol;\\n  }\\n\\n  function decimals()\\n    external\\n    view\\n    virtual\\n    returns (uint8)\\n  {\\n    return metadata.decimals;\\n  }\\n}\\n\",\"keccak256\":\"0x838409846512446e0bdd4a6e49167895280ea0a63645318e0811cae8947cede9\",\"license\":\"MIT\"},\"src/components/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Initializable\\n */\\ncontract Initializable {\\n  address private initializer;\\n\\n  // events\\n\\n  event Initialized();\\n\\n  // modifiers\\n\\n  modifier onlyInitializer() {\\n    require(\\n      initializer != address(0),\\n      \\\"Initializable#1\\\"\\n    );\\n\\n    require(\\n      msg.sender == initializer,\\n      \\\"Initializable#2\\\"\\n    );\\n\\n    initializer = address(0);\\n\\n    _;\\n\\n    emit Initialized();\\n  }\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor()\\n    internal\\n  {\\n    initializer = msg.sender;\\n  }\\n\\n  // external functions (views)\\n\\n  function initialized()\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return initializer == address(0);\\n  }\\n}\\n\",\"keccak256\":\"0xe69c4567bd1e4564e316eaf1a36387a29dae6babc31ed4c21f0306e4b0ea1750\",\"license\":\"MIT\"},\"src/external/UniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\ninterface UniswapV2Factory {\\n  // events\\n\\n  event PairCreated(\\n    address indexed token0,\\n    address indexed token1,\\n    address pair,\\n    uint256\\n  );\\n\\n  // external functions\\n\\n  function createPair(\\n    address tokenA,\\n    address tokenB\\n  )\\n    external\\n    returns (address);\\n\\n  function setFeeTo(\\n    address\\n  )\\n    external;\\n\\n  function setFeeToSetter(\\n    address\\n  )\\n    external;\\n\\n  // external functions (views)\\n\\n  function feeTo()\\n    external\\n    view\\n    returns (address);\\n\\n  function feeToSetter()\\n    external\\n    view\\n    returns (address);\\n\\n  function getPair(\\n    address tokenA,\\n    address tokenB\\n  )\\n    external\\n    view\\n    returns (address);\\n\\n  function allPairs(\\n    uint256\\n  )\\n    external\\n    view\\n    returns (address);\\n\\n  function allPairsLength()\\n    external\\n    view\\n    returns (uint256);\\n}\\n\\n\",\"keccak256\":\"0x11c1c1d08fe44e59afcb84d55cbe36594091a8997c14a5c27a32d72708614f7f\",\"license\":\"MIT\"},\"src/external/UniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable func-name-mixedcase */\\npragma solidity ^0.6.12;\\n\\ninterface UniswapV2Pair {\\n  // events\\n\\n  event Approval(\\n    address indexed owner,\\n    address indexed spender,\\n    uint value\\n  );\\n\\n  event Transfer(\\n    address indexed from,\\n    address indexed to,\\n    uint value\\n  );\\n\\n  event Mint(\\n    address indexed sender,\\n    uint amount0,\\n    uint amount1\\n  );\\n\\n  event Burn(\\n    address indexed sender,\\n    uint amount0,\\n    uint amount1,\\n    address indexed to\\n  );\\n\\n  event Swap(\\n    address indexed sender,\\n    uint amount0In,\\n    uint amount1In,\\n    uint amount0Out,\\n    uint amount1Out,\\n    address indexed to\\n  );\\n\\n  event Sync(\\n    uint112 reserve0,\\n    uint112 reserve1\\n  );\\n\\n  // external functions\\n\\n  function initialize(\\n    address,\\n    address\\n  )\\n    external;\\n\\n  function approve(\\n    address spender,\\n    uint value\\n  )\\n    external\\n    returns (bool);\\n\\n  function transfer(\\n    address to,\\n    uint value\\n  )\\n    external\\n    returns (bool);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint value\\n  )\\n    external\\n    returns (bool);\\n\\n  function mint(\\n    address to\\n  )\\n    external\\n    returns (uint);\\n\\n  function burn(\\n    address to\\n  )\\n    external\\n    returns (uint, uint);\\n\\n  function swap(\\n    uint amount0Out,\\n    uint amount1Out,\\n    address to,\\n    bytes calldata data\\n  )\\n    external;\\n\\n  function skim(\\n    address to\\n  )\\n    external;\\n\\n  function sync()\\n    external;\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint value,\\n    uint deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  )\\n    external;\\n\\n  // external functions (views)\\n\\n  function totalSupply()\\n    external\\n    view\\n    returns (uint);\\n\\n  function balanceOf(\\n    address owner\\n  )\\n    external\\n    view\\n    returns (uint);\\n\\n  function allowance(\\n    address owner,\\n    address spender\\n  )\\n    external\\n    view\\n    returns (uint);\\n\\n  function DOMAIN_SEPARATOR()\\n    external\\n    view\\n    returns (bytes32);\\n\\n  function nonces(\\n    address owner\\n  )\\n    external\\n    view\\n    returns (uint);\\n\\n  function factory()\\n    external\\n    view\\n    returns (address);\\n\\n  function token0()\\n    external\\n    view\\n    returns (address);\\n\\n  function token1()\\n    external\\n    view\\n    returns (address);\\n\\n  function getReserves()\\n    external\\n    view\\n    returns (uint112, uint112, uint32);\\n\\n  function price0CumulativeLast()\\n    external\\n    view\\n    returns (uint);\\n\\n  function price1CumulativeLast()\\n    external\\n    view\\n    returns (uint);\\n\\n  function kLast()\\n    external\\n    view\\n    returns (uint);\\n\\n  // external functions (pure)\\n\\n  function name()\\n    external\\n    pure\\n    returns (string memory);\\n\\n  function symbol()\\n    external\\n    pure\\n    returns (string memory);\\n\\n  function decimals()\\n    external\\n    pure\\n    returns (uint8);\\n\\n  function PERMIT_TYPEHASH()\\n    external\\n    pure\\n    returns (bytes32);\\n\\n  function MINIMUM_LIQUIDITY()\\n    external\\n    pure\\n    returns (uint);\\n}\\n\",\"keccak256\":\"0xaab51b4f0a8c3aa670f12062b9956d426c9944db3098a4d9c6b4412292dc0202\",\"license\":\"MIT\"},\"src/external/UniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable func-name-mixedcase */\\npragma solidity ^0.6.12;\\n\\ninterface UniswapV2Router01 {\\n  // external functions (payable)\\n\\n  function addLiquidityETH(\\n    address token,\\n    uint amountTokenDesired,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    payable\\n    returns (uint, uint, uint);\\n\\n  function swapExactETHForTokens(\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    payable\\n    returns (uint[] memory);\\n\\n  // external functions\\n\\n  function addLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint amountADesired,\\n    uint amountBDesired,\\n    uint amountAMin,\\n    uint amountBMin,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    returns (uint, uint, uint);\\n\\n  function removeLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint liquidity,\\n    uint amountAMin,\\n    uint amountBMin,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    returns (uint, uint);\\n\\n  function removeLiquidityETH(\\n    address token,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    returns (uint, uint);\\n\\n  function removeLiquidityWithPermit(\\n    address tokenA,\\n    address tokenB,\\n    uint liquidity,\\n    uint amountAMin,\\n    uint amountBMin,\\n    address to,\\n    uint deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  )\\n    external\\n    returns (uint, uint);\\n\\n  function removeLiquidityETHWithPermit(\\n    address token,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  )\\n    external\\n    returns (uint, uint);\\n\\n  function swapExactTokensForTokens(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    returns (uint[] memory);\\n\\n  function swapTokensForExactTokens(\\n    uint amountOut,\\n    uint amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    returns (uint[] memory);\\n\\n  function swapTokensForExactETH(\\n    uint amountOut,\\n    uint amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    returns (uint[] memory);\\n\\n  function swapExactTokensForETH(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    returns (uint[] memory);\\n\\n  function swapETHForExactTokens(\\n    uint amountOut,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    payable\\n    returns (uint[] memory);\\n\\n  // external functions (views)\\n\\n  function getAmountsOut(\\n    uint amountIn,\\n    address[] calldata path\\n  )\\n    external\\n    view\\n    returns (uint[] memory);\\n\\n  function getAmountsIn(\\n    uint amountOut,\\n    address[] calldata path\\n  )\\n    external\\n    view\\n    returns (uint[] memory);\\n\\n  // external functions (pure)\\n\\n  function quote(\\n    uint amountA,\\n    uint reserveA,\\n    uint reserveB\\n  )\\n    external\\n    pure\\n    returns (uint);\\n\\n  function getAmountOut(\\n    uint amountIn,\\n    uint reserveIn,\\n    uint reserveOut\\n  )\\n    external\\n    pure\\n    returns (uint);\\n\\n  function getAmountIn(\\n    uint amountOut,\\n    uint reserveIn,\\n    uint reserveOut\\n  )\\n    external\\n    pure\\n    returns (uint);\\n\\n  function factory()\\n    external\\n    pure\\n    returns (address);\\n\\n  function WETH()\\n    external\\n    pure\\n    returns (address);\\n}\\n\",\"keccak256\":\"0x827cd49c4f131ebcb5081aa0daca47cfcfadd24d9a8359cfc79103782b53d9b7\",\"license\":\"MIT\"},\"src/external/UniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"./UniswapV2Router01.sol\\\";\\n\\n\\ninterface UniswapV2Router02 is UniswapV2Router01 {\\n  // external functions (payable)\\n\\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    payable;\\n\\n  // external functions\\n\\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\\n    address token,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    returns (uint);\\n\\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n    address token,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  )\\n    external\\n    returns (uint);\\n\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  )\\n    external;\\n\\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  )\\n    external;\\n}\\n\",\"keccak256\":\"0xd01e20c440b0763163e211898a2881a45b3dca347fc76f8137767fef4bbd8a0b\",\"license\":\"MIT\"},\"src/libs/MathLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Math library\\n */\\nlibrary MathLib {\\n  function add(\\n    uint256 a,\\n    uint256 b\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    uint256 c = a + b;\\n\\n    require(\\n      c >= a,\\n      \\\"MathLib#1\\\"\\n    );\\n\\n    return c;\\n  }\\n\\n  function sub(\\n    uint256 a,\\n    uint256 b\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    require(\\n      b <= a,\\n      \\\"MathLib#2\\\"\\n    );\\n\\n    return a - b;\\n  }\\n\\n  function mul(\\n    uint256 a,\\n    uint256 b\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n\\n    require(\\n      c / a == b,\\n      \\\"MathLib#3\\\"\\n    );\\n\\n    return c;\\n  }\\n\\n  function div(\\n    uint256 a,\\n    uint256 b\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    require(\\n      b != 0,\\n      \\\"MathLib#4\\\"\\n    );\\n\\n    return a / b;\\n  }\\n\\n  function percent(\\n    uint256 a,\\n    uint256 p\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    uint256 result;\\n\\n    if (a != 0 && p != 0) {\\n      result = div(mul(a, p), 100);\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x0f6f91d2ee23bd8a9e6e17588fdd32d86eaed11a09274baa87beb12728ae3e69\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506120da806100a16000396000f3fe6080604052600436106100e85760003560e01c8063a3df415f1161008a578063d25d4bcf11610059578063d25d4bcf1461045b578063e06174e414610472578063f77c4791146104a4578063fc0c546a146104e5576100e8565b8063a3df415f146102d5578063ac71abde14610399578063b16a867c1461041f578063d0febe4c14610451576100e8565b806348785016116100c6578063487850161461018057806392eefe9b14610206578063974654c6146102575780639b19251a1461026e576100e8565b8063158ef93e146100ed57806329dcb0cf1461011a57806342af188414610145575b600080fd5b3480156100f957600080fd5b50610102610526565b60405180821515815260200191505060405180910390f35b34801561012657600080fd5b5061012f61057e565b6040518082815260200191505060405180910390f35b34801561015157600080fd5b5061017e6004803603602081101561016857600080fd5b8101908080359060200190929190505050610584565b005b34801561018c57600080fd5b50610204600480360360208110156101a357600080fd5b81019080803590602001906401000000008111156101c057600080fd5b8201836020820111156101d257600080fd5b803590602001918460208302840111640100000000831117156101f457600080fd5b9091929391929390505050610651565b005b34801561021257600080fd5b506102556004803603602081101561022957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a19565b005b34801561026357600080fd5b5061026c610c18565b005b34801561027a57600080fd5b506102bd6004803603602081101561029157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ec8565b60405180821515815260200191505060405180910390f35b3480156102e157600080fd5b50610397600480360360a08110156102f857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803590602001909291908035906020019064010000000081111561035357600080fd5b82018360208201111561036557600080fd5b8035906020019184602083028401116401000000008311171561038757600080fd5b9091929391929390505050610ee8565b005b3480156103a557600080fd5b5061041d600480360360208110156103bc57600080fd5b81019080803590602001906401000000008111156103d957600080fd5b8201836020820111156103eb57600080fd5b8035906020019184602083028401116401000000008311171561040d57600080fd5b909192939192939050505061133c565b005b34801561042b57600080fd5b5061043461144b565b604051808381526020018281526020019250505060405180910390f35b61045961145d565b005b34801561046757600080fd5b506104706118df565b005b34801561047e57600080fd5b50610487611a6f565b604051808381526020018281526020019250505060405180910390f35b3480156104b057600080fd5b506104b9611a81565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104f157600080fd5b506104fa611aa5565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905090565b60075481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610645576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f436f6e74726f6c6c65642331000000000000000000000000000000000000000081525060200191505060405180910390fd5b61064e81611acb565b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610712576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f436f6e74726f6c6c65642331000000000000000000000000000000000000000081525060200191505060405180910390fd5b60008083839050905060005b8181101561097a57600073ffffffffffffffffffffffffffffffffffffffff1685858381811061074a57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156107f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f4845524f50726573616c6523370000000000000000000000000000000000000081525060200191505060405180910390fd5b6008600086868481811061080157fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561096d5760006008600087878581811061087d57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506108ff600184611b2090919063ffffffff16565b925084848281811061090d57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fbf2e373b8263f701e10efcac80ea442afcb29c6852b3a42b0b46cc8edaaf54a760405160405180910390a25b808060010191505061071e565b5060008214156109f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f4845524f50726573616c6523380000000000000000000000000000000000000081525060200191505060405180910390fd5b610a0a82600560000154611ba890919063ffffffff16565b60056000018190555050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ada576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f436f6e74726f6c6c65642331000000000000000000000000000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614158015610b63575060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b610bd5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f436f6e74726f6c6c65642332000000000000000000000000000000000000000081525060200191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610cd9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f436f6e74726f6c6c65642331000000000000000000000000000000000000000081525060200191505060405180910390fd5b600754421015610d51576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f4845524f50726573616c6523390000000000000000000000000000000000000081525060200191505060405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610ddc57600080fd5b505afa158015610df0573d6000803e3d6000fd5b505050506040513d6020811015610e0657600080fd5b8101908080519060200190929190505050905060008114610eaf57600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342966c68826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015610e9657600080fd5b505af1158015610eaa573d6000803e3d6000fd5b505050505b3373ffffffffffffffffffffffffffffffffffffffff16ff5b60086020528060005260406000206000915054906101000a900460ff1681565b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610fad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f496e697469616c697a61626c652331000000000000000000000000000000000081525060200191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611070576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f496e697469616c697a61626c652332000000000000000000000000000000000081525060200191505060405180910390fd5b6000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415611155576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f4845524f50726573616c6523360000000000000000000000000000000000000081525060200191505060405180910390fd5b85600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561121f57600080fd5b505afa158015611233573d6000803e3d6000fd5b505050506040513d602081101561124957600080fd5b8101908080519060200190929190505050600560010181905550611296600086146112745785611279565b62030d405b600086146112875785611291565b670de0b6b3a76400005b611c2b565b6112b260008414156112ab57621275006112ad565b835b611acb565b6000828290501461130857611307828280806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050611d70565b5b7f5daa87a0e9463431830481fd4b6e3403442dfb9a12b9c07597e9f61d50b633c860405160405180910390a1505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146113fd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f436f6e74726f6c6c65642331000000000000000000000000000000000000000081525060200191505060405180910390fd5b611447828280806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050611d70565b5050565b60058060000154908060010154905082565b60075442106114d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f4845524f50726573616c6523310000000000000000000000000000000000000081525060200191505060405180910390fd5b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611593576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f4845524f50726573616c6523320000000000000000000000000000000000000081525060200191505060405180910390fd5b600034141561160a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f4845524f50726573616c6523330000000000000000000000000000000000000081525060200191505060405180910390fd5b600360010154341115611685576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f4845524f50726573616c6523340000000000000000000000000000000000000081525060200191505060405180910390fd5b600061169f6003600001543461201f90919063ffffffff16565b905060056001015481111561171c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f4845524f50726573616c6523350000000000000000000000000000000000000081525060200191505060405180910390fd5b6000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061178d6001600560000154611ba890919063ffffffff16565b6005600001819055506117ae81600560010154611ba890919063ffffffff16565b600560010181905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561184a57600080fd5b505af115801561185e573d6000803e3d6000fd5b505050506040513d602081101561187457600080fd5b8101908080519060200190929190505050503373ffffffffffffffffffffffffffffffffffffffff167f8fafebcaf9d154343dad25669bfa277f4fbacd7ac6b0c4fed522580e040a0f333483604051808381526020018281526020019250505060405180910390a250565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146119a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f436f6e74726f6c6c65642331000000000000000000000000000000000000000081525060200191505060405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611a2957600080fd5b505afa158015611a3d573d6000803e3d6000fd5b505050506040513d6020811015611a5357600080fd5b8101908080519060200190929190505050600560010181905550565b60038060000154908060010154905082565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611ade8142611b2090919063ffffffff16565b6007819055507fdb00f0341e024be397e058a193a27b85cc3e7f921640be77ddf155c9f8d37c5a6007546040518082815260200191505060405180910390a150565b600080828401905083811015611b9e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f4d6174684c69622331000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b8091505092915050565b600082821115611c20576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f4d6174684c69622332000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b818303905092915050565b6000821415611ca2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f4845524f50726573616c6523313000000000000000000000000000000000000081525060200191505060405180910390fd5b6000811415611d19576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f4845524f50726573616c6523313100000000000000000000000000000000000081525060200191505060405180910390fd5b81600360000181905550806003600101819055507f290c7608baac88950f6f2bf919aee31e5caf8c7bf387f0e489159253ad2e39d58282604051808381526020018281526020019250505060405180910390a15050565b6000808251905060005b81811015611f8157600073ffffffffffffffffffffffffffffffffffffffff16848281518110611da657fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161415611e38576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f4845524f50726573616c6523313200000000000000000000000000000000000081525060200191505060405180910390fd5b60086000858381518110611e4857fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611f7457600160086000868481518110611eae57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611f1b600184611b2090919063ffffffff16565b9250838181518110611f2957fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff167f8f42195a0bbfa58954be4349deb9efc38bdb9c298e529f705f8bc1e38bce039960405160405180910390a25b8080600101915050611d7a565b506000821415611ff9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f4845524f50726573616c6523313300000000000000000000000000000000000081525060200191505060405180910390fd5b61201182600560000154611b2090919063ffffffff16565b600560000181905550505050565b60008083148061202f5750600082145b1561203d57600090506120c7565b600082840290508284828161204e57fe5b04146120c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f4d6174684c69622333000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b809150505b9291505056fea164736f6c634300060c000a",
  "deployedBytecode": "0x6080604052600436106100e85760003560e01c8063a3df415f1161008a578063d25d4bcf11610059578063d25d4bcf1461045b578063e06174e414610472578063f77c4791146104a4578063fc0c546a146104e5576100e8565b8063a3df415f146102d5578063ac71abde14610399578063b16a867c1461041f578063d0febe4c14610451576100e8565b806348785016116100c6578063487850161461018057806392eefe9b14610206578063974654c6146102575780639b19251a1461026e576100e8565b8063158ef93e146100ed57806329dcb0cf1461011a57806342af188414610145575b600080fd5b3480156100f957600080fd5b50610102610526565b60405180821515815260200191505060405180910390f35b34801561012657600080fd5b5061012f61057e565b6040518082815260200191505060405180910390f35b34801561015157600080fd5b5061017e6004803603602081101561016857600080fd5b8101908080359060200190929190505050610584565b005b34801561018c57600080fd5b50610204600480360360208110156101a357600080fd5b81019080803590602001906401000000008111156101c057600080fd5b8201836020820111156101d257600080fd5b803590602001918460208302840111640100000000831117156101f457600080fd5b9091929391929390505050610651565b005b34801561021257600080fd5b506102556004803603602081101561022957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a19565b005b34801561026357600080fd5b5061026c610c18565b005b34801561027a57600080fd5b506102bd6004803603602081101561029157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ec8565b60405180821515815260200191505060405180910390f35b3480156102e157600080fd5b50610397600480360360a08110156102f857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803590602001909291908035906020019064010000000081111561035357600080fd5b82018360208201111561036557600080fd5b8035906020019184602083028401116401000000008311171561038757600080fd5b9091929391929390505050610ee8565b005b3480156103a557600080fd5b5061041d600480360360208110156103bc57600080fd5b81019080803590602001906401000000008111156103d957600080fd5b8201836020820111156103eb57600080fd5b8035906020019184602083028401116401000000008311171561040d57600080fd5b909192939192939050505061133c565b005b34801561042b57600080fd5b5061043461144b565b604051808381526020018281526020019250505060405180910390f35b61045961145d565b005b34801561046757600080fd5b506104706118df565b005b34801561047e57600080fd5b50610487611a6f565b604051808381526020018281526020019250505060405180910390f35b3480156104b057600080fd5b506104b9611a81565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104f157600080fd5b506104fa611aa5565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905090565b60075481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610645576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f436f6e74726f6c6c65642331000000000000000000000000000000000000000081525060200191505060405180910390fd5b61064e81611acb565b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610712576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f436f6e74726f6c6c65642331000000000000000000000000000000000000000081525060200191505060405180910390fd5b60008083839050905060005b8181101561097a57600073ffffffffffffffffffffffffffffffffffffffff1685858381811061074a57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156107f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f4845524f50726573616c6523370000000000000000000000000000000000000081525060200191505060405180910390fd5b6008600086868481811061080157fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561096d5760006008600087878581811061087d57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506108ff600184611b2090919063ffffffff16565b925084848281811061090d57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fbf2e373b8263f701e10efcac80ea442afcb29c6852b3a42b0b46cc8edaaf54a760405160405180910390a25b808060010191505061071e565b5060008214156109f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f4845524f50726573616c6523380000000000000000000000000000000000000081525060200191505060405180910390fd5b610a0a82600560000154611ba890919063ffffffff16565b60056000018190555050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ada576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f436f6e74726f6c6c65642331000000000000000000000000000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614158015610b63575060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b610bd5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f436f6e74726f6c6c65642332000000000000000000000000000000000000000081525060200191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610cd9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f436f6e74726f6c6c65642331000000000000000000000000000000000000000081525060200191505060405180910390fd5b600754421015610d51576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f4845524f50726573616c6523390000000000000000000000000000000000000081525060200191505060405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610ddc57600080fd5b505afa158015610df0573d6000803e3d6000fd5b505050506040513d6020811015610e0657600080fd5b8101908080519060200190929190505050905060008114610eaf57600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342966c68826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015610e9657600080fd5b505af1158015610eaa573d6000803e3d6000fd5b505050505b3373ffffffffffffffffffffffffffffffffffffffff16ff5b60086020528060005260406000206000915054906101000a900460ff1681565b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610fad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f496e697469616c697a61626c652331000000000000000000000000000000000081525060200191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611070576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f496e697469616c697a61626c652332000000000000000000000000000000000081525060200191505060405180910390fd5b6000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415611155576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f4845524f50726573616c6523360000000000000000000000000000000000000081525060200191505060405180910390fd5b85600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561121f57600080fd5b505afa158015611233573d6000803e3d6000fd5b505050506040513d602081101561124957600080fd5b8101908080519060200190929190505050600560010181905550611296600086146112745785611279565b62030d405b600086146112875785611291565b670de0b6b3a76400005b611c2b565b6112b260008414156112ab57621275006112ad565b835b611acb565b6000828290501461130857611307828280806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050611d70565b5b7f5daa87a0e9463431830481fd4b6e3403442dfb9a12b9c07597e9f61d50b633c860405160405180910390a1505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146113fd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f436f6e74726f6c6c65642331000000000000000000000000000000000000000081525060200191505060405180910390fd5b611447828280806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050611d70565b5050565b60058060000154908060010154905082565b60075442106114d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f4845524f50726573616c6523310000000000000000000000000000000000000081525060200191505060405180910390fd5b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611593576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f4845524f50726573616c6523320000000000000000000000000000000000000081525060200191505060405180910390fd5b600034141561160a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f4845524f50726573616c6523330000000000000000000000000000000000000081525060200191505060405180910390fd5b600360010154341115611685576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f4845524f50726573616c6523340000000000000000000000000000000000000081525060200191505060405180910390fd5b600061169f6003600001543461201f90919063ffffffff16565b905060056001015481111561171c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f4845524f50726573616c6523350000000000000000000000000000000000000081525060200191505060405180910390fd5b6000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061178d6001600560000154611ba890919063ffffffff16565b6005600001819055506117ae81600560010154611ba890919063ffffffff16565b600560010181905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561184a57600080fd5b505af115801561185e573d6000803e3d6000fd5b505050506040513d602081101561187457600080fd5b8101908080519060200190929190505050503373ffffffffffffffffffffffffffffffffffffffff167f8fafebcaf9d154343dad25669bfa277f4fbacd7ac6b0c4fed522580e040a0f333483604051808381526020018281526020019250505060405180910390a250565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146119a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f436f6e74726f6c6c65642331000000000000000000000000000000000000000081525060200191505060405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611a2957600080fd5b505afa158015611a3d573d6000803e3d6000fd5b505050506040513d6020811015611a5357600080fd5b8101908080519060200190929190505050600560010181905550565b60038060000154908060010154905082565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611ade8142611b2090919063ffffffff16565b6007819055507fdb00f0341e024be397e058a193a27b85cc3e7f921640be77ddf155c9f8d37c5a6007546040518082815260200191505060405180910390a150565b600080828401905083811015611b9e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f4d6174684c69622331000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b8091505092915050565b600082821115611c20576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f4d6174684c69622332000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b818303905092915050565b6000821415611ca2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f4845524f50726573616c6523313000000000000000000000000000000000000081525060200191505060405180910390fd5b6000811415611d19576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f4845524f50726573616c6523313100000000000000000000000000000000000081525060200191505060405180910390fd5b81600360000181905550806003600101819055507f290c7608baac88950f6f2bf919aee31e5caf8c7bf387f0e489159253ad2e39d58282604051808381526020018281526020019250505060405180910390a15050565b6000808251905060005b81811015611f8157600073ffffffffffffffffffffffffffffffffffffffff16848281518110611da657fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161415611e38576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f4845524f50726573616c6523313200000000000000000000000000000000000081525060200191505060405180910390fd5b60086000858381518110611e4857fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611f7457600160086000868481518110611eae57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611f1b600184611b2090919063ffffffff16565b9250838181518110611f2957fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff167f8f42195a0bbfa58954be4349deb9efc38bdb9c298e529f705f8bc1e38bce039960405160405180910390a25b8080600101915050611d7a565b506000821415611ff9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f4845524f50726573616c6523313300000000000000000000000000000000000081525060200191505060405180910390fd5b61201182600560000154611b2090919063ffffffff16565b600560000181905550505050565b60008083148061202f5750600082145b1561203d57600090506120c7565b600082840290508284828161204e57fe5b04146120c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f4d6174684c69622333000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b809150505b9291505056fea164736f6c634300060c000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Public constructor"
      }
    },
    "title": "HERO presale",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2632,
        "contract": "src/HEROPresale.sol:HEROPresale",
        "label": "controller",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2805,
        "contract": "src/HEROPresale.sol:HEROPresale",
        "label": "initializer",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 42,
        "contract": "src/HEROPresale.sol:HEROPresale",
        "label": "token",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(HEROToken)646"
      },
      {
        "astId": 44,
        "contract": "src/HEROPresale.sol:HEROPresale",
        "label": "settings",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(Settings)18_storage"
      },
      {
        "astId": 46,
        "contract": "src/HEROPresale.sol:HEROPresale",
        "label": "summary",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(Summary)23_storage"
      },
      {
        "astId": 48,
        "contract": "src/HEROPresale.sol:HEROPresale",
        "label": "deadline",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 52,
        "contract": "src/HEROPresale.sol:HEROPresale",
        "label": "whitelist",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(HEROToken)646": {
        "encoding": "inplace",
        "label": "contract HEROToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(Settings)18_storage": {
        "encoding": "inplace",
        "label": "struct HEROPresale.Settings",
        "members": [
          {
            "astId": 15,
            "contract": "src/HEROPresale.sol:HEROPresale",
            "label": "tokensAmountPerNative",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 17,
            "contract": "src/HEROPresale.sol:HEROPresale",
            "label": "maxPurchasePrice",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Summary)23_storage": {
        "encoding": "inplace",
        "label": "struct HEROPresale.Summary",
        "members": [
          {
            "astId": 20,
            "contract": "src/HEROPresale.sol:HEROPresale",
            "label": "totalAccounts",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 22,
            "contract": "src/HEROPresale.sol:HEROPresale",
            "label": "totalTokens",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}