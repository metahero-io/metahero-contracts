{
  "address": "0x9b0e40C4c8138cc8Ac8Bd8B0ae5Ba7Fea3992332",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AccountAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "DeadlineUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "UnitBought",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "addAccounts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyUnit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deadline",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "destroy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadlineIn_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unitPrice_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unitTokens_",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingAccounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "controller_",
          "type": "address"
        }
      ],
      "name": "setController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract HEROToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unitPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unitTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "deadlineIn_",
          "type": "uint256"
        }
      ],
      "name": "updateDeadline",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa08bff943cc51d2dfcc55b51b30128552e2c7b19cc9fce05f775f10ec20353a1",
  "receipt": {
    "to": null,
    "from": "0x2101F46D23b84eEa6a310B1dBa58f66DCE17A0Cf",
    "contractAddress": "0x9b0e40C4c8138cc8Ac8Bd8B0ae5Ba7Fea3992332",
    "transactionIndex": 0,
    "gasUsed": "1507501",
    "logsBloom": "0x
    "blockHash": "0x8a1663459f8f33bc87270df1a0dc4e2bf7ed4469339ce27af556ed2cab6f336f",
    "transactionHash": "0xa08bff943cc51d2dfcc55b51b30128552e2c7b19cc9fce05f775f10ec20353a1",
    "logs": [],
    "blockNumber": 9709422,
    "cumulativeGasUsed": "1507501",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "b1348039c5b0251112421752e3ff4c3e",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccountAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"DeadlineUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UnitBought\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"addAccounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyUnit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadlineIn_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitPrice_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitTokens_\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller_\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract HEROToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unitPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unitTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadlineIn_\",\"type\":\"uint256\"}],\"name\":\"updateDeadline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Public constructor\"}},\"title\":\"HERO presale\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/HEROPresale.sol\":\"HEROPresale\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/HEROPresale.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"./components/Controlled.sol\\\";\\nimport \\\"./components/Initializable.sol\\\";\\nimport \\\"./libs/MathLib.sol\\\";\\nimport \\\"./HEROToken.sol\\\";\\n\\n\\n/**\\n * @title HERO presale\\n */\\ncontract HEROPresale is Controlled, Initializable {\\n  using MathLib for uint256;\\n\\n  // defaults\\n  uint256 private constant DEFAULT_DEADLINE_IN = 7 * 24 * 60 * 60; // 7 days\\n\\n  HEROToken public token;\\n\\n  mapping (address => bool) public whitelist;\\n\\n  uint256 public deadline;\\n  uint256 public unitPrice;\\n  uint256 public unitTokens;\\n  uint256 public pendingAccounts;\\n  uint256 public pendingTokens;\\n\\n  // events\\n\\n  event DeadlineUpdated(\\n    uint256 deadline\\n  );\\n\\n  event AccountAdded(\\n    address indexed account\\n  );\\n\\n  event UnitBought(\\n    address indexed account\\n  );\\n\\n  /**\\n   * @dev Public constructor\\n   */\\n  constructor ()\\n    public\\n    Controlled()\\n    Initializable()\\n  {}\\n\\n  // external functions (payable)\\n\\n  function buyUnit()\\n    external\\n    payable\\n  {\\n    require(\\n      block.timestamp < deadline, // solhint-disable-line not-rely-on-time\\n      \\\"HEROPresale: can not buy after deadline\\\"\\n    );\\n\\n    require(\\n      whitelist[msg.sender],\\n      \\\"HEROPresale: msg.sender not on the whitelist\\\"\\n    );\\n    require(\\n      msg.value == unitPrice,\\n      \\\"HEROPresale: invalid msg.value\\\"\\n    );\\n\\n    whitelist[msg.sender] = false;\\n\\n    pendingAccounts = pendingAccounts.sub(1);\\n    pendingTokens = pendingTokens.sub(unitTokens);\\n\\n    token.transfer(\\n      msg.sender,\\n      unitTokens\\n    );\\n\\n    emit UnitBought(\\n      msg.sender\\n    );\\n  }\\n\\n  // external functions\\n\\n  function initialize(\\n    address payable token_,\\n    uint256 deadlineIn_, // in seconds\\n    uint256 unitPrice_,\\n    uint256 unitTokens_,\\n    address[] calldata accounts\\n  )\\n    external\\n    onlyInitializer\\n  {\\n    require(\\n      token_ != address(0),\\n      \\\"HEROPresale: token is the zero address\\\"\\n    );\\n    require(\\n      unitPrice_ != 0,\\n      \\\"HEROPresale: invalid unit price\\\"\\n    );\\n    require(\\n      unitTokens_ != 0,\\n      \\\"HEROPresale: invalid unit tokens\\\"\\n    );\\n\\n    token = HEROToken(token_);\\n\\n    unitPrice = unitPrice_;\\n    unitTokens = unitTokens_;\\n\\n    _updateDeadline(deadlineIn_ != 0\\n      ? deadlineIn_\\n      : DEFAULT_DEADLINE_IN\\n    );\\n\\n    if (accounts.length != 0) {\\n      _addAccounts(accounts);\\n    }\\n  }\\n\\n  function updateDeadline(\\n    uint256 deadlineIn_ // in seconds\\n  )\\n    external\\n    onlyController\\n  {\\n    _updateDeadline(deadlineIn_);\\n  }\\n\\n  function addAccounts(\\n    address[] calldata accounts\\n  )\\n    external\\n    onlyController\\n  {\\n    _addAccounts(accounts);\\n  }\\n\\n  function destroy()\\n    external\\n    onlyController\\n  {\\n    require(\\n      block.timestamp >= deadline, // solhint-disable-line not-rely-on-time\\n      \\\"HEROPresale: can not destroy before deadline\\\"\\n    );\\n\\n    uint256 pendingTokens_ = token.balanceOf(address(this));\\n\\n    if (pendingTokens_ != 0) {\\n      token.burn(\\n        pendingTokens_\\n      );\\n    }\\n\\n    selfdestruct(msg.sender);\\n  }\\n\\n  // private functions\\n\\n  function _updateDeadline(\\n    uint256 deadlineIn_\\n  )\\n    private\\n  {\\n    deadline = block.timestamp.add(deadlineIn_); // solhint-disable-line not-rely-on-time\\n\\n    emit DeadlineUpdated(\\n      deadline\\n    );\\n  }\\n\\n  function _addAccounts(\\n    address[] memory accounts\\n  )\\n    private\\n  {\\n    uint256 pendingAccounts_;\\n    uint256 pendingTokens_;\\n\\n    uint256 accountsLen = accounts.length;\\n\\n    for (uint256 index = 0 ; index < accountsLen ; index += 1) {\\n      require(\\n        accounts[index] != address(0),\\n        \\\"HEROPresale: account is the zero address\\\"\\n      );\\n\\n      if (!whitelist[accounts[index]]) {\\n        whitelist[accounts[index]] = true;\\n\\n        pendingAccounts_ = pendingAccounts_.add(1);\\n        pendingTokens_ = pendingTokens_.add(unitTokens);\\n\\n        emit AccountAdded(\\n          accounts[index]\\n        );\\n      }\\n    }\\n\\n    require(\\n      pendingAccounts_ != 0,\\n      \\\"HEROPresale: empty accounts\\\"\\n    );\\n\\n    pendingAccounts = pendingAccounts.add(pendingAccounts_);\\n    pendingTokens = pendingTokens.add(pendingTokens_);\\n\\n    require(\\n      pendingTokens <= token.balanceOf(address(this)),\\n      \\\"HEROPresale: pending tokens exceeds balance\\\"\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0xf3be1dac101915408b9a3be8d2bf53fca8db89c81baf2e933017b8b2c88e1153\",\"license\":\"MIT\"},\"src/HEROToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./components/erc20/ERC20Metadata.sol\\\";\\nimport \\\"./components/Initializable.sol\\\";\\nimport \\\"./HEROTokenLP.sol\\\";\\n\\n\\n/**\\n * @title HERO token\\n */\\ncontract HEROToken is ERC20Metadata, Initializable, HEROTokenLP {\\n  // metadata\\n  string private constant TOKEN_NAME = \\\"METAHERO\\\";\\n  string private constant TOKEN_SYMBOL = \\\"HERO\\\";\\n  uint8 private constant TOKEN_DECIMALS = 9; // 0.000000000\\n\\n  /**\\n   * @dev Public constructor\\n   */\\n  constructor ()\\n    public\\n    Initializable()\\n    ERC20Metadata(\\n      Metadata(TOKEN_NAME, TOKEN_SYMBOL, TOKEN_DECIMALS)\\n    )\\n  {\\n    //\\n  }\\n\\n  // external functions\\n\\n  function initialize(\\n    Fees calldata lpFees,\\n    Fees calldata rewardsFees,\\n    uint256 totalSupply_,\\n    address[] calldata excluded_,\\n    address swapRouter_\\n  )\\n    external\\n    onlyInitializer\\n  {\\n    _initializeEconomy(\\n      lpFees,\\n      rewardsFees,\\n      totalSupply_,\\n      excluded_\\n    );\\n\\n    _initializeLP(\\n      swapRouter_\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x444eb6bb1df98da054bccdbd461b3f9804ce0dbcce8f0e141a4ca1418265fd4e\",\"license\":\"MIT\"},\"src/HEROTokenEconomy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./components/erc20/ERC20.sol\\\";\\nimport \\\"./components/Lockable.sol\\\";\\nimport \\\"./components/Lockable.sol\\\";\\nimport \\\"./libs/MathLib.sol\\\";\\n\\n\\n/**\\n * @title HERO token economy module\\n */\\ncontract HEROTokenEconomy is ERC20, Lockable {\\n  using MathLib for uint256;\\n\\n  struct Fees {\\n    uint256 sender; // percent\\n    uint256 recipient; // percent\\n  }\\n\\n  struct Settings {\\n    Fees lpFees;\\n    Fees rewardsFees;\\n  }\\n\\n  struct Summary {\\n    uint256 totalExcluded;\\n    uint256 totalHolding;\\n    uint256 totalLP;\\n    uint256 totalRewards;\\n    uint256 totalSupply;\\n  }\\n\\n  // defaults\\n  uint256 private constant DEFAULT_TOTAL_SUPPLY = 10000000000 * 10 ** 9; // 10,000,000,000.000000000\\n\\n  Settings public settings;\\n  Summary public summary;\\n\\n  mapping (address => uint256) internal balances;\\n  mapping (address => mapping (address => uint256)) private allowances;\\n  mapping (address => bool) private excluded;\\n\\n  // events\\n\\n  event Excluded(\\n    address indexed account\\n  );\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor ()\\n    internal\\n  {\\n    //\\n  }\\n\\n  // external functions\\n\\n  function transfer(\\n    address recipient,\\n    uint256 amount\\n  )\\n    external\\n    override\\n    returns (bool)\\n  {\\n    _transfer(\\n      msg.sender,\\n      recipient,\\n      amount\\n    );\\n\\n    return true;\\n  }\\n\\n  function burn(\\n    uint256 amount\\n  )\\n    external\\n    returns (bool)\\n  {\\n    _burn(\\n      msg.sender,\\n      amount\\n    );\\n\\n    return true;\\n  }\\n\\n  function approve(\\n    address spender,\\n    uint256 amount\\n  )\\n    external\\n    override\\n    returns (bool)\\n  {\\n    _approve(\\n      msg.sender,\\n      spender,\\n      amount\\n    );\\n\\n    return true;\\n  }\\n\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    external\\n    override\\n    returns (bool)\\n  {\\n    _transfer(\\n      sender,\\n      recipient,\\n      amount\\n    );\\n\\n    uint256 currentAllowance = allowances[sender][msg.sender];\\n\\n    require(\\n      currentAllowance >= amount,\\n      \\\"HEROTokenEconomy: amount exceeds allowance\\\"\\n    );\\n\\n    _approve(\\n      sender,\\n      msg.sender,\\n      currentAllowance.sub(amount)\\n    );\\n\\n    return true;\\n  }\\n\\n  // external functions (views)\\n\\n  function totalSupply()\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return summary.totalSupply;\\n  }\\n\\n  function allowance(\\n    address owner,\\n    address spender\\n  )\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return allowances[owner][spender];\\n  }\\n\\n  function balanceOf(\\n    address account\\n  )\\n    external\\n    view\\n    override\\n    returns (uint256 result)\\n  {\\n    result = balances[account];\\n\\n    if (\\n      !excluded[account] &&\\n      summary.totalRewards != 0\\n    ) {\\n      result = result.add(\\n        summary.totalRewards\\n        .mul(result)\\n        .div(summary.totalHolding)\\n      );\\n    }\\n\\n\\n    return result;\\n  }\\n\\n  // internal functions\\n\\n  function _initializeEconomy(\\n    Fees memory lpFees,\\n    Fees memory rewardsFees,\\n    uint256 totalSupply_,\\n    address[] calldata excluded_\\n  )\\n    internal\\n  {\\n    settings = Settings(\\n      lpFees,\\n      rewardsFees\\n    );\\n\\n    _mint(\\n      msg.sender,\\n      totalSupply_ == 0\\n      ? DEFAULT_TOTAL_SUPPLY\\n      : totalSupply_\\n    );\\n\\n    {\\n      uint256 excludedLen = excluded_.length;\\n\\n      for (uint256 index = 0; index < excludedLen; index += 1) {\\n        _exclude(excluded_[index]);\\n      }\\n    }\\n  }\\n\\n  function _exclude(\\n    address account\\n  )\\n    internal\\n  {\\n    require(\\n      account != address(0),\\n      \\\"HEROTokenEconomy: account is the zero address\\\"\\n    );\\n\\n    require(\\n      !excluded[account],\\n      \\\"HEROTokenEconomy: account already excluded\\\"\\n    );\\n\\n    require(\\n      balances[account] == 0,\\n      \\\"HEROTokenEconomy: can not exclude holder account\\\"\\n    );\\n\\n    excluded[account] = true;\\n\\n    emit Excluded(\\n      account\\n    );\\n  }\\n\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  )\\n    internal\\n  {\\n    require(\\n      owner != address(0),\\n      \\\"HEROTokenEconomy: owner is the zero address\\\"\\n    );\\n\\n    require(\\n      spender != address(0),\\n      \\\"HEROTokenEconomy: spender is the zero address\\\"\\n    );\\n\\n    allowances[owner][spender] = amount;\\n\\n    emit Approval(\\n      owner,\\n      spender,\\n      amount\\n    );\\n  }\\n\\n  function _mint(\\n    address account,\\n    uint256 amount\\n  )\\n    internal\\n    lock\\n  {\\n    require(\\n      account != address(0),\\n      \\\"HEROTokenEconomy: account is the zero address\\\"\\n    );\\n\\n    require(\\n      amount != 0,\\n      \\\"HEROTokenEconomy: invalid amount\\\"\\n    );\\n\\n    summary.totalSupply = summary.totalSupply.add(amount);\\n    summary.totalExcluded = summary.totalExcluded.add(amount);\\n\\n    _exclude(account);\\n\\n    balances[account] = balances[account].add(amount);\\n\\n    emit Transfer(\\n      address(0),\\n      account,\\n      amount\\n    );\\n  }\\n\\n  function _burn(\\n    address account,\\n    uint256 amount\\n  )\\n    internal\\n    lock\\n  {\\n    require(\\n      account != address(0),\\n      \\\"HEROTokenEconomy: account is the zero address\\\"\\n    );\\n\\n    require(\\n      amount != 0,\\n      \\\"HEROTokenEconomy: invalid amount\\\"\\n    );\\n\\n    require(\\n      balances[account] >= amount,\\n      \\\"HEROTokenEconomy: amount exceeds balance\\\"\\n    );\\n\\n    require(\\n      excluded[account],\\n      \\\"HEROTokenEconomy: can not burn from holder account\\\"\\n    );\\n\\n    summary.totalSupply = summary.totalSupply.sub(amount);\\n    summary.totalExcluded = summary.totalExcluded.sub(amount);\\n\\n    balances[account] = balances[account].sub(amount);\\n\\n    emit Transfer(\\n      account,\\n      address(0),\\n      amount\\n    );\\n  }\\n\\n  function _transfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    internal\\n    lock\\n  {\\n    require(\\n      sender != address(0),\\n      \\\"HEROTokenEconomy: sender is the zero address\\\"\\n    );\\n\\n    require(\\n      recipient != address(0),\\n      \\\"HEROTokenEconomy: recipient is the zero address\\\"\\n    );\\n\\n    require(\\n      sender != recipient,\\n      \\\"HEROTokenEconomy: invalid recipient\\\"\\n    );\\n\\n    require(\\n      amount != 0,\\n      \\\"HEROTokenEconomy: invalid amount\\\"\\n    );\\n\\n    if (\\n      !excluded[sender] && !excluded[recipient]\\n    ) {\\n      _transferBetweenHolders(\\n        sender,\\n        recipient,\\n        amount\\n      );\\n    } else if (\\n      excluded[sender] && !excluded[recipient]\\n    ) {\\n      _transferFromExcluded(\\n        sender,\\n        recipient,\\n        amount\\n      );\\n    } else if (\\n      !excluded[sender] && excluded[recipient]\\n    ) {\\n      _transferToExcluded(\\n        sender,\\n        recipient,\\n        amount\\n      );\\n    } else {\\n      _transferBetweenExcluded(\\n        sender,\\n        recipient,\\n        amount\\n      );\\n    }\\n\\n    emit Transfer(\\n      sender,\\n      recipient,\\n      amount\\n    );\\n  }\\n\\n  function _transferBetweenHolders(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    internal\\n  {\\n    (\\n      uint256 senderFee,\\n      uint256 lpFee\\n    ) = _calcTransferSenderFees(amount);\\n\\n    uint256 recipientFee;\\n    uint256 totalFee = senderFee;\\n\\n    {\\n      uint256 recipientLPFee;\\n\\n      (\\n        recipientFee,\\n        recipientLPFee\\n      ) = _calcTransferRecipientFees(amount);\\n\\n      lpFee = lpFee.add(recipientLPFee);\\n      totalFee = totalFee.add(recipientFee);\\n    }\\n\\n    uint256 senderAmount = amount.add(senderFee);\\n    uint256 recipientAmount = amount.sub(recipientFee);\\n\\n    if (summary.totalRewards != 0) {\\n      uint256 totalHoldingWithRewards = summary.totalHolding.add(\\n        summary.totalRewards\\n      );\\n\\n      senderAmount = senderAmount.mul(summary.totalHolding).div(\\n        totalHoldingWithRewards\\n      );\\n      recipientAmount = recipientAmount.mul(summary.totalHolding).div(\\n        totalHoldingWithRewards\\n      );\\n      totalFee = totalFee.mul(summary.totalHolding).div(\\n        totalHoldingWithRewards\\n      );\\n    }\\n\\n    require(\\n      balances[sender] >= senderAmount,\\n      \\\"HEROTokenEconomy: amount exceeds balance\\\"\\n    );\\n\\n    balances[sender] = balances[sender].sub(senderAmount);\\n    balances[recipient] = balances[recipient].add(recipientAmount);\\n\\n    summary.totalHolding = summary.totalHolding.sub(totalFee);\\n\\n    _increaseTotalLP(lpFee);\\n    _updateTotalRewards();\\n  }\\n\\n  function _transferFromExcluded(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    internal\\n  {\\n    require(\\n      balances[sender] >= amount,\\n      \\\"HEROTokenEconomy: amount exceeds balance\\\"\\n    );\\n\\n    (\\n      uint256 recipientFee,\\n      uint256 lpFee\\n    ) = _calcTransferSenderFees(amount);\\n\\n    uint256 recipientAmount = amount.sub(recipientFee);\\n\\n    balances[sender] = balances[sender].sub(amount);\\n    balances[recipient] = balances[recipient].add(recipientAmount);\\n\\n    summary.totalExcluded = summary.totalExcluded.sub(amount);\\n    summary.totalHolding = summary.totalHolding.add(recipientAmount);\\n\\n    _increaseTotalLP(lpFee);\\n    _updateTotalRewards();\\n  }\\n\\n  function _transferToExcluded(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    internal\\n  {\\n    (\\n      uint256 senderFee,\\n      uint256 lpFee\\n    ) = _calcTransferSenderFees(amount);\\n\\n    uint256 senderAmount = amount.add(senderFee);\\n\\n    if (summary.totalRewards != 0) {\\n      uint256 totalHoldingWithRewards = summary.totalHolding.add(\\n        summary.totalRewards\\n      );\\n\\n      senderAmount = senderAmount.mul(summary.totalHolding).div(\\n        totalHoldingWithRewards\\n      );\\n    }\\n\\n    require(\\n      balances[sender] >= senderAmount,\\n      \\\"HEROTokenEconomy: amount exceeds balance\\\"\\n    );\\n\\n    balances[sender] = balances[sender].sub(senderAmount);\\n    balances[recipient] = balances[recipient].add(amount);\\n\\n    summary.totalExcluded = summary.totalExcluded.add(amount);\\n    summary.totalHolding = summary.totalHolding.sub(senderAmount);\\n\\n    _increaseTotalLP(lpFee);\\n    _updateTotalRewards();\\n  }\\n\\n  function _transferBetweenExcluded(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    internal\\n  {\\n    require(\\n      balances[sender] >= amount,\\n      \\\"HEROTokenEconomy: amount exceeds balance\\\"\\n    );\\n\\n    balances[sender] = balances[sender].sub(amount);\\n    balances[recipient] = balances[recipient].add(amount);\\n  }\\n\\n  function _increaseTotalLP(\\n    uint256 amount\\n  )\\n    internal\\n    virtual\\n  {\\n    summary.totalLP = summary.totalLP.add(amount);\\n  }\\n\\n  // private functions\\n\\n  function _updateTotalRewards()\\n    private\\n  {\\n    summary.totalRewards = summary.totalSupply\\n    .sub(summary.totalExcluded)\\n    .sub(summary.totalHolding)\\n    .sub(summary.totalLP);\\n  }\\n\\n  // private functions (views)\\n\\n  function _calcTransferSenderFees(\\n    uint256 amount\\n  )\\n    private\\n    view\\n    returns (\\n      uint256 totalFee,\\n      uint256 lpFee\\n    )\\n  {\\n    uint256 rewardsFee = amount.percent(settings.rewardsFees.sender);\\n\\n    lpFee = amount.percent(settings.lpFees.sender);\\n    totalFee = lpFee.add(rewardsFee);\\n\\n    return (totalFee, lpFee);\\n  }\\n\\n  function _calcTransferRecipientFees(\\n    uint256 amount\\n  )\\n    private\\n    view\\n    returns (\\n      uint256 totalFee,\\n      uint256 lpFee\\n    )\\n  {\\n    uint256 rewardsFee = amount.percent(settings.rewardsFees.recipient);\\n\\n    lpFee = amount.percent(settings.lpFees.recipient);\\n    totalFee = lpFee.add(rewardsFee);\\n\\n    return (totalFee, lpFee);\\n  }\\n}\\n\",\"keccak256\":\"0xa8e2412d842375419d7df00e3a18d03844de56a4f789383ecce801d4c542a6de\",\"license\":\"MIT\"},\"src/HEROTokenLP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"./external/UniswapV2Factory.sol\\\";\\nimport \\\"./external/UniswapV2Router02.sol\\\";\\nimport \\\"./HEROTokenEconomy.sol\\\";\\n\\n\\n/**\\n * @title HERO token liquidity pool module\\n */\\ncontract HEROTokenLP is HEROTokenEconomy {\\n  UniswapV2Router02 public swapRouter;\\n  address public swapPair;\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor ()\\n    internal\\n  {\\n    //\\n  }\\n\\n  // external functions\\n\\n  receive()\\n    external\\n    payable\\n  {\\n    //\\n  }\\n\\n  // internal functions\\n\\n  function _initializeLP(\\n    address swapRouter_\\n  )\\n    internal\\n  {\\n    swapRouter = UniswapV2Router02(swapRouter_);\\n\\n    swapPair = UniswapV2Factory(swapRouter.factory())\\n    .createPair(\\n      address(this),\\n        swapRouter.WETH()\\n    );\\n\\n    _exclude(address(this));\\n    _exclude(address(swapRouter));\\n    _exclude(swapPair);\\n  }\\n\\n  function _increaseTotalLP(\\n    uint256 amount\\n  )\\n    internal\\n    override\\n  {\\n    balances[address(this)] = balances[address(this)].add(amount);\\n    summary.totalLP = summary.totalLP.add(amount);\\n\\n    swapAndLiquify(amount);\\n  }\\n\\n  // private functions\\n\\n  function swapAndLiquify(\\n    uint256 amount\\n  )\\n    private\\n  {\\n    uint256 half = amount.div(2);\\n    uint256 otherHalf = amount.sub(half);\\n\\n    uint256 initialBalance = address(this).balance;\\n\\n    swapTokensForEth(half);\\n\\n    uint256 newBalance = address(this).balance.sub(initialBalance);\\n\\n    addLiquidity(otherHalf, newBalance);\\n  }\\n\\n  function swapTokensForEth(\\n    uint256 tokenAmount\\n  )\\n    private\\n  {\\n    address[] memory path = new address[](2);\\n\\n    path[0] = address(this);\\n    path[1] = swapRouter.WETH();\\n\\n    _approve(\\n      address(this),\\n      address(swapRouter),\\n      tokenAmount\\n    );\\n\\n    swapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n      tokenAmount,\\n      0,\\n      path,\\n      address(this),\\n      block.timestamp // solhint-disable-line not-rely-on-time\\n    );\\n  }\\n\\n  function addLiquidity(\\n    uint256 tokenAmount,\\n    uint256 ethAmount\\n  )\\n    private\\n  {\\n    _approve(\\n      address(this),\\n      address(swapRouter),\\n      tokenAmount\\n    );\\n\\n    swapRouter.addLiquidityETH{value : ethAmount}(\\n      address(this),\\n      tokenAmount,\\n      0, // slippage is unavoidable\\n      0, // slippage is unavoidable\\n      address(this),\\n      block.timestamp // solhint-disable-line not-rely-on-time\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0xbd3b85fb10cd3b23c93d0f22c4f7e10f1f1efee0e898ab5ce7bc8325f1500f01\",\"license\":\"MIT\"},\"src/components/Controlled.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Controlled\\n */\\ncontract Controlled {\\n  address public controller;\\n\\n  // modifiers\\n\\n  modifier onlyController() {\\n    require(\\n      msg.sender == controller,\\n      \\\"Controlled: msg.sender is not the controller\\\"\\n    );\\n\\n    _;\\n  }\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor()\\n    internal\\n  {\\n    controller = msg.sender;\\n  }\\n\\n  // external functions\\n\\n  function setController(\\n    address controller_\\n  )\\n    external\\n    onlyController\\n  {\\n    require(\\n      controller_ != address(0) &&\\n      controller_ != controller,\\n      \\\"Controlled: invalid controller\\\"\\n    );\\n\\n    controller = controller_;\\n  }\\n}\\n\",\"keccak256\":\"0x100923bd931a5556d2bde597175b27da312778f5e8ed0e2669b607c39969b6a2\",\"license\":\"MIT\"},\"src/components/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Initializable\\n */\\ncontract Initializable {\\n  address private initializer;\\n\\n  // events\\n\\n  event Initialized();\\n\\n  // modifiers\\n\\n  modifier onlyInitializer() {\\n    require(\\n      initializer != address(0),\\n      \\\"Initializable: already initialized\\\"\\n    );\\n\\n    require(\\n      msg.sender == initializer,\\n      \\\"Initializable: msg.sender is not the initializer\\\"\\n    );\\n\\n    initializer = address(0);\\n\\n    _;\\n\\n    emit Initialized();\\n  }\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor()\\n    internal\\n  {\\n    initializer = msg.sender;\\n  }\\n\\n  // external functions (views)\\n\\n  function initialized()\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return initializer == address(0);\\n  }\\n}\\n\",\"keccak256\":\"0xa468170351bac18be81cbd4871f1aa46b16b48f8832d12ee97e36ba0bc7a07a2\",\"license\":\"MIT\"},\"src/components/Lockable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Lockable\\n */\\ncontract Lockable {\\n  bool private locked;\\n\\n  // modifiers\\n\\n  modifier lock() {\\n    require(\\n      !locked,\\n      \\\"Lockable: locked\\\"\\n    );\\n\\n    locked = true;\\n\\n    _;\\n\\n    locked = false;\\n  }\\n}\\n\",\"keccak256\":\"0x9de56095556f83f35d828ca9f057460496de83ae98697ec6fe8ed31d2872ad19\",\"license\":\"MIT\"},\"src/components/erc20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nabstract contract ERC20 {\\n  // events\\n\\n  event Approval(\\n    address indexed owner,\\n    address indexed spender,\\n    uint256 value\\n  );\\n\\n  event Transfer(\\n    address indexed from,\\n    address indexed to,\\n    uint256 value\\n  );\\n\\n  // external functions\\n\\n  function approve(\\n    address spender,\\n    uint256 value\\n  )\\n    external\\n    virtual\\n    returns (bool);\\n\\n  function transfer(\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    virtual\\n    returns (bool);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    virtual\\n    returns (bool);\\n\\n  // external functions (views)\\n\\n  function totalSupply()\\n    external\\n    view\\n    virtual\\n    returns (uint256);\\n\\n  function balanceOf(\\n    address owner\\n  )\\n    external\\n    view\\n    virtual\\n    returns (uint256);\\n\\n  function allowance(\\n    address owner,\\n    address spender\\n  )\\n    external\\n    view\\n    virtual\\n    returns (uint256);\\n}\\n\",\"keccak256\":\"0xb1e86d26abd67b1299f800f22f520ebce49e7b0f9112cd94312fdabbfce1b82b\",\"license\":\"MIT\"},\"src/components/erc20/ERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\ncontract ERC20Metadata {\\n  struct Metadata {\\n    string name;\\n    string symbol;\\n    uint8 decimals;\\n  }\\n\\n  Metadata private metadata;\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor (\\n    Metadata memory metadata_\\n  )\\n    internal\\n  {\\n    metadata = metadata_;\\n  }\\n\\n  // external functions (views)\\n\\n  function name()\\n    external\\n    view\\n    virtual\\n    returns (string memory)\\n  {\\n    return metadata.name;\\n  }\\n\\n  function symbol()\\n    external\\n    view\\n    virtual\\n    returns (string memory)\\n  {\\n    return metadata.symbol;\\n  }\\n\\n  function decimals()\\n    external\\n    view\\n    virtual\\n    returns (uint8)\\n  {\\n    return metadata.decimals;\\n  }\\n}\\n\",\"keccak256\":\"0x838409846512446e0bdd4a6e49167895280ea0a63645318e0811cae8947cede9\",\"license\":\"MIT\"},\"src/external/UniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\ninterface UniswapV2Factory {\\n  // events\\n\\n  event PairCreated(\\n    address indexed token0,\\n    address indexed token1,\\n    address pair,\\n    uint256\\n  );\\n\\n  // external functions\\n\\n  function createPair(\\n    address tokenA,\\n    address tokenB\\n  )\\n    external\\n    returns (address);\\n\\n  function setFeeTo(\\n    address\\n  )\\n    external;\\n\\n  function setFeeToSetter(\\n    address\\n  )\\n    external;\\n\\n  // external functions (views)\\n\\n  function feeTo()\\n    external\\n    view\\n    returns (address);\\n\\n  function feeToSetter()\\n    external\\n    view\\n    returns (address);\\n\\n  function getPair(\\n    address tokenA,\\n    address tokenB\\n  )\\n    external\\n    view\\n    returns (address);\\n\\n  function allPairs(\\n    uint256\\n  )\\n    external\\n    view\\n    returns (address);\\n\\n  function allPairsLength()\\n    external\\n    view\\n    returns (uint256);\\n}\\n\\n\",\"keccak256\":\"0x11c1c1d08fe44e59afcb84d55cbe36594091a8997c14a5c27a32d72708614f7f\",\"license\":\"MIT\"},\"src/external/UniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable func-name-mixedcase */\\npragma solidity ^0.6.12;\\n\\ninterface UniswapV2Router01 {\\n  // external functions (payable)\\n\\n  function addLiquidityETH(\\n    address token,\\n    uint amountTokenDesired,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    payable\\n    returns (uint, uint, uint);\\n\\n  function swapExactETHForTokens(\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    payable\\n    returns (uint[] memory);\\n\\n  // external functions\\n\\n  function addLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint amountADesired,\\n    uint amountBDesired,\\n    uint amountAMin,\\n    uint amountBMin,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    returns (uint, uint, uint);\\n\\n  function removeLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint liquidity,\\n    uint amountAMin,\\n    uint amountBMin,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    returns (uint, uint);\\n\\n  function removeLiquidityETH(\\n    address token,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    returns (uint, uint);\\n\\n  function removeLiquidityWithPermit(\\n    address tokenA,\\n    address tokenB,\\n    uint liquidity,\\n    uint amountAMin,\\n    uint amountBMin,\\n    address to,\\n    uint deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  )\\n    external\\n    returns (uint, uint);\\n\\n  function removeLiquidityETHWithPermit(\\n    address token,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  )\\n    external\\n    returns (uint, uint);\\n\\n  function swapExactTokensForTokens(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    returns (uint[] memory);\\n\\n  function swapTokensForExactTokens(\\n    uint amountOut,\\n    uint amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    returns (uint[] memory);\\n\\n  function swapTokensForExactETH(\\n    uint amountOut,\\n    uint amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    returns (uint[] memory);\\n\\n  function swapExactTokensForETH(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    returns (uint[] memory);\\n\\n  function swapETHForExactTokens(\\n    uint amountOut,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    payable\\n    returns (uint[] memory);\\n\\n  // external functions (views)\\n\\n  function getAmountsOut(\\n    uint amountIn,\\n    address[] calldata path\\n  )\\n    external\\n    view\\n    returns (uint[] memory);\\n\\n  function getAmountsIn(\\n    uint amountOut,\\n    address[] calldata path\\n  )\\n    external\\n    view\\n    returns (uint[] memory);\\n\\n  // external functions (pure)\\n\\n  function quote(\\n    uint amountA,\\n    uint reserveA,\\n    uint reserveB\\n  )\\n    external\\n    pure\\n    returns (uint);\\n\\n  function getAmountOut(\\n    uint amountIn,\\n    uint reserveIn,\\n    uint reserveOut\\n  )\\n    external\\n    pure\\n    returns (uint);\\n\\n  function getAmountIn(\\n    uint amountOut,\\n    uint reserveIn,\\n    uint reserveOut\\n  )\\n    external\\n    pure\\n    returns (uint);\\n\\n  function factory()\\n    external\\n    pure\\n    returns (address);\\n\\n  function WETH()\\n    external\\n    pure\\n    returns (address);\\n}\\n\",\"keccak256\":\"0x827cd49c4f131ebcb5081aa0daca47cfcfadd24d9a8359cfc79103782b53d9b7\",\"license\":\"MIT\"},\"src/external/UniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"./UniswapV2Router01.sol\\\";\\n\\n\\ninterface UniswapV2Router02 is UniswapV2Router01 {\\n  // external functions (payable)\\n\\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    payable;\\n\\n  // external functions\\n\\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\\n    address token,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    returns (uint);\\n\\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n    address token,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  )\\n    external\\n    returns (uint);\\n\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  )\\n    external;\\n\\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  )\\n    external;\\n}\\n\",\"keccak256\":\"0xd01e20c440b0763163e211898a2881a45b3dca347fc76f8137767fef4bbd8a0b\",\"license\":\"MIT\"},\"src/libs/MathLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Math library\\n */\\nlibrary MathLib {\\n  function add(\\n    uint256 a,\\n    uint256 b\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    uint256 c = a + b;\\n\\n    require(c >= a, \\\"MathLib: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  function sub(\\n    uint256 a,\\n    uint256 b\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    require(b <= a, \\\"MathLib: subtraction overflow\\\");\\n\\n    return a - b;\\n  }\\n\\n  function mul(\\n    uint256 a,\\n    uint256 b\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n\\n    require(c / a == b, \\\"MathLib: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  function div(\\n    uint256 a,\\n    uint256 b\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    require(b != 0, \\\"MathLib: division by zero\\\");\\n\\n    return a / b;\\n  }\\n\\n  function percent(\\n    uint256 a,\\n    uint256 p\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    uint256 result;\\n\\n    if (a != 0 && p != 0) {\\n      result = div(mul(a, p), 100);\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x9c6aa4510ae1773258be1a36de4428fefd5555d797f0f907f4160dd8ec853377\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506119a2806100a16000396000f3fe6080604052600436106100e85760003560e01c80639b19251a1161008a578063d127d87211610059578063d127d872146103f9578063e73faa2d14610424578063f77c47911461044f578063fc0c546a14610490576100e8565b80639b19251a1461021d578063a3df415f14610284578063ac71abde14610348578063c47d7029146103ce576100e8565b806329dcb0cf116100c657806329dcb0cf1461014f57806342af18841461017a57806383197ef0146101b557806392eefe9b146101cc576100e8565b8063158ef93e146100ed578063190f82811461011a578063201738e214610145575b600080fd5b3480156100f957600080fd5b506101026104d1565b60405180821515815260200191505060405180910390f35b34801561012657600080fd5b5061012f610529565b6040518082815260200191505060405180910390f35b61014d61052f565b005b34801561015b57600080fd5b50610164610849565b6040518082815260200191505060405180910390f35b34801561018657600080fd5b506101b36004803603602081101561019d57600080fd5b810190808035906020019092919050505061084f565b005b3480156101c157600080fd5b506101ca6108ff565b005b3480156101d857600080fd5b5061021b600480360360208110156101ef57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b99565b005b34801561022957600080fd5b5061026c6004803603602081101561024057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d7b565b60405180821515815260200191505060405180910390f35b34801561029057600080fd5b50610346600480360360a08110156102a757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803590602001909291908035906020019064010000000081111561030257600080fd5b82018360208201111561031457600080fd5b8035906020019184602083028401116401000000008311171561033657600080fd5b9091929391929390505050610d9b565b005b34801561035457600080fd5b506103cc6004803603602081101561036b57600080fd5b810190808035906020019064010000000081111561038857600080fd5b82018360208201111561039a57600080fd5b803590602001918460208302840111640100000000831117156103bc57600080fd5b9091929391929390505050611194565b005b3480156103da57600080fd5b506103e3611286565b6040518082815260200191505060405180910390f35b34801561040557600080fd5b5061040e61128c565b6040518082815260200191505060405180910390f35b34801561043057600080fd5b50610439611292565b6040518082815260200191505060405180910390f35b34801561045b57600080fd5b50610464611298565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561049c57600080fd5b506104a56112bc565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905090565b60075481565b6004544210610589576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806118726027913960400191505060405180910390fd5b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661062b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180611846602c913960400191505060405180910390fd5b60055434146106a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f4845524f50726573616c653a20696e76616c6964206d73672e76616c7565000081525060200191505060405180910390fd5b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061071060016007546112e290919063ffffffff16565b60078190555061072d6006546008546112e290919063ffffffff16565b600881905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb336006546040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156107c857600080fd5b505af11580156107dc573d6000803e3d6000fd5b505050506040513d60208110156107f257600080fd5b8101908080519060200190929190505050503373ffffffffffffffffffffffffffffffffffffffff167f05eecef90fc8ff2f07cbf178b5c99ecaa3f3c8c94fa2755eb918cf5a776a217160405160405180910390a2565b60045481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c81526020018061193f602c913960400191505060405180910390fd5b6108fc81611365565b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c81526020018061193f602c913960400191505060405180910390fd5b6004544210156109fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180611899602c913960400191505060405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610a8957600080fd5b505afa158015610a9d573d6000803e3d6000fd5b505050506040513d6020811015610ab357600080fd5b8101908080519060200190929190505050905060008114610b8057600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342966c68826040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b158015610b4357600080fd5b505af1158015610b57573d6000803e3d6000fd5b505050506040513d6020811015610b6d57600080fd5b8101908080519060200190929190505050505b3373ffffffffffffffffffffffffffffffffffffffff16ff5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c3d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c81526020018061193f602c913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614158015610cc6575060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b610d38576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f436f6e74726f6c6c65643a20696e76616c696420636f6e74726f6c6c6572000081525060200191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60036020528060005260406000206000915054906101000a900460ff1681565b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610e43576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806118ed6022913960400191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ee9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603081526020018061190f6030913960400191505060405180910390fd5b6000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415610fb1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806118206026913960400191505060405180910390fd5b6000841415611028576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f4845524f50726573616c653a20696e76616c696420756e69742070726963650081525060200191505060405180910390fd5b600083141561109f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4845524f50726573616c653a20696e76616c696420756e697420746f6b656e7381525060200191505060405180910390fd5b85600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550836005819055508260068190555061110a60008614156111035762093a80611105565b855b611365565b600082829050146111605761115f828280806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050506113ba565b5b7f5daa87a0e9463431830481fd4b6e3403442dfb9a12b9c07597e9f61d50b633c860405160405180910390a1505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611238576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c81526020018061193f602c913960400191505060405180910390fd5b611282828280806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050506113ba565b5050565b60085481565b60065481565b60055481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008282111561135a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f4d6174684c69623a207375627472616374696f6e206f766572666c6f7700000081525060200191505060405180910390fd5b818303905092915050565b611378814261179790919063ffffffff16565b6004819055507fdb00f0341e024be397e058a193a27b85cc3e7f921640be77ddf155c9f8d37c5a6004546040518082815260200191505060405180910390a150565b60008060008351905060005b818110156115c557600073ffffffffffffffffffffffffffffffffffffffff168582815181106113f257fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161415611467576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001806118c56028913960400191505060405180910390fd5b6003600086838151811061147757fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166115ba576001600360008784815181106114dd57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061154a60018561179790919063ffffffff16565b93506115616006548461179790919063ffffffff16565b925084818151811061156f57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff167f8f42195a0bbfa58954be4349deb9efc38bdb9c298e529f705f8bc1e38bce039960405160405180910390a25b6001810190506113c6565b50600083141561163d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4845524f50726573616c653a20656d707479206163636f756e7473000000000081525060200191505060405180910390fd5b6116528360075461179790919063ffffffff16565b60078190555061166d8260085461179790919063ffffffff16565b600881905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156116fc57600080fd5b505afa158015611710573d6000803e3d6000fd5b505050506040513d602081101561172657600080fd5b81019080805190602001909291905050506008541115611791576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b81526020018061196b602b913960400191505060405180910390fd5b50505050565b600080828401905083811015611815576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f4d6174684c69623a206164646974696f6e206f766572666c6f7700000000000081525060200191505060405180910390fd5b809150509291505056fe4845524f50726573616c653a20746f6b656e20697320746865207a65726f20616464726573734845524f50726573616c653a206d73672e73656e646572206e6f74206f6e207468652077686974656c6973744845524f50726573616c653a2063616e206e6f742062757920616674657220646561646c696e654845524f50726573616c653a2063616e206e6f742064657374726f79206265666f726520646561646c696e654845524f50726573616c653a206163636f756e7420697320746865207a65726f2061646472657373496e697469616c697a61626c653a20616c726561647920696e697469616c697a6564496e697469616c697a61626c653a206d73672e73656e646572206973206e6f742074686520696e697469616c697a6572436f6e74726f6c6c65643a206d73672e73656e646572206973206e6f742074686520636f6e74726f6c6c65724845524f50726573616c653a2070656e64696e6720746f6b656e7320657863656564732062616c616e6365a164736f6c634300060c000a",
  "deployedBytecode": "0x6080604052600436106100e85760003560e01c80639b19251a1161008a578063d127d87211610059578063d127d872146103f9578063e73faa2d14610424578063f77c47911461044f578063fc0c546a14610490576100e8565b80639b19251a1461021d578063a3df415f14610284578063ac71abde14610348578063c47d7029146103ce576100e8565b806329dcb0cf116100c657806329dcb0cf1461014f57806342af18841461017a57806383197ef0146101b557806392eefe9b146101cc576100e8565b8063158ef93e146100ed578063190f82811461011a578063201738e214610145575b600080fd5b3480156100f957600080fd5b506101026104d1565b60405180821515815260200191505060405180910390f35b34801561012657600080fd5b5061012f610529565b6040518082815260200191505060405180910390f35b61014d61052f565b005b34801561015b57600080fd5b50610164610849565b6040518082815260200191505060405180910390f35b34801561018657600080fd5b506101b36004803603602081101561019d57600080fd5b810190808035906020019092919050505061084f565b005b3480156101c157600080fd5b506101ca6108ff565b005b3480156101d857600080fd5b5061021b600480360360208110156101ef57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b99565b005b34801561022957600080fd5b5061026c6004803603602081101561024057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d7b565b60405180821515815260200191505060405180910390f35b34801561029057600080fd5b50610346600480360360a08110156102a757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803590602001909291908035906020019064010000000081111561030257600080fd5b82018360208201111561031457600080fd5b8035906020019184602083028401116401000000008311171561033657600080fd5b9091929391929390505050610d9b565b005b34801561035457600080fd5b506103cc6004803603602081101561036b57600080fd5b810190808035906020019064010000000081111561038857600080fd5b82018360208201111561039a57600080fd5b803590602001918460208302840111640100000000831117156103bc57600080fd5b9091929391929390505050611194565b005b3480156103da57600080fd5b506103e3611286565b6040518082815260200191505060405180910390f35b34801561040557600080fd5b5061040e61128c565b6040518082815260200191505060405180910390f35b34801561043057600080fd5b50610439611292565b6040518082815260200191505060405180910390f35b34801561045b57600080fd5b50610464611298565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561049c57600080fd5b506104a56112bc565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905090565b60075481565b6004544210610589576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806118726027913960400191505060405180910390fd5b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661062b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180611846602c913960400191505060405180910390fd5b60055434146106a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f4845524f50726573616c653a20696e76616c6964206d73672e76616c7565000081525060200191505060405180910390fd5b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061071060016007546112e290919063ffffffff16565b60078190555061072d6006546008546112e290919063ffffffff16565b600881905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb336006546040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156107c857600080fd5b505af11580156107dc573d6000803e3d6000fd5b505050506040513d60208110156107f257600080fd5b8101908080519060200190929190505050503373ffffffffffffffffffffffffffffffffffffffff167f05eecef90fc8ff2f07cbf178b5c99ecaa3f3c8c94fa2755eb918cf5a776a217160405160405180910390a2565b60045481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c81526020018061193f602c913960400191505060405180910390fd5b6108fc81611365565b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c81526020018061193f602c913960400191505060405180910390fd5b6004544210156109fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180611899602c913960400191505060405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610a8957600080fd5b505afa158015610a9d573d6000803e3d6000fd5b505050506040513d6020811015610ab357600080fd5b8101908080519060200190929190505050905060008114610b8057600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342966c68826040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b158015610b4357600080fd5b505af1158015610b57573d6000803e3d6000fd5b505050506040513d6020811015610b6d57600080fd5b8101908080519060200190929190505050505b3373ffffffffffffffffffffffffffffffffffffffff16ff5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c3d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c81526020018061193f602c913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614158015610cc6575060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b610d38576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f436f6e74726f6c6c65643a20696e76616c696420636f6e74726f6c6c6572000081525060200191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60036020528060005260406000206000915054906101000a900460ff1681565b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610e43576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806118ed6022913960400191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ee9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603081526020018061190f6030913960400191505060405180910390fd5b6000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415610fb1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806118206026913960400191505060405180910390fd5b6000841415611028576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f4845524f50726573616c653a20696e76616c696420756e69742070726963650081525060200191505060405180910390fd5b600083141561109f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4845524f50726573616c653a20696e76616c696420756e697420746f6b656e7381525060200191505060405180910390fd5b85600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550836005819055508260068190555061110a60008614156111035762093a80611105565b855b611365565b600082829050146111605761115f828280806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050506113ba565b5b7f5daa87a0e9463431830481fd4b6e3403442dfb9a12b9c07597e9f61d50b633c860405160405180910390a1505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611238576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c81526020018061193f602c913960400191505060405180910390fd5b611282828280806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050506113ba565b5050565b60085481565b60065481565b60055481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008282111561135a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f4d6174684c69623a207375627472616374696f6e206f766572666c6f7700000081525060200191505060405180910390fd5b818303905092915050565b611378814261179790919063ffffffff16565b6004819055507fdb00f0341e024be397e058a193a27b85cc3e7f921640be77ddf155c9f8d37c5a6004546040518082815260200191505060405180910390a150565b60008060008351905060005b818110156115c557600073ffffffffffffffffffffffffffffffffffffffff168582815181106113f257fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161415611467576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001806118c56028913960400191505060405180910390fd5b6003600086838151811061147757fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166115ba576001600360008784815181106114dd57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061154a60018561179790919063ffffffff16565b93506115616006548461179790919063ffffffff16565b925084818151811061156f57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff167f8f42195a0bbfa58954be4349deb9efc38bdb9c298e529f705f8bc1e38bce039960405160405180910390a25b6001810190506113c6565b50600083141561163d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4845524f50726573616c653a20656d707479206163636f756e7473000000000081525060200191505060405180910390fd5b6116528360075461179790919063ffffffff16565b60078190555061166d8260085461179790919063ffffffff16565b600881905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156116fc57600080fd5b505afa158015611710573d6000803e3d6000fd5b505050506040513d602081101561172657600080fd5b81019080805190602001909291905050506008541115611791576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b81526020018061196b602b913960400191505060405180910390fd5b50505050565b600080828401905083811015611815576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f4d6174684c69623a206164646974696f6e206f766572666c6f7700000000000081525060200191505060405180910390fd5b809150509291505056fe4845524f50726573616c653a20746f6b656e20697320746865207a65726f20616464726573734845524f50726573616c653a206d73672e73656e646572206e6f74206f6e207468652077686974656c6973744845524f50726573616c653a2063616e206e6f742062757920616674657220646561646c696e654845524f50726573616c653a2063616e206e6f742064657374726f79206265666f726520646561646c696e654845524f50726573616c653a206163636f756e7420697320746865207a65726f2061646472657373496e697469616c697a61626c653a20616c726561647920696e697469616c697a6564496e697469616c697a61626c653a206d73672e73656e646572206973206e6f742074686520696e697469616c697a6572436f6e74726f6c6c65643a206d73672e73656e646572206973206e6f742074686520636f6e74726f6c6c65724845524f50726573616c653a2070656e64696e6720746f6b656e7320657863656564732062616c616e6365a164736f6c634300060c000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Public constructor"
      }
    },
    "title": "HERO presale",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1877,
        "contract": "src/HEROPresale.sol:HEROPresale",
        "label": "controller",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1931,
        "contract": "src/HEROPresale.sol:HEROPresale",
        "label": "initializer",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 24,
        "contract": "src/HEROPresale.sol:HEROPresale",
        "label": "token",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(HEROToken)457"
      },
      {
        "astId": 28,
        "contract": "src/HEROPresale.sol:HEROPresale",
        "label": "whitelist",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 30,
        "contract": "src/HEROPresale.sol:HEROPresale",
        "label": "deadline",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 32,
        "contract": "src/HEROPresale.sol:HEROPresale",
        "label": "unitPrice",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 34,
        "contract": "src/HEROPresale.sol:HEROPresale",
        "label": "unitTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 36,
        "contract": "src/HEROPresale.sol:HEROPresale",
        "label": "pendingAccounts",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 38,
        "contract": "src/HEROPresale.sol:HEROPresale",
        "label": "pendingTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(HEROToken)457": {
        "encoding": "inplace",
        "label": "contract HEROToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}